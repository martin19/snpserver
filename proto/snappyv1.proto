syntax = "proto3";

package snappyv1;

//server -> client

enum Platform {
    PLATFORM_WINDOWS = 0;
    PLATFORM_LINUX = 1;
    PLATFORM_MACOS = 2;
    PLATFORM_RASPBERRY = 3;
    PLATFORM_ANDROID = 4;
}

enum StreamMedium {
    STREAM_MEDIUM_VIDEO = 0;
    STREAM_MEDIUM_AUDIO = 1;
    STREAM_MEDIUM_PERIPHERIAL = 2;
}

enum StreamEndpoint {
    STREAM_ENDPOINT_X11 = 0;
    STREAM_ENDPOINT_WAYLAND = 1;
    STREAM_ENDPOINT_CAMERA = 2;
    STREAM_ENDPOINT_KEYBOARD = 3;
    STREAM_ENDPOINT_POINTER = 4;
    STREAM_ENDPOINT_CURSOR = 5;
}

enum StreamDirection {
    STREAM_DIRECTION_INPUT = 0;
    STREAM_DIRECTION_OUTPUT = 1;
}

enum StreamEncoding {
    STREAM_ENCODING_H264_SOFTWARE = 0;
    STREAM_ENCODING_H264_HARDWARE = 1;
    STREAM_ENCODING_MP3_SOFTWARE = 2;
    STREAM_ENCODING_MP3_HARDWARE = 3;
}

enum Command {
    COMMAND_INIT = 0;
    COMMAND_START = 1;
    COMMAND_STOP = 2;
    COMMAND_SET_PARAMETER = 3;
    COMMAND_DESTROY = 4;
    COMMAND_ACK = 5;
}

enum PropertyType {
    PROPERTY_TYPE_STRING = 0;
    PROPERTY_TYPE_BOOL = 1;
    PROPERTY_TYPE_UINT32 = 2;
    PROPERTY_TYPE_DOUBLE = 3;
}

message Property {

    message ValueString {
        string value = 1;
    }

    message ValueBool {
        bool value = 1;
    }

    message ValueUint32 {
        uint32 value = 1;
        optional uint32 min = 2;
        optional uint32 max = 3;
    }

    message ValueDouble {
        double value = 1;
        optional double min = 2;
        optional double max = 3;
    }

    PropertyType type = 1;
    string key = 2;
    oneof value {
        ValueString value_string = 3;
        ValueBool value_bool = 4;
        ValueUint32 value_uint32 = 5;
        ValueDouble value_double = 6;
    }
}

//TODO: negotiation
//message ServerInfo {
//    Platform platform = 1;
//    repeated Source available_sources = 3;
//    repeated Encoder available_encoders = 4;
//}

message StreamChange {
    uint32 id = 1;
    Command command = 2;
    StreamMedium stream_medium = 3;
    StreamDirection stream_direction = 4;
    StreamEndpoint stream_endpoint = 5;
    StreamEncoding stream_encoding = 6;
    repeated Property property = 7;
}

//message FrameTiming {
//    uint32 capture_ts_start_ms = 2;
//    uint32 capture_ts_end_ms = 3;
//    uint32 encode_ts_start_ms = 4;
//    uint32 encode_ts_end_ms = 5;
//    uint32 send_ts_start_ms = 6;
//    uint32 send_ts_end_ms = 7;
//}

message StreamData {
    uint32 stream_id = 1;
    bytes payload = 2;
//    optional FrameTiming frame_timing = 3;
}

enum MessageType {
    MESSAGE_TYPE_STREAM_CHANGE = 0;
    MESSAGE_TYPE_STREAM_DATA = 1;
//    MESSAGE_TYPE_SERVER_INFO = 0;
}

message Message {
    MessageType type = 1;
    oneof message {
        StreamChange stream_change = 2;
        StreamData stream_data = 3;
        //        ServerInfo server_info = 2;
    }
}

message StreamDataPointer {
    uint32 absx = 1;
    uint32 absy = 2;
    optional int32 mask = 3;
}

message StreamDataKeyboard {
    uint32 keysym = 1;
    uint32 keycode = 2;
    bool down = 3;
}

message StreamDataCursor {
    uint32 width = 1;
    uint32 height = 2;
    uint32 hotx = 3;
    uint32 hoty = 4;
    bytes image = 5;
}