syntax = "proto3";

package snp;

enum Platform {
    PLATFORM_WINDOWS = 0;
    PLATFORM_LINUX = 1;
    PLATFORM_MACOS = 2;
    PLATFORM_RASPBERRY = 3;
    PLATFORM_ANDROID = 4;
}

enum ComponentType {
    COMPONENT_CAPTURE_VIDEO_DRM = 0;
    COMPONENT_CAPTURE_VIDEO_X11 = 1;
    COMPONENT_CAPTURE_VIDEO_WAYLAND = 2;
    COMPONENT_CAPTURE_VIDEO_V4L = 3;
    COMPONENT_CAPTURE_VIDEO_DUMMY = 4;
    COMPONENT_INPUT_KEYBOARD_X11 = 5;
    COMPONENT_INPUT_POINTER_X11 = 6;
    COMPONENT_INPUT_CURSOR_X11 = 7;
    COMPONENT_OUTPUT_VIDEO_DISPLAY = 8;
    COMPONENT_OUTPUT_KEYBOARD_X11 = 9;
    COMPONENT_OUTPUT_POINTER_X11 = 10;
    COMPONENT_OUTPUT_CURSOR_X11 = 11;
    COMPONENT_ENCODER_OPENH264 = 12;
    COMPONENT_DECODER_OPENH264 = 13;
    COMPONENT_ENCODER_INTEL = 14;
    COMPONENT_DECODER_INTEL = 15;
    COMPONENT_ENCODER_AMD = 16;
    COMPONENT_DECODER_AMD = 17;
}

enum Command {
    COMMAND_START = 0;
    COMMAND_STOP = 1;
}

enum PropertyType {
    PROPERTY_TYPE_STRING = 0;
    PROPERTY_TYPE_BOOL = 1;
    PROPERTY_TYPE_UINT32 = 2;
    PROPERTY_TYPE_DOUBLE = 3;
}

message Property {

    message ValueString {
        string value = 1;
    }

    message ValueBool {
        bool value = 1;
    }

    message ValueUint32 {
        uint32 value = 1;
        optional uint32 min = 2;
        optional uint32 max = 3;
    }

    message ValueDouble {
        double value = 1;
        optional double min = 2;
        optional double max = 3;
    }

    PropertyType type = 1;
    string name = 2;
    oneof value {
        ValueString value_string = 3;
        ValueBool value_bool = 4;
        ValueUint32 value_uint32 = 5;
        ValueDouble value_double = 6;
    }
}

message Component {
    ComponentType componentType = 1;
    repeated Property property = 2;
}

message Capabilities {
    Platform platform = 1;
    repeated Component component = 2;
}

message Setup {
    uint32 id = 1;
    Command command = 2;
    repeated Component pipe = 3;
}

message Data {
    uint32 stream_id = 1;
    oneof data {
        StreamDataRaw dataRaw = 2;
        StreamDataPointer dataPointer = 3;
        StreamDataKeyboard dataKeyboard = 4;
        StreamDataCursor dataCursor = 5;
    }
}

enum MessageType {
    MESSAGE_TYPE_COMMAND = 0;
    MESSAGE_TYPE_DATA = 1;
    MESSAGE_TYPE_CAPABILITIES = 2;
}

message Message {
    MessageType type = 1;
    oneof message {
        Capabilities capabilities = 2;
        Setup setup = 3;
        Data data = 4;
    }
}

message StreamDataRaw {
    bytes payload = 1;
}

message StreamDataPointer {
    uint32 absx = 1;
    uint32 absy = 2;
    optional int32 mask = 3;
}

message StreamDataKeyboard {
    uint32 keysym = 1;
    uint32 keycode = 2;
    bool down = 3;
}

message StreamDataCursor {
    uint32 width = 1;
    uint32 height = 2;
    uint32 hotx = 3;
    uint32 hoty = 4;
    bytes image = 5;
}

//message FrameTiming {
//    uint32 capture_ts_start_ms = 2;
//    uint32 capture_ts_end_ms = 3;
//    uint32 encode_ts_start_ms = 4;
//    uint32 encode_ts_end_ms = 5;
//    uint32 send_ts_start_ms = 6;
//    uint32 send_ts_end_ms = 7;
//    optional FrameTiming frame_timing = 3;
//}