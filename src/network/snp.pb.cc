// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: snp.proto

#include "snp.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace snp {
PROTOBUF_CONSTEXPR Property_ValueString::Property_ValueString(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.value_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Property_ValueStringDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Property_ValueStringDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Property_ValueStringDefaultTypeInternal() {}
  union {
    Property_ValueString _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Property_ValueStringDefaultTypeInternal _Property_ValueString_default_instance_;
PROTOBUF_CONSTEXPR Property_ValueBool::Property_ValueBool(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.value_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Property_ValueBoolDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Property_ValueBoolDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Property_ValueBoolDefaultTypeInternal() {}
  union {
    Property_ValueBool _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Property_ValueBoolDefaultTypeInternal _Property_ValueBool_default_instance_;
PROTOBUF_CONSTEXPR Property_ValueUint32::Property_ValueUint32(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.value_)*/0u
  , /*decltype(_impl_.min_)*/0u
  , /*decltype(_impl_.max_)*/0u} {}
struct Property_ValueUint32DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Property_ValueUint32DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Property_ValueUint32DefaultTypeInternal() {}
  union {
    Property_ValueUint32 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Property_ValueUint32DefaultTypeInternal _Property_ValueUint32_default_instance_;
PROTOBUF_CONSTEXPR Property_ValueDouble::Property_ValueDouble(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.value_)*/0
  , /*decltype(_impl_.min_)*/0
  , /*decltype(_impl_.max_)*/0} {}
struct Property_ValueDoubleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Property_ValueDoubleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Property_ValueDoubleDefaultTypeInternal() {}
  union {
    Property_ValueDouble _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Property_ValueDoubleDefaultTypeInternal _Property_ValueDouble_default_instance_;
PROTOBUF_CONSTEXPR Property::Property(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.value_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct PropertyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PropertyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PropertyDefaultTypeInternal() {}
  union {
    Property _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PropertyDefaultTypeInternal _Property_default_instance_;
PROTOBUF_CONSTEXPR Component::Component(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.property_)*/{}
  , /*decltype(_impl_.componenttype_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ComponentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ComponentDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ComponentDefaultTypeInternal() {}
  union {
    Component _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ComponentDefaultTypeInternal _Component_default_instance_;
PROTOBUF_CONSTEXPR Capabilities::Capabilities(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.component_)*/{}
  , /*decltype(_impl_.platform_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CapabilitiesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CapabilitiesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CapabilitiesDefaultTypeInternal() {}
  union {
    Capabilities _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CapabilitiesDefaultTypeInternal _Capabilities_default_instance_;
PROTOBUF_CONSTEXPR Setup::Setup(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.component_)*/{}
  , /*decltype(_impl_.pipe_id_)*/0u
  , /*decltype(_impl_.command_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SetupDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetupDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetupDefaultTypeInternal() {}
  union {
    Setup _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetupDefaultTypeInternal _Setup_default_instance_;
PROTOBUF_CONSTEXPR Data::Data(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pipe_id_)*/0u
  , /*decltype(_impl_.data_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct DataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DataDefaultTypeInternal() {}
  union {
    Data _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DataDefaultTypeInternal _Data_default_instance_;
PROTOBUF_CONSTEXPR Message::Message(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.message_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct MessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MessageDefaultTypeInternal() {}
  union {
    Message _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MessageDefaultTypeInternal _Message_default_instance_;
PROTOBUF_CONSTEXPR StreamDataRaw::StreamDataRaw(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.payload_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StreamDataRawDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StreamDataRawDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StreamDataRawDefaultTypeInternal() {}
  union {
    StreamDataRaw _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StreamDataRawDefaultTypeInternal _StreamDataRaw_default_instance_;
PROTOBUF_CONSTEXPR StreamDataPointer::StreamDataPointer(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.absx_)*/0u
  , /*decltype(_impl_.absy_)*/0u
  , /*decltype(_impl_.mask_)*/0} {}
struct StreamDataPointerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StreamDataPointerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StreamDataPointerDefaultTypeInternal() {}
  union {
    StreamDataPointer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StreamDataPointerDefaultTypeInternal _StreamDataPointer_default_instance_;
PROTOBUF_CONSTEXPR StreamDataKeyboard::StreamDataKeyboard(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.keysym_)*/0u
  , /*decltype(_impl_.keycode_)*/0u
  , /*decltype(_impl_.down_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StreamDataKeyboardDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StreamDataKeyboardDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StreamDataKeyboardDefaultTypeInternal() {}
  union {
    StreamDataKeyboard _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StreamDataKeyboardDefaultTypeInternal _StreamDataKeyboard_default_instance_;
PROTOBUF_CONSTEXPR StreamDataCursor::StreamDataCursor(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.image_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.width_)*/0u
  , /*decltype(_impl_.height_)*/0u
  , /*decltype(_impl_.hotx_)*/0u
  , /*decltype(_impl_.hoty_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StreamDataCursorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StreamDataCursorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StreamDataCursorDefaultTypeInternal() {}
  union {
    StreamDataCursor _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StreamDataCursorDefaultTypeInternal _StreamDataCursor_default_instance_;
}  // namespace snp
static ::_pb::Metadata file_level_metadata_snp_2eproto[14];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_snp_2eproto[5];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_snp_2eproto = nullptr;

const uint32_t TableStruct_snp_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::snp::Property_ValueString, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::snp::Property_ValueString, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::snp::Property_ValueBool, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::snp::Property_ValueBool, _impl_.value_),
  PROTOBUF_FIELD_OFFSET(::snp::Property_ValueUint32, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::snp::Property_ValueUint32, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::snp::Property_ValueUint32, _impl_.value_),
  PROTOBUF_FIELD_OFFSET(::snp::Property_ValueUint32, _impl_.min_),
  PROTOBUF_FIELD_OFFSET(::snp::Property_ValueUint32, _impl_.max_),
  ~0u,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::snp::Property_ValueDouble, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::snp::Property_ValueDouble, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::snp::Property_ValueDouble, _impl_.value_),
  PROTOBUF_FIELD_OFFSET(::snp::Property_ValueDouble, _impl_.min_),
  PROTOBUF_FIELD_OFFSET(::snp::Property_ValueDouble, _impl_.max_),
  ~0u,
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::snp::Property, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::snp::Property, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::snp::Property, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::snp::Property, _impl_.name_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::snp::Property, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::snp::Component, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::snp::Component, _impl_.componenttype_),
  PROTOBUF_FIELD_OFFSET(::snp::Component, _impl_.property_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::snp::Capabilities, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::snp::Capabilities, _impl_.platform_),
  PROTOBUF_FIELD_OFFSET(::snp::Capabilities, _impl_.component_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::snp::Setup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::snp::Setup, _impl_.pipe_id_),
  PROTOBUF_FIELD_OFFSET(::snp::Setup, _impl_.command_),
  PROTOBUF_FIELD_OFFSET(::snp::Setup, _impl_.component_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::snp::Data, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::snp::Data, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::snp::Data, _impl_.pipe_id_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::snp::Data, _impl_.data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::snp::Message, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::snp::Message, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::snp::Message, _impl_.type_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::snp::Message, _impl_.message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::snp::StreamDataRaw, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::snp::StreamDataRaw, _impl_.payload_),
  PROTOBUF_FIELD_OFFSET(::snp::StreamDataPointer, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::snp::StreamDataPointer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::snp::StreamDataPointer, _impl_.absx_),
  PROTOBUF_FIELD_OFFSET(::snp::StreamDataPointer, _impl_.absy_),
  PROTOBUF_FIELD_OFFSET(::snp::StreamDataPointer, _impl_.mask_),
  ~0u,
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::snp::StreamDataKeyboard, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::snp::StreamDataKeyboard, _impl_.keysym_),
  PROTOBUF_FIELD_OFFSET(::snp::StreamDataKeyboard, _impl_.keycode_),
  PROTOBUF_FIELD_OFFSET(::snp::StreamDataKeyboard, _impl_.down_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::snp::StreamDataCursor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::snp::StreamDataCursor, _impl_.width_),
  PROTOBUF_FIELD_OFFSET(::snp::StreamDataCursor, _impl_.height_),
  PROTOBUF_FIELD_OFFSET(::snp::StreamDataCursor, _impl_.hotx_),
  PROTOBUF_FIELD_OFFSET(::snp::StreamDataCursor, _impl_.hoty_),
  PROTOBUF_FIELD_OFFSET(::snp::StreamDataCursor, _impl_.image_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::snp::Property_ValueString)},
  { 7, -1, -1, sizeof(::snp::Property_ValueBool)},
  { 14, 23, -1, sizeof(::snp::Property_ValueUint32)},
  { 26, 35, -1, sizeof(::snp::Property_ValueDouble)},
  { 38, -1, -1, sizeof(::snp::Property)},
  { 51, -1, -1, sizeof(::snp::Component)},
  { 59, -1, -1, sizeof(::snp::Capabilities)},
  { 67, -1, -1, sizeof(::snp::Setup)},
  { 76, -1, -1, sizeof(::snp::Data)},
  { 88, -1, -1, sizeof(::snp::Message)},
  { 99, -1, -1, sizeof(::snp::StreamDataRaw)},
  { 106, 115, -1, sizeof(::snp::StreamDataPointer)},
  { 118, -1, -1, sizeof(::snp::StreamDataKeyboard)},
  { 127, -1, -1, sizeof(::snp::StreamDataCursor)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::snp::_Property_ValueString_default_instance_._instance,
  &::snp::_Property_ValueBool_default_instance_._instance,
  &::snp::_Property_ValueUint32_default_instance_._instance,
  &::snp::_Property_ValueDouble_default_instance_._instance,
  &::snp::_Property_default_instance_._instance,
  &::snp::_Component_default_instance_._instance,
  &::snp::_Capabilities_default_instance_._instance,
  &::snp::_Setup_default_instance_._instance,
  &::snp::_Data_default_instance_._instance,
  &::snp::_Message_default_instance_._instance,
  &::snp::_StreamDataRaw_default_instance_._instance,
  &::snp::_StreamDataPointer_default_instance_._instance,
  &::snp::_StreamDataKeyboard_default_instance_._instance,
  &::snp::_StreamDataCursor_default_instance_._instance,
};

const char descriptor_table_protodef_snp_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\tsnp.proto\022\003snp\"\350\003\n\010Property\022\037\n\004type\030\001 "
  "\001(\0162\021.snp.PropertyType\022\014\n\004name\030\002 \001(\t\0221\n\014"
  "value_string\030\003 \001(\0132\031.snp.Property.ValueS"
  "tringH\000\022-\n\nvalue_bool\030\004 \001(\0132\027.snp.Proper"
  "ty.ValueBoolH\000\0221\n\014value_uint32\030\005 \001(\0132\031.s"
  "np.Property.ValueUint32H\000\0221\n\014value_doubl"
  "e\030\006 \001(\0132\031.snp.Property.ValueDoubleH\000\032\034\n\013"
  "ValueString\022\r\n\005value\030\001 \001(\t\032\032\n\tValueBool\022"
  "\r\n\005value\030\001 \001(\010\032P\n\013ValueUint32\022\r\n\005value\030\001"
  " \001(\r\022\020\n\003min\030\002 \001(\rH\000\210\001\001\022\020\n\003max\030\003 \001(\rH\001\210\001\001"
  "B\006\n\004_minB\006\n\004_max\032P\n\013ValueDouble\022\r\n\005value"
  "\030\001 \001(\001\022\020\n\003min\030\002 \001(\001H\000\210\001\001\022\020\n\003max\030\003 \001(\001H\001\210"
  "\001\001B\006\n\004_minB\006\n\004_maxB\007\n\005value\"W\n\tComponent"
  "\022)\n\rcomponentType\030\001 \001(\0162\022.snp.ComponentT"
  "ype\022\037\n\010property\030\002 \003(\0132\r.snp.Property\"R\n\014"
  "Capabilities\022\037\n\010platform\030\001 \001(\0162\r.snp.Pla"
  "tform\022!\n\tcomponent\030\002 \003(\0132\016.snp.Component"
  "\"Z\n\005Setup\022\017\n\007pipe_id\030\001 \001(\r\022\035\n\007command\030\002 "
  "\001(\0162\014.snp.Command\022!\n\tcomponent\030\003 \003(\0132\016.s"
  "np.Component\"\323\001\n\004Data\022\017\n\007pipe_id\030\001 \001(\r\022%"
  "\n\007dataRaw\030\002 \001(\0132\022.snp.StreamDataRawH\000\022-\n"
  "\013dataPointer\030\003 \001(\0132\026.snp.StreamDataPoint"
  "erH\000\022/\n\014dataKeyboard\030\004 \001(\0132\027.snp.StreamD"
  "ataKeyboardH\000\022+\n\ndataCursor\030\005 \001(\0132\025.snp."
  "StreamDataCursorH\000B\006\n\004data\"\227\001\n\007Message\022\036"
  "\n\004type\030\001 \001(\0162\020.snp.MessageType\022)\n\014capabi"
  "lities\030\002 \001(\0132\021.snp.CapabilitiesH\000\022\033\n\005set"
  "up\030\003 \001(\0132\n.snp.SetupH\000\022\031\n\004data\030\004 \001(\0132\t.s"
  "np.DataH\000B\t\n\007message\" \n\rStreamDataRaw\022\017\n"
  "\007payload\030\001 \001(\014\"K\n\021StreamDataPointer\022\014\n\004a"
  "bsx\030\001 \001(\r\022\014\n\004absy\030\002 \001(\r\022\021\n\004mask\030\003 \001(\005H\000\210"
  "\001\001B\007\n\005_mask\"C\n\022StreamDataKeyboard\022\016\n\006key"
  "sym\030\001 \001(\r\022\017\n\007keycode\030\002 \001(\r\022\014\n\004down\030\003 \001(\010"
  "\"\\\n\020StreamDataCursor\022\r\n\005width\030\001 \001(\r\022\016\n\006h"
  "eight\030\002 \001(\r\022\014\n\004hotx\030\003 \001(\r\022\014\n\004hoty\030\004 \001(\r\022"
  "\r\n\005image\030\005 \001(\014*v\n\010Platform\022\024\n\020PLATFORM_W"
  "INDOWS\020\000\022\022\n\016PLATFORM_LINUX\020\001\022\022\n\016PLATFORM"
  "_MACOS\020\002\022\026\n\022PLATFORM_RASPBERRY\020\003\022\024\n\020PLAT"
  "FORM_ANDROID\020\004*\212\005\n\rComponentType\022\037\n\033COMP"
  "ONENT_CAPTURE_VIDEO_DRM\020\000\022\037\n\033COMPONENT_C"
  "APTURE_VIDEO_X11\020\001\022#\n\037COMPONENT_CAPTURE_"
  "VIDEO_WAYLAND\020\002\022\037\n\033COMPONENT_CAPTURE_VID"
  "EO_V4L\020\003\022!\n\035COMPONENT_CAPTURE_VIDEO_DUMM"
  "Y\020\004\022 \n\034COMPONENT_INPUT_KEYBOARD_X11\020\005\022\037\n"
  "\033COMPONENT_INPUT_POINTER_X11\020\006\022\036\n\032COMPON"
  "ENT_INPUT_CURSOR_X11\020\007\022\"\n\036COMPONENT_OUTP"
  "UT_VIDEO_DISPLAY\020\010\022!\n\035COMPONENT_OUTPUT_K"
  "EYBOARD_X11\020\t\022 \n\034COMPONENT_OUTPUT_POINTE"
  "R_X11\020\n\022\037\n\033COMPONENT_OUTPUT_CURSOR_X11\020\013"
  "\022\034\n\030COMPONENT_ENCODER_FFMPEG\020\014\022\034\n\030COMPON"
  "ENT_DECODER_FFMPEG\020\r\022\031\n\025COMPONENT_OUTPUT"
  "_FILE\020\016\022\030\n\024COMPONENT_OUTPUT_TCP\020\017\022\027\n\023COM"
  "PONENT_INPUT_TCP\020\020\022\036\n\032COMPONENT_OUTPUT_W"
  "EBSOCKET\020\021\022\035\n\031COMPONENT_INPUT_WEBSOCKET\020"
  "\022\022\030\n\024COMPONENT_CAPTURE_GL\020\023*.\n\007Command\022\021"
  "\n\rCOMMAND_START\020\000\022\020\n\014COMMAND_STOP\020\001*t\n\014P"
  "ropertyType\022\030\n\024PROPERTY_TYPE_STRING\020\000\022\026\n"
  "\022PROPERTY_TYPE_BOOL\020\001\022\030\n\024PROPERTY_TYPE_U"
  "INT32\020\002\022\030\n\024PROPERTY_TYPE_DOUBLE\020\003*[\n\013Mes"
  "sageType\022\026\n\022MESSAGE_TYPE_SETUP\020\000\022\025\n\021MESS"
  "AGE_TYPE_DATA\020\001\022\035\n\031MESSAGE_TYPE_CAPABILI"
  "TIES\020\002b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_snp_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_snp_2eproto = {
    false, false, 2454, descriptor_table_protodef_snp_2eproto,
    "snp.proto",
    &descriptor_table_snp_2eproto_once, nullptr, 0, 14,
    schemas, file_default_instances, TableStruct_snp_2eproto::offsets,
    file_level_metadata_snp_2eproto, file_level_enum_descriptors_snp_2eproto,
    file_level_service_descriptors_snp_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_snp_2eproto_getter() {
  return &descriptor_table_snp_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_snp_2eproto(&descriptor_table_snp_2eproto);
namespace snp {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Platform_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_snp_2eproto);
  return file_level_enum_descriptors_snp_2eproto[0];
}
bool Platform_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ComponentType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_snp_2eproto);
  return file_level_enum_descriptors_snp_2eproto[1];
}
bool ComponentType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Command_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_snp_2eproto);
  return file_level_enum_descriptors_snp_2eproto[2];
}
bool Command_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PropertyType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_snp_2eproto);
  return file_level_enum_descriptors_snp_2eproto[3];
}
bool PropertyType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MessageType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_snp_2eproto);
  return file_level_enum_descriptors_snp_2eproto[4];
}
bool MessageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Property_ValueString::_Internal {
 public:
};

Property_ValueString::Property_ValueString(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:snp.Property.ValueString)
}
Property_ValueString::Property_ValueString(const Property_ValueString& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Property_ValueString* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_value().empty()) {
    _this->_impl_.value_.Set(from._internal_value(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:snp.Property.ValueString)
}

inline void Property_ValueString::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Property_ValueString::~Property_ValueString() {
  // @@protoc_insertion_point(destructor:snp.Property.ValueString)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Property_ValueString::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.value_.Destroy();
}

void Property_ValueString::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Property_ValueString::Clear() {
// @@protoc_insertion_point(message_clear_start:snp.Property.ValueString)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.value_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Property_ValueString::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "snp.Property.ValueString.value"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Property_ValueString::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:snp.Property.ValueString)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string value = 1;
  if (!this->_internal_value().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "snp.Property.ValueString.value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:snp.Property.ValueString)
  return target;
}

size_t Property_ValueString::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:snp.Property.ValueString)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string value = 1;
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Property_ValueString::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Property_ValueString::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Property_ValueString::GetClassData() const { return &_class_data_; }


void Property_ValueString::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Property_ValueString*>(&to_msg);
  auto& from = static_cast<const Property_ValueString&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:snp.Property.ValueString)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_value().empty()) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Property_ValueString::CopyFrom(const Property_ValueString& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:snp.Property.ValueString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Property_ValueString::IsInitialized() const {
  return true;
}

void Property_ValueString::InternalSwap(Property_ValueString* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.value_, lhs_arena,
      &other->_impl_.value_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Property_ValueString::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_snp_2eproto_getter, &descriptor_table_snp_2eproto_once,
      file_level_metadata_snp_2eproto[0]);
}

// ===================================================================

class Property_ValueBool::_Internal {
 public:
};

Property_ValueBool::Property_ValueBool(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:snp.Property.ValueBool)
}
Property_ValueBool::Property_ValueBool(const Property_ValueBool& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Property_ValueBool* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.value_ = from._impl_.value_;
  // @@protoc_insertion_point(copy_constructor:snp.Property.ValueBool)
}

inline void Property_ValueBool::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Property_ValueBool::~Property_ValueBool() {
  // @@protoc_insertion_point(destructor:snp.Property.ValueBool)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Property_ValueBool::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Property_ValueBool::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Property_ValueBool::Clear() {
// @@protoc_insertion_point(message_clear_start:snp.Property.ValueBool)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.value_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Property_ValueBool::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Property_ValueBool::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:snp.Property.ValueBool)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool value = 1;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:snp.Property.ValueBool)
  return target;
}

size_t Property_ValueBool::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:snp.Property.ValueBool)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool value = 1;
  if (this->_internal_value() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Property_ValueBool::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Property_ValueBool::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Property_ValueBool::GetClassData() const { return &_class_data_; }


void Property_ValueBool::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Property_ValueBool*>(&to_msg);
  auto& from = static_cast<const Property_ValueBool&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:snp.Property.ValueBool)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_value() != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Property_ValueBool::CopyFrom(const Property_ValueBool& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:snp.Property.ValueBool)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Property_ValueBool::IsInitialized() const {
  return true;
}

void Property_ValueBool::InternalSwap(Property_ValueBool* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.value_, other->_impl_.value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Property_ValueBool::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_snp_2eproto_getter, &descriptor_table_snp_2eproto_once,
      file_level_metadata_snp_2eproto[1]);
}

// ===================================================================

class Property_ValueUint32::_Internal {
 public:
  using HasBits = decltype(std::declval<Property_ValueUint32>()._impl_._has_bits_);
  static void set_has_min(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_max(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Property_ValueUint32::Property_ValueUint32(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:snp.Property.ValueUint32)
}
Property_ValueUint32::Property_ValueUint32(const Property_ValueUint32& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Property_ValueUint32* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.value_){}
    , decltype(_impl_.min_){}
    , decltype(_impl_.max_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.value_, &from._impl_.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.max_) -
    reinterpret_cast<char*>(&_impl_.value_)) + sizeof(_impl_.max_));
  // @@protoc_insertion_point(copy_constructor:snp.Property.ValueUint32)
}

inline void Property_ValueUint32::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.value_){0u}
    , decltype(_impl_.min_){0u}
    , decltype(_impl_.max_){0u}
  };
}

Property_ValueUint32::~Property_ValueUint32() {
  // @@protoc_insertion_point(destructor:snp.Property.ValueUint32)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Property_ValueUint32::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Property_ValueUint32::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Property_ValueUint32::Clear() {
// @@protoc_insertion_point(message_clear_start:snp.Property.ValueUint32)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.value_ = 0u;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.min_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.max_) -
        reinterpret_cast<char*>(&_impl_.min_)) + sizeof(_impl_.max_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Property_ValueUint32::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 min = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_min(&has_bits);
          _impl_.min_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 max = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_max(&has_bits);
          _impl_.max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Property_ValueUint32::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:snp.Property.ValueUint32)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 value = 1;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_value(), target);
  }

  // optional uint32 min = 2;
  if (_internal_has_min()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_min(), target);
  }

  // optional uint32 max = 3;
  if (_internal_has_max()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_max(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:snp.Property.ValueUint32)
  return target;
}

size_t Property_ValueUint32::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:snp.Property.ValueUint32)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 value = 1;
  if (this->_internal_value() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_value());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 min = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_min());
    }

    // optional uint32 max = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_max());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Property_ValueUint32::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Property_ValueUint32::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Property_ValueUint32::GetClassData() const { return &_class_data_; }


void Property_ValueUint32::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Property_ValueUint32*>(&to_msg);
  auto& from = static_cast<const Property_ValueUint32&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:snp.Property.ValueUint32)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_value() != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.min_ = from._impl_.min_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.max_ = from._impl_.max_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Property_ValueUint32::CopyFrom(const Property_ValueUint32& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:snp.Property.ValueUint32)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Property_ValueUint32::IsInitialized() const {
  return true;
}

void Property_ValueUint32::InternalSwap(Property_ValueUint32* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Property_ValueUint32, _impl_.max_)
      + sizeof(Property_ValueUint32::_impl_.max_)
      - PROTOBUF_FIELD_OFFSET(Property_ValueUint32, _impl_.value_)>(
          reinterpret_cast<char*>(&_impl_.value_),
          reinterpret_cast<char*>(&other->_impl_.value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Property_ValueUint32::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_snp_2eproto_getter, &descriptor_table_snp_2eproto_once,
      file_level_metadata_snp_2eproto[2]);
}

// ===================================================================

class Property_ValueDouble::_Internal {
 public:
  using HasBits = decltype(std::declval<Property_ValueDouble>()._impl_._has_bits_);
  static void set_has_min(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_max(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Property_ValueDouble::Property_ValueDouble(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:snp.Property.ValueDouble)
}
Property_ValueDouble::Property_ValueDouble(const Property_ValueDouble& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Property_ValueDouble* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.value_){}
    , decltype(_impl_.min_){}
    , decltype(_impl_.max_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.value_, &from._impl_.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.max_) -
    reinterpret_cast<char*>(&_impl_.value_)) + sizeof(_impl_.max_));
  // @@protoc_insertion_point(copy_constructor:snp.Property.ValueDouble)
}

inline void Property_ValueDouble::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.value_){0}
    , decltype(_impl_.min_){0}
    , decltype(_impl_.max_){0}
  };
}

Property_ValueDouble::~Property_ValueDouble() {
  // @@protoc_insertion_point(destructor:snp.Property.ValueDouble)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Property_ValueDouble::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Property_ValueDouble::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Property_ValueDouble::Clear() {
// @@protoc_insertion_point(message_clear_start:snp.Property.ValueDouble)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.value_ = 0;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.min_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.max_) -
        reinterpret_cast<char*>(&_impl_.min_)) + sizeof(_impl_.max_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Property_ValueDouble::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double min = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_min(&has_bits);
          _impl_.min_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double max = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_max(&has_bits);
          _impl_.max_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Property_ValueDouble::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:snp.Property.ValueDouble)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double value = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_value = this->_internal_value();
  uint64_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_value(), target);
  }

  // optional double min = 2;
  if (_internal_has_min()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_min(), target);
  }

  // optional double max = 3;
  if (_internal_has_max()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_max(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:snp.Property.ValueDouble)
  return target;
}

size_t Property_ValueDouble::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:snp.Property.ValueDouble)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double value = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_value = this->_internal_value();
  uint64_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    total_size += 1 + 8;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double min = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double max = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Property_ValueDouble::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Property_ValueDouble::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Property_ValueDouble::GetClassData() const { return &_class_data_; }


void Property_ValueDouble::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Property_ValueDouble*>(&to_msg);
  auto& from = static_cast<const Property_ValueDouble&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:snp.Property.ValueDouble)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_value = from._internal_value();
  uint64_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.min_ = from._impl_.min_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.max_ = from._impl_.max_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Property_ValueDouble::CopyFrom(const Property_ValueDouble& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:snp.Property.ValueDouble)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Property_ValueDouble::IsInitialized() const {
  return true;
}

void Property_ValueDouble::InternalSwap(Property_ValueDouble* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Property_ValueDouble, _impl_.max_)
      + sizeof(Property_ValueDouble::_impl_.max_)
      - PROTOBUF_FIELD_OFFSET(Property_ValueDouble, _impl_.value_)>(
          reinterpret_cast<char*>(&_impl_.value_),
          reinterpret_cast<char*>(&other->_impl_.value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Property_ValueDouble::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_snp_2eproto_getter, &descriptor_table_snp_2eproto_once,
      file_level_metadata_snp_2eproto[3]);
}

// ===================================================================

class Property::_Internal {
 public:
  static const ::snp::Property_ValueString& value_string(const Property* msg);
  static const ::snp::Property_ValueBool& value_bool(const Property* msg);
  static const ::snp::Property_ValueUint32& value_uint32(const Property* msg);
  static const ::snp::Property_ValueDouble& value_double(const Property* msg);
};

const ::snp::Property_ValueString&
Property::_Internal::value_string(const Property* msg) {
  return *msg->_impl_.value_.value_string_;
}
const ::snp::Property_ValueBool&
Property::_Internal::value_bool(const Property* msg) {
  return *msg->_impl_.value_.value_bool_;
}
const ::snp::Property_ValueUint32&
Property::_Internal::value_uint32(const Property* msg) {
  return *msg->_impl_.value_.value_uint32_;
}
const ::snp::Property_ValueDouble&
Property::_Internal::value_double(const Property* msg) {
  return *msg->_impl_.value_.value_double_;
}
void Property::set_allocated_value_string(::snp::Property_ValueString* value_string) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (value_string) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(value_string);
    if (message_arena != submessage_arena) {
      value_string = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value_string, submessage_arena);
    }
    set_has_value_string();
    _impl_.value_.value_string_ = value_string;
  }
  // @@protoc_insertion_point(field_set_allocated:snp.Property.value_string)
}
void Property::set_allocated_value_bool(::snp::Property_ValueBool* value_bool) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (value_bool) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(value_bool);
    if (message_arena != submessage_arena) {
      value_bool = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value_bool, submessage_arena);
    }
    set_has_value_bool();
    _impl_.value_.value_bool_ = value_bool;
  }
  // @@protoc_insertion_point(field_set_allocated:snp.Property.value_bool)
}
void Property::set_allocated_value_uint32(::snp::Property_ValueUint32* value_uint32) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (value_uint32) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(value_uint32);
    if (message_arena != submessage_arena) {
      value_uint32 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value_uint32, submessage_arena);
    }
    set_has_value_uint32();
    _impl_.value_.value_uint32_ = value_uint32;
  }
  // @@protoc_insertion_point(field_set_allocated:snp.Property.value_uint32)
}
void Property::set_allocated_value_double(::snp::Property_ValueDouble* value_double) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (value_double) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(value_double);
    if (message_arena != submessage_arena) {
      value_double = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value_double, submessage_arena);
    }
    set_has_value_double();
    _impl_.value_.value_double_ = value_double;
  }
  // @@protoc_insertion_point(field_set_allocated:snp.Property.value_double)
}
Property::Property(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:snp.Property)
}
Property::Property(const Property& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Property* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.type_ = from._impl_.type_;
  clear_has_value();
  switch (from.value_case()) {
    case kValueString: {
      _this->_internal_mutable_value_string()->::snp::Property_ValueString::MergeFrom(
          from._internal_value_string());
      break;
    }
    case kValueBool: {
      _this->_internal_mutable_value_bool()->::snp::Property_ValueBool::MergeFrom(
          from._internal_value_bool());
      break;
    }
    case kValueUint32: {
      _this->_internal_mutable_value_uint32()->::snp::Property_ValueUint32::MergeFrom(
          from._internal_value_uint32());
      break;
    }
    case kValueDouble: {
      _this->_internal_mutable_value_double()->::snp::Property_ValueDouble::MergeFrom(
          from._internal_value_double());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:snp.Property)
}

inline void Property::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_value();
}

Property::~Property() {
  // @@protoc_insertion_point(destructor:snp.Property)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Property::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  if (has_value()) {
    clear_value();
  }
}

void Property::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Property::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:snp.Property)
  switch (value_case()) {
    case kValueString: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.value_string_;
      }
      break;
    }
    case kValueBool: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.value_bool_;
      }
      break;
    }
    case kValueUint32: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.value_uint32_;
      }
      break;
    }
    case kValueDouble: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.value_double_;
      }
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = VALUE_NOT_SET;
}


void Property::Clear() {
// @@protoc_insertion_point(message_clear_start:snp.Property)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.type_ = 0;
  clear_value();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Property::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .snp.PropertyType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::snp::PropertyType>(val));
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "snp.Property.name"));
        } else
          goto handle_unusual;
        continue;
      // .snp.Property.ValueString value_string = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_value_string(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .snp.Property.ValueBool value_bool = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_value_bool(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .snp.Property.ValueUint32 value_uint32 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_value_uint32(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .snp.Property.ValueDouble value_double = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_value_double(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Property::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:snp.Property)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .snp.PropertyType type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "snp.Property.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // .snp.Property.ValueString value_string = 3;
  if (_internal_has_value_string()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::value_string(this),
        _Internal::value_string(this).GetCachedSize(), target, stream);
  }

  // .snp.Property.ValueBool value_bool = 4;
  if (_internal_has_value_bool()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::value_bool(this),
        _Internal::value_bool(this).GetCachedSize(), target, stream);
  }

  // .snp.Property.ValueUint32 value_uint32 = 5;
  if (_internal_has_value_uint32()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::value_uint32(this),
        _Internal::value_uint32(this).GetCachedSize(), target, stream);
  }

  // .snp.Property.ValueDouble value_double = 6;
  if (_internal_has_value_double()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::value_double(this),
        _Internal::value_double(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:snp.Property)
  return target;
}

size_t Property::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:snp.Property)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .snp.PropertyType type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  switch (value_case()) {
    // .snp.Property.ValueString value_string = 3;
    case kValueString: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_.value_string_);
      break;
    }
    // .snp.Property.ValueBool value_bool = 4;
    case kValueBool: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_.value_bool_);
      break;
    }
    // .snp.Property.ValueUint32 value_uint32 = 5;
    case kValueUint32: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_.value_uint32_);
      break;
    }
    // .snp.Property.ValueDouble value_double = 6;
    case kValueDouble: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_.value_double_);
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Property::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Property::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Property::GetClassData() const { return &_class_data_; }


void Property::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Property*>(&to_msg);
  auto& from = static_cast<const Property&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:snp.Property)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  switch (from.value_case()) {
    case kValueString: {
      _this->_internal_mutable_value_string()->::snp::Property_ValueString::MergeFrom(
          from._internal_value_string());
      break;
    }
    case kValueBool: {
      _this->_internal_mutable_value_bool()->::snp::Property_ValueBool::MergeFrom(
          from._internal_value_bool());
      break;
    }
    case kValueUint32: {
      _this->_internal_mutable_value_uint32()->::snp::Property_ValueUint32::MergeFrom(
          from._internal_value_uint32());
      break;
    }
    case kValueDouble: {
      _this->_internal_mutable_value_double()->::snp::Property_ValueDouble::MergeFrom(
          from._internal_value_double());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Property::CopyFrom(const Property& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:snp.Property)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Property::IsInitialized() const {
  return true;
}

void Property::InternalSwap(Property* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  swap(_impl_.type_, other->_impl_.type_);
  swap(_impl_.value_, other->_impl_.value_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Property::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_snp_2eproto_getter, &descriptor_table_snp_2eproto_once,
      file_level_metadata_snp_2eproto[4]);
}

// ===================================================================

class Component::_Internal {
 public:
};

Component::Component(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:snp.Component)
}
Component::Component(const Component& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Component* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.property_){from._impl_.property_}
    , decltype(_impl_.componenttype_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.componenttype_ = from._impl_.componenttype_;
  // @@protoc_insertion_point(copy_constructor:snp.Component)
}

inline void Component::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.property_){arena}
    , decltype(_impl_.componenttype_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Component::~Component() {
  // @@protoc_insertion_point(destructor:snp.Component)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Component::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.property_.~RepeatedPtrField();
}

void Component::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Component::Clear() {
// @@protoc_insertion_point(message_clear_start:snp.Component)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.property_.Clear();
  _impl_.componenttype_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Component::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .snp.ComponentType componentType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_componenttype(static_cast<::snp::ComponentType>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .snp.Property property = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_property(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Component::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:snp.Component)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .snp.ComponentType componentType = 1;
  if (this->_internal_componenttype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_componenttype(), target);
  }

  // repeated .snp.Property property = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_property_size()); i < n; i++) {
    const auto& repfield = this->_internal_property(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:snp.Component)
  return target;
}

size_t Component::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:snp.Component)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .snp.Property property = 2;
  total_size += 1UL * this->_internal_property_size();
  for (const auto& msg : this->_impl_.property_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .snp.ComponentType componentType = 1;
  if (this->_internal_componenttype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_componenttype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Component::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Component::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Component::GetClassData() const { return &_class_data_; }


void Component::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Component*>(&to_msg);
  auto& from = static_cast<const Component&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:snp.Component)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.property_.MergeFrom(from._impl_.property_);
  if (from._internal_componenttype() != 0) {
    _this->_internal_set_componenttype(from._internal_componenttype());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Component::CopyFrom(const Component& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:snp.Component)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Component::IsInitialized() const {
  return true;
}

void Component::InternalSwap(Component* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.property_.InternalSwap(&other->_impl_.property_);
  swap(_impl_.componenttype_, other->_impl_.componenttype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Component::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_snp_2eproto_getter, &descriptor_table_snp_2eproto_once,
      file_level_metadata_snp_2eproto[5]);
}

// ===================================================================

class Capabilities::_Internal {
 public:
};

Capabilities::Capabilities(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:snp.Capabilities)
}
Capabilities::Capabilities(const Capabilities& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Capabilities* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.component_){from._impl_.component_}
    , decltype(_impl_.platform_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.platform_ = from._impl_.platform_;
  // @@protoc_insertion_point(copy_constructor:snp.Capabilities)
}

inline void Capabilities::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.component_){arena}
    , decltype(_impl_.platform_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Capabilities::~Capabilities() {
  // @@protoc_insertion_point(destructor:snp.Capabilities)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Capabilities::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.component_.~RepeatedPtrField();
}

void Capabilities::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Capabilities::Clear() {
// @@protoc_insertion_point(message_clear_start:snp.Capabilities)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.component_.Clear();
  _impl_.platform_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Capabilities::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .snp.Platform platform = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_platform(static_cast<::snp::Platform>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .snp.Component component = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_component(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Capabilities::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:snp.Capabilities)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .snp.Platform platform = 1;
  if (this->_internal_platform() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_platform(), target);
  }

  // repeated .snp.Component component = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_component_size()); i < n; i++) {
    const auto& repfield = this->_internal_component(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:snp.Capabilities)
  return target;
}

size_t Capabilities::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:snp.Capabilities)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .snp.Component component = 2;
  total_size += 1UL * this->_internal_component_size();
  for (const auto& msg : this->_impl_.component_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .snp.Platform platform = 1;
  if (this->_internal_platform() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_platform());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Capabilities::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Capabilities::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Capabilities::GetClassData() const { return &_class_data_; }


void Capabilities::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Capabilities*>(&to_msg);
  auto& from = static_cast<const Capabilities&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:snp.Capabilities)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.component_.MergeFrom(from._impl_.component_);
  if (from._internal_platform() != 0) {
    _this->_internal_set_platform(from._internal_platform());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Capabilities::CopyFrom(const Capabilities& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:snp.Capabilities)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Capabilities::IsInitialized() const {
  return true;
}

void Capabilities::InternalSwap(Capabilities* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.component_.InternalSwap(&other->_impl_.component_);
  swap(_impl_.platform_, other->_impl_.platform_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Capabilities::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_snp_2eproto_getter, &descriptor_table_snp_2eproto_once,
      file_level_metadata_snp_2eproto[6]);
}

// ===================================================================

class Setup::_Internal {
 public:
};

Setup::Setup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:snp.Setup)
}
Setup::Setup(const Setup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Setup* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.component_){from._impl_.component_}
    , decltype(_impl_.pipe_id_){}
    , decltype(_impl_.command_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.pipe_id_, &from._impl_.pipe_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.command_) -
    reinterpret_cast<char*>(&_impl_.pipe_id_)) + sizeof(_impl_.command_));
  // @@protoc_insertion_point(copy_constructor:snp.Setup)
}

inline void Setup::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.component_){arena}
    , decltype(_impl_.pipe_id_){0u}
    , decltype(_impl_.command_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Setup::~Setup() {
  // @@protoc_insertion_point(destructor:snp.Setup)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Setup::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.component_.~RepeatedPtrField();
}

void Setup::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Setup::Clear() {
// @@protoc_insertion_point(message_clear_start:snp.Setup)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.component_.Clear();
  ::memset(&_impl_.pipe_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.command_) -
      reinterpret_cast<char*>(&_impl_.pipe_id_)) + sizeof(_impl_.command_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Setup::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 pipe_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.pipe_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .snp.Command command = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_command(static_cast<::snp::Command>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .snp.Component component = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_component(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Setup::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:snp.Setup)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pipe_id = 1;
  if (this->_internal_pipe_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pipe_id(), target);
  }

  // .snp.Command command = 2;
  if (this->_internal_command() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_command(), target);
  }

  // repeated .snp.Component component = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_component_size()); i < n; i++) {
    const auto& repfield = this->_internal_component(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:snp.Setup)
  return target;
}

size_t Setup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:snp.Setup)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .snp.Component component = 3;
  total_size += 1UL * this->_internal_component_size();
  for (const auto& msg : this->_impl_.component_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 pipe_id = 1;
  if (this->_internal_pipe_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pipe_id());
  }

  // .snp.Command command = 2;
  if (this->_internal_command() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_command());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Setup::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Setup::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Setup::GetClassData() const { return &_class_data_; }


void Setup::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Setup*>(&to_msg);
  auto& from = static_cast<const Setup&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:snp.Setup)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.component_.MergeFrom(from._impl_.component_);
  if (from._internal_pipe_id() != 0) {
    _this->_internal_set_pipe_id(from._internal_pipe_id());
  }
  if (from._internal_command() != 0) {
    _this->_internal_set_command(from._internal_command());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Setup::CopyFrom(const Setup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:snp.Setup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Setup::IsInitialized() const {
  return true;
}

void Setup::InternalSwap(Setup* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.component_.InternalSwap(&other->_impl_.component_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Setup, _impl_.command_)
      + sizeof(Setup::_impl_.command_)
      - PROTOBUF_FIELD_OFFSET(Setup, _impl_.pipe_id_)>(
          reinterpret_cast<char*>(&_impl_.pipe_id_),
          reinterpret_cast<char*>(&other->_impl_.pipe_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Setup::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_snp_2eproto_getter, &descriptor_table_snp_2eproto_once,
      file_level_metadata_snp_2eproto[7]);
}

// ===================================================================

class Data::_Internal {
 public:
  static const ::snp::StreamDataRaw& dataraw(const Data* msg);
  static const ::snp::StreamDataPointer& datapointer(const Data* msg);
  static const ::snp::StreamDataKeyboard& datakeyboard(const Data* msg);
  static const ::snp::StreamDataCursor& datacursor(const Data* msg);
};

const ::snp::StreamDataRaw&
Data::_Internal::dataraw(const Data* msg) {
  return *msg->_impl_.data_.dataraw_;
}
const ::snp::StreamDataPointer&
Data::_Internal::datapointer(const Data* msg) {
  return *msg->_impl_.data_.datapointer_;
}
const ::snp::StreamDataKeyboard&
Data::_Internal::datakeyboard(const Data* msg) {
  return *msg->_impl_.data_.datakeyboard_;
}
const ::snp::StreamDataCursor&
Data::_Internal::datacursor(const Data* msg) {
  return *msg->_impl_.data_.datacursor_;
}
void Data::set_allocated_dataraw(::snp::StreamDataRaw* dataraw) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (dataraw) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(dataraw);
    if (message_arena != submessage_arena) {
      dataraw = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dataraw, submessage_arena);
    }
    set_has_dataraw();
    _impl_.data_.dataraw_ = dataraw;
  }
  // @@protoc_insertion_point(field_set_allocated:snp.Data.dataRaw)
}
void Data::set_allocated_datapointer(::snp::StreamDataPointer* datapointer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (datapointer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(datapointer);
    if (message_arena != submessage_arena) {
      datapointer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, datapointer, submessage_arena);
    }
    set_has_datapointer();
    _impl_.data_.datapointer_ = datapointer;
  }
  // @@protoc_insertion_point(field_set_allocated:snp.Data.dataPointer)
}
void Data::set_allocated_datakeyboard(::snp::StreamDataKeyboard* datakeyboard) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (datakeyboard) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(datakeyboard);
    if (message_arena != submessage_arena) {
      datakeyboard = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, datakeyboard, submessage_arena);
    }
    set_has_datakeyboard();
    _impl_.data_.datakeyboard_ = datakeyboard;
  }
  // @@protoc_insertion_point(field_set_allocated:snp.Data.dataKeyboard)
}
void Data::set_allocated_datacursor(::snp::StreamDataCursor* datacursor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (datacursor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(datacursor);
    if (message_arena != submessage_arena) {
      datacursor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, datacursor, submessage_arena);
    }
    set_has_datacursor();
    _impl_.data_.datacursor_ = datacursor;
  }
  // @@protoc_insertion_point(field_set_allocated:snp.Data.dataCursor)
}
Data::Data(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:snp.Data)
}
Data::Data(const Data& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Data* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pipe_id_){}
    , decltype(_impl_.data_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.pipe_id_ = from._impl_.pipe_id_;
  clear_has_data();
  switch (from.data_case()) {
    case kDataRaw: {
      _this->_internal_mutable_dataraw()->::snp::StreamDataRaw::MergeFrom(
          from._internal_dataraw());
      break;
    }
    case kDataPointer: {
      _this->_internal_mutable_datapointer()->::snp::StreamDataPointer::MergeFrom(
          from._internal_datapointer());
      break;
    }
    case kDataKeyboard: {
      _this->_internal_mutable_datakeyboard()->::snp::StreamDataKeyboard::MergeFrom(
          from._internal_datakeyboard());
      break;
    }
    case kDataCursor: {
      _this->_internal_mutable_datacursor()->::snp::StreamDataCursor::MergeFrom(
          from._internal_datacursor());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:snp.Data)
}

inline void Data::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pipe_id_){0u}
    , decltype(_impl_.data_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_data();
}

Data::~Data() {
  // @@protoc_insertion_point(destructor:snp.Data)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Data::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_data()) {
    clear_data();
  }
}

void Data::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Data::clear_data() {
// @@protoc_insertion_point(one_of_clear_start:snp.Data)
  switch (data_case()) {
    case kDataRaw: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.dataraw_;
      }
      break;
    }
    case kDataPointer: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.datapointer_;
      }
      break;
    }
    case kDataKeyboard: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.datakeyboard_;
      }
      break;
    }
    case kDataCursor: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.datacursor_;
      }
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = DATA_NOT_SET;
}


void Data::Clear() {
// @@protoc_insertion_point(message_clear_start:snp.Data)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.pipe_id_ = 0u;
  clear_data();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Data::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 pipe_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.pipe_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .snp.StreamDataRaw dataRaw = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_dataraw(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .snp.StreamDataPointer dataPointer = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_datapointer(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .snp.StreamDataKeyboard dataKeyboard = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_datakeyboard(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .snp.StreamDataCursor dataCursor = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_datacursor(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Data::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:snp.Data)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pipe_id = 1;
  if (this->_internal_pipe_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pipe_id(), target);
  }

  // .snp.StreamDataRaw dataRaw = 2;
  if (_internal_has_dataraw()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::dataraw(this),
        _Internal::dataraw(this).GetCachedSize(), target, stream);
  }

  // .snp.StreamDataPointer dataPointer = 3;
  if (_internal_has_datapointer()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::datapointer(this),
        _Internal::datapointer(this).GetCachedSize(), target, stream);
  }

  // .snp.StreamDataKeyboard dataKeyboard = 4;
  if (_internal_has_datakeyboard()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::datakeyboard(this),
        _Internal::datakeyboard(this).GetCachedSize(), target, stream);
  }

  // .snp.StreamDataCursor dataCursor = 5;
  if (_internal_has_datacursor()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::datacursor(this),
        _Internal::datacursor(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:snp.Data)
  return target;
}

size_t Data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:snp.Data)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 pipe_id = 1;
  if (this->_internal_pipe_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pipe_id());
  }

  switch (data_case()) {
    // .snp.StreamDataRaw dataRaw = 2;
    case kDataRaw: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.dataraw_);
      break;
    }
    // .snp.StreamDataPointer dataPointer = 3;
    case kDataPointer: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.datapointer_);
      break;
    }
    // .snp.StreamDataKeyboard dataKeyboard = 4;
    case kDataKeyboard: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.datakeyboard_);
      break;
    }
    // .snp.StreamDataCursor dataCursor = 5;
    case kDataCursor: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.datacursor_);
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Data::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Data::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Data::GetClassData() const { return &_class_data_; }


void Data::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Data*>(&to_msg);
  auto& from = static_cast<const Data&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:snp.Data)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_pipe_id() != 0) {
    _this->_internal_set_pipe_id(from._internal_pipe_id());
  }
  switch (from.data_case()) {
    case kDataRaw: {
      _this->_internal_mutable_dataraw()->::snp::StreamDataRaw::MergeFrom(
          from._internal_dataraw());
      break;
    }
    case kDataPointer: {
      _this->_internal_mutable_datapointer()->::snp::StreamDataPointer::MergeFrom(
          from._internal_datapointer());
      break;
    }
    case kDataKeyboard: {
      _this->_internal_mutable_datakeyboard()->::snp::StreamDataKeyboard::MergeFrom(
          from._internal_datakeyboard());
      break;
    }
    case kDataCursor: {
      _this->_internal_mutable_datacursor()->::snp::StreamDataCursor::MergeFrom(
          from._internal_datacursor());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Data::CopyFrom(const Data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:snp.Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Data::IsInitialized() const {
  return true;
}

void Data::InternalSwap(Data* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.pipe_id_, other->_impl_.pipe_id_);
  swap(_impl_.data_, other->_impl_.data_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Data::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_snp_2eproto_getter, &descriptor_table_snp_2eproto_once,
      file_level_metadata_snp_2eproto[8]);
}

// ===================================================================

class Message::_Internal {
 public:
  static const ::snp::Capabilities& capabilities(const Message* msg);
  static const ::snp::Setup& setup(const Message* msg);
  static const ::snp::Data& data(const Message* msg);
};

const ::snp::Capabilities&
Message::_Internal::capabilities(const Message* msg) {
  return *msg->_impl_.message_.capabilities_;
}
const ::snp::Setup&
Message::_Internal::setup(const Message* msg) {
  return *msg->_impl_.message_.setup_;
}
const ::snp::Data&
Message::_Internal::data(const Message* msg) {
  return *msg->_impl_.message_.data_;
}
void Message::set_allocated_capabilities(::snp::Capabilities* capabilities) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (capabilities) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(capabilities);
    if (message_arena != submessage_arena) {
      capabilities = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, capabilities, submessage_arena);
    }
    set_has_capabilities();
    _impl_.message_.capabilities_ = capabilities;
  }
  // @@protoc_insertion_point(field_set_allocated:snp.Message.capabilities)
}
void Message::set_allocated_setup(::snp::Setup* setup) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (setup) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(setup);
    if (message_arena != submessage_arena) {
      setup = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, setup, submessage_arena);
    }
    set_has_setup();
    _impl_.message_.setup_ = setup;
  }
  // @@protoc_insertion_point(field_set_allocated:snp.Message.setup)
}
void Message::set_allocated_data(::snp::Data* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    set_has_data();
    _impl_.message_.data_ = data;
  }
  // @@protoc_insertion_point(field_set_allocated:snp.Message.data)
}
Message::Message(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:snp.Message)
}
Message::Message(const Message& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Message* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){}
    , decltype(_impl_.message_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.type_ = from._impl_.type_;
  clear_has_message();
  switch (from.message_case()) {
    case kCapabilities: {
      _this->_internal_mutable_capabilities()->::snp::Capabilities::MergeFrom(
          from._internal_capabilities());
      break;
    }
    case kSetup: {
      _this->_internal_mutable_setup()->::snp::Setup::MergeFrom(
          from._internal_setup());
      break;
    }
    case kData: {
      _this->_internal_mutable_data()->::snp::Data::MergeFrom(
          from._internal_data());
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:snp.Message)
}

inline void Message::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){0}
    , decltype(_impl_.message_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_message();
}

Message::~Message() {
  // @@protoc_insertion_point(destructor:snp.Message)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Message::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_message()) {
    clear_message();
  }
}

void Message::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Message::clear_message() {
// @@protoc_insertion_point(one_of_clear_start:snp.Message)
  switch (message_case()) {
    case kCapabilities: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.capabilities_;
      }
      break;
    }
    case kSetup: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.setup_;
      }
      break;
    }
    case kData: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.data_;
      }
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = MESSAGE_NOT_SET;
}


void Message::Clear() {
// @@protoc_insertion_point(message_clear_start:snp.Message)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.type_ = 0;
  clear_message();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .snp.MessageType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::snp::MessageType>(val));
        } else
          goto handle_unusual;
        continue;
      // .snp.Capabilities capabilities = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_capabilities(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .snp.Setup setup = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_setup(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .snp.Data data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Message::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:snp.Message)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .snp.MessageType type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // .snp.Capabilities capabilities = 2;
  if (_internal_has_capabilities()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::capabilities(this),
        _Internal::capabilities(this).GetCachedSize(), target, stream);
  }

  // .snp.Setup setup = 3;
  if (_internal_has_setup()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::setup(this),
        _Internal::setup(this).GetCachedSize(), target, stream);
  }

  // .snp.Data data = 4;
  if (_internal_has_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::data(this),
        _Internal::data(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:snp.Message)
  return target;
}

size_t Message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:snp.Message)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .snp.MessageType type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  switch (message_case()) {
    // .snp.Capabilities capabilities = 2;
    case kCapabilities: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.capabilities_);
      break;
    }
    // .snp.Setup setup = 3;
    case kSetup: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.setup_);
      break;
    }
    // .snp.Data data = 4;
    case kData: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.data_);
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Message::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Message::GetClassData() const { return &_class_data_; }


void Message::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Message*>(&to_msg);
  auto& from = static_cast<const Message&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:snp.Message)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  switch (from.message_case()) {
    case kCapabilities: {
      _this->_internal_mutable_capabilities()->::snp::Capabilities::MergeFrom(
          from._internal_capabilities());
      break;
    }
    case kSetup: {
      _this->_internal_mutable_setup()->::snp::Setup::MergeFrom(
          from._internal_setup());
      break;
    }
    case kData: {
      _this->_internal_mutable_data()->::snp::Data::MergeFrom(
          from._internal_data());
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Message::CopyFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:snp.Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message::IsInitialized() const {
  return true;
}

void Message::InternalSwap(Message* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.type_, other->_impl_.type_);
  swap(_impl_.message_, other->_impl_.message_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Message::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_snp_2eproto_getter, &descriptor_table_snp_2eproto_once,
      file_level_metadata_snp_2eproto[9]);
}

// ===================================================================

class StreamDataRaw::_Internal {
 public:
};

StreamDataRaw::StreamDataRaw(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:snp.StreamDataRaw)
}
StreamDataRaw::StreamDataRaw(const StreamDataRaw& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StreamDataRaw* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.payload_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.payload_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.payload_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_payload().empty()) {
    _this->_impl_.payload_.Set(from._internal_payload(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:snp.StreamDataRaw)
}

inline void StreamDataRaw::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.payload_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.payload_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.payload_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StreamDataRaw::~StreamDataRaw() {
  // @@protoc_insertion_point(destructor:snp.StreamDataRaw)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StreamDataRaw::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.payload_.Destroy();
}

void StreamDataRaw::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StreamDataRaw::Clear() {
// @@protoc_insertion_point(message_clear_start:snp.StreamDataRaw)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.payload_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamDataRaw::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes payload = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_payload();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StreamDataRaw::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:snp.StreamDataRaw)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes payload = 1;
  if (!this->_internal_payload().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_payload(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:snp.StreamDataRaw)
  return target;
}

size_t StreamDataRaw::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:snp.StreamDataRaw)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes payload = 1;
  if (!this->_internal_payload().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_payload());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StreamDataRaw::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StreamDataRaw::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StreamDataRaw::GetClassData() const { return &_class_data_; }


void StreamDataRaw::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StreamDataRaw*>(&to_msg);
  auto& from = static_cast<const StreamDataRaw&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:snp.StreamDataRaw)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_payload().empty()) {
    _this->_internal_set_payload(from._internal_payload());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StreamDataRaw::CopyFrom(const StreamDataRaw& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:snp.StreamDataRaw)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamDataRaw::IsInitialized() const {
  return true;
}

void StreamDataRaw::InternalSwap(StreamDataRaw* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.payload_, lhs_arena,
      &other->_impl_.payload_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamDataRaw::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_snp_2eproto_getter, &descriptor_table_snp_2eproto_once,
      file_level_metadata_snp_2eproto[10]);
}

// ===================================================================

class StreamDataPointer::_Internal {
 public:
  using HasBits = decltype(std::declval<StreamDataPointer>()._impl_._has_bits_);
  static void set_has_mask(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

StreamDataPointer::StreamDataPointer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:snp.StreamDataPointer)
}
StreamDataPointer::StreamDataPointer(const StreamDataPointer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StreamDataPointer* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.absx_){}
    , decltype(_impl_.absy_){}
    , decltype(_impl_.mask_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.absx_, &from._impl_.absx_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.mask_) -
    reinterpret_cast<char*>(&_impl_.absx_)) + sizeof(_impl_.mask_));
  // @@protoc_insertion_point(copy_constructor:snp.StreamDataPointer)
}

inline void StreamDataPointer::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.absx_){0u}
    , decltype(_impl_.absy_){0u}
    , decltype(_impl_.mask_){0}
  };
}

StreamDataPointer::~StreamDataPointer() {
  // @@protoc_insertion_point(destructor:snp.StreamDataPointer)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StreamDataPointer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void StreamDataPointer::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StreamDataPointer::Clear() {
// @@protoc_insertion_point(message_clear_start:snp.StreamDataPointer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.absx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.absy_) -
      reinterpret_cast<char*>(&_impl_.absx_)) + sizeof(_impl_.absy_));
  _impl_.mask_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamDataPointer::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 absx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.absx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 absy = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.absy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 mask = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_mask(&has_bits);
          _impl_.mask_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StreamDataPointer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:snp.StreamDataPointer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 absx = 1;
  if (this->_internal_absx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_absx(), target);
  }

  // uint32 absy = 2;
  if (this->_internal_absy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_absy(), target);
  }

  // optional int32 mask = 3;
  if (_internal_has_mask()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_mask(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:snp.StreamDataPointer)
  return target;
}

size_t StreamDataPointer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:snp.StreamDataPointer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 absx = 1;
  if (this->_internal_absx() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_absx());
  }

  // uint32 absy = 2;
  if (this->_internal_absy() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_absy());
  }

  // optional int32 mask = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mask());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StreamDataPointer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StreamDataPointer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StreamDataPointer::GetClassData() const { return &_class_data_; }


void StreamDataPointer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StreamDataPointer*>(&to_msg);
  auto& from = static_cast<const StreamDataPointer&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:snp.StreamDataPointer)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_absx() != 0) {
    _this->_internal_set_absx(from._internal_absx());
  }
  if (from._internal_absy() != 0) {
    _this->_internal_set_absy(from._internal_absy());
  }
  if (from._internal_has_mask()) {
    _this->_internal_set_mask(from._internal_mask());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StreamDataPointer::CopyFrom(const StreamDataPointer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:snp.StreamDataPointer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamDataPointer::IsInitialized() const {
  return true;
}

void StreamDataPointer::InternalSwap(StreamDataPointer* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StreamDataPointer, _impl_.mask_)
      + sizeof(StreamDataPointer::_impl_.mask_)
      - PROTOBUF_FIELD_OFFSET(StreamDataPointer, _impl_.absx_)>(
          reinterpret_cast<char*>(&_impl_.absx_),
          reinterpret_cast<char*>(&other->_impl_.absx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamDataPointer::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_snp_2eproto_getter, &descriptor_table_snp_2eproto_once,
      file_level_metadata_snp_2eproto[11]);
}

// ===================================================================

class StreamDataKeyboard::_Internal {
 public:
};

StreamDataKeyboard::StreamDataKeyboard(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:snp.StreamDataKeyboard)
}
StreamDataKeyboard::StreamDataKeyboard(const StreamDataKeyboard& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StreamDataKeyboard* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.keysym_){}
    , decltype(_impl_.keycode_){}
    , decltype(_impl_.down_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.keysym_, &from._impl_.keysym_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.down_) -
    reinterpret_cast<char*>(&_impl_.keysym_)) + sizeof(_impl_.down_));
  // @@protoc_insertion_point(copy_constructor:snp.StreamDataKeyboard)
}

inline void StreamDataKeyboard::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.keysym_){0u}
    , decltype(_impl_.keycode_){0u}
    , decltype(_impl_.down_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

StreamDataKeyboard::~StreamDataKeyboard() {
  // @@protoc_insertion_point(destructor:snp.StreamDataKeyboard)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StreamDataKeyboard::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void StreamDataKeyboard::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StreamDataKeyboard::Clear() {
// @@protoc_insertion_point(message_clear_start:snp.StreamDataKeyboard)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.keysym_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.down_) -
      reinterpret_cast<char*>(&_impl_.keysym_)) + sizeof(_impl_.down_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamDataKeyboard::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 keysym = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.keysym_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 keycode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.keycode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool down = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.down_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StreamDataKeyboard::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:snp.StreamDataKeyboard)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 keysym = 1;
  if (this->_internal_keysym() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_keysym(), target);
  }

  // uint32 keycode = 2;
  if (this->_internal_keycode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_keycode(), target);
  }

  // bool down = 3;
  if (this->_internal_down() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_down(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:snp.StreamDataKeyboard)
  return target;
}

size_t StreamDataKeyboard::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:snp.StreamDataKeyboard)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 keysym = 1;
  if (this->_internal_keysym() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_keysym());
  }

  // uint32 keycode = 2;
  if (this->_internal_keycode() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_keycode());
  }

  // bool down = 3;
  if (this->_internal_down() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StreamDataKeyboard::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StreamDataKeyboard::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StreamDataKeyboard::GetClassData() const { return &_class_data_; }


void StreamDataKeyboard::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StreamDataKeyboard*>(&to_msg);
  auto& from = static_cast<const StreamDataKeyboard&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:snp.StreamDataKeyboard)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_keysym() != 0) {
    _this->_internal_set_keysym(from._internal_keysym());
  }
  if (from._internal_keycode() != 0) {
    _this->_internal_set_keycode(from._internal_keycode());
  }
  if (from._internal_down() != 0) {
    _this->_internal_set_down(from._internal_down());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StreamDataKeyboard::CopyFrom(const StreamDataKeyboard& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:snp.StreamDataKeyboard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamDataKeyboard::IsInitialized() const {
  return true;
}

void StreamDataKeyboard::InternalSwap(StreamDataKeyboard* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StreamDataKeyboard, _impl_.down_)
      + sizeof(StreamDataKeyboard::_impl_.down_)
      - PROTOBUF_FIELD_OFFSET(StreamDataKeyboard, _impl_.keysym_)>(
          reinterpret_cast<char*>(&_impl_.keysym_),
          reinterpret_cast<char*>(&other->_impl_.keysym_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamDataKeyboard::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_snp_2eproto_getter, &descriptor_table_snp_2eproto_once,
      file_level_metadata_snp_2eproto[12]);
}

// ===================================================================

class StreamDataCursor::_Internal {
 public:
};

StreamDataCursor::StreamDataCursor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:snp.StreamDataCursor)
}
StreamDataCursor::StreamDataCursor(const StreamDataCursor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StreamDataCursor* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.image_){}
    , decltype(_impl_.width_){}
    , decltype(_impl_.height_){}
    , decltype(_impl_.hotx_){}
    , decltype(_impl_.hoty_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.image_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.image_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_image().empty()) {
    _this->_impl_.image_.Set(from._internal_image(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.width_, &from._impl_.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.hoty_) -
    reinterpret_cast<char*>(&_impl_.width_)) + sizeof(_impl_.hoty_));
  // @@protoc_insertion_point(copy_constructor:snp.StreamDataCursor)
}

inline void StreamDataCursor::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.image_){}
    , decltype(_impl_.width_){0u}
    , decltype(_impl_.height_){0u}
    , decltype(_impl_.hotx_){0u}
    , decltype(_impl_.hoty_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.image_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.image_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StreamDataCursor::~StreamDataCursor() {
  // @@protoc_insertion_point(destructor:snp.StreamDataCursor)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StreamDataCursor::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.image_.Destroy();
}

void StreamDataCursor::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StreamDataCursor::Clear() {
// @@protoc_insertion_point(message_clear_start:snp.StreamDataCursor)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.image_.ClearToEmpty();
  ::memset(&_impl_.width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.hoty_) -
      reinterpret_cast<char*>(&_impl_.width_)) + sizeof(_impl_.hoty_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamDataCursor::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 width = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 hotx = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.hotx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 hoty = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.hoty_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes image = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_image();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StreamDataCursor::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:snp.StreamDataCursor)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 width = 1;
  if (this->_internal_width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_width(), target);
  }

  // uint32 height = 2;
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_height(), target);
  }

  // uint32 hotx = 3;
  if (this->_internal_hotx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_hotx(), target);
  }

  // uint32 hoty = 4;
  if (this->_internal_hoty() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_hoty(), target);
  }

  // bytes image = 5;
  if (!this->_internal_image().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_image(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:snp.StreamDataCursor)
  return target;
}

size_t StreamDataCursor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:snp.StreamDataCursor)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes image = 5;
  if (!this->_internal_image().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_image());
  }

  // uint32 width = 1;
  if (this->_internal_width() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_width());
  }

  // uint32 height = 2;
  if (this->_internal_height() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_height());
  }

  // uint32 hotx = 3;
  if (this->_internal_hotx() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_hotx());
  }

  // uint32 hoty = 4;
  if (this->_internal_hoty() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_hoty());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StreamDataCursor::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StreamDataCursor::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StreamDataCursor::GetClassData() const { return &_class_data_; }


void StreamDataCursor::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StreamDataCursor*>(&to_msg);
  auto& from = static_cast<const StreamDataCursor&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:snp.StreamDataCursor)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_image().empty()) {
    _this->_internal_set_image(from._internal_image());
  }
  if (from._internal_width() != 0) {
    _this->_internal_set_width(from._internal_width());
  }
  if (from._internal_height() != 0) {
    _this->_internal_set_height(from._internal_height());
  }
  if (from._internal_hotx() != 0) {
    _this->_internal_set_hotx(from._internal_hotx());
  }
  if (from._internal_hoty() != 0) {
    _this->_internal_set_hoty(from._internal_hoty());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StreamDataCursor::CopyFrom(const StreamDataCursor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:snp.StreamDataCursor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamDataCursor::IsInitialized() const {
  return true;
}

void StreamDataCursor::InternalSwap(StreamDataCursor* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.image_, lhs_arena,
      &other->_impl_.image_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StreamDataCursor, _impl_.hoty_)
      + sizeof(StreamDataCursor::_impl_.hoty_)
      - PROTOBUF_FIELD_OFFSET(StreamDataCursor, _impl_.width_)>(
          reinterpret_cast<char*>(&_impl_.width_),
          reinterpret_cast<char*>(&other->_impl_.width_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamDataCursor::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_snp_2eproto_getter, &descriptor_table_snp_2eproto_once,
      file_level_metadata_snp_2eproto[13]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace snp
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::snp::Property_ValueString*
Arena::CreateMaybeMessage< ::snp::Property_ValueString >(Arena* arena) {
  return Arena::CreateMessageInternal< ::snp::Property_ValueString >(arena);
}
template<> PROTOBUF_NOINLINE ::snp::Property_ValueBool*
Arena::CreateMaybeMessage< ::snp::Property_ValueBool >(Arena* arena) {
  return Arena::CreateMessageInternal< ::snp::Property_ValueBool >(arena);
}
template<> PROTOBUF_NOINLINE ::snp::Property_ValueUint32*
Arena::CreateMaybeMessage< ::snp::Property_ValueUint32 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::snp::Property_ValueUint32 >(arena);
}
template<> PROTOBUF_NOINLINE ::snp::Property_ValueDouble*
Arena::CreateMaybeMessage< ::snp::Property_ValueDouble >(Arena* arena) {
  return Arena::CreateMessageInternal< ::snp::Property_ValueDouble >(arena);
}
template<> PROTOBUF_NOINLINE ::snp::Property*
Arena::CreateMaybeMessage< ::snp::Property >(Arena* arena) {
  return Arena::CreateMessageInternal< ::snp::Property >(arena);
}
template<> PROTOBUF_NOINLINE ::snp::Component*
Arena::CreateMaybeMessage< ::snp::Component >(Arena* arena) {
  return Arena::CreateMessageInternal< ::snp::Component >(arena);
}
template<> PROTOBUF_NOINLINE ::snp::Capabilities*
Arena::CreateMaybeMessage< ::snp::Capabilities >(Arena* arena) {
  return Arena::CreateMessageInternal< ::snp::Capabilities >(arena);
}
template<> PROTOBUF_NOINLINE ::snp::Setup*
Arena::CreateMaybeMessage< ::snp::Setup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::snp::Setup >(arena);
}
template<> PROTOBUF_NOINLINE ::snp::Data*
Arena::CreateMaybeMessage< ::snp::Data >(Arena* arena) {
  return Arena::CreateMessageInternal< ::snp::Data >(arena);
}
template<> PROTOBUF_NOINLINE ::snp::Message*
Arena::CreateMaybeMessage< ::snp::Message >(Arena* arena) {
  return Arena::CreateMessageInternal< ::snp::Message >(arena);
}
template<> PROTOBUF_NOINLINE ::snp::StreamDataRaw*
Arena::CreateMaybeMessage< ::snp::StreamDataRaw >(Arena* arena) {
  return Arena::CreateMessageInternal< ::snp::StreamDataRaw >(arena);
}
template<> PROTOBUF_NOINLINE ::snp::StreamDataPointer*
Arena::CreateMaybeMessage< ::snp::StreamDataPointer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::snp::StreamDataPointer >(arena);
}
template<> PROTOBUF_NOINLINE ::snp::StreamDataKeyboard*
Arena::CreateMaybeMessage< ::snp::StreamDataKeyboard >(Arena* arena) {
  return Arena::CreateMessageInternal< ::snp::StreamDataKeyboard >(arena);
}
template<> PROTOBUF_NOINLINE ::snp::StreamDataCursor*
Arena::CreateMaybeMessage< ::snp::StreamDataCursor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::snp::StreamDataCursor >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
