// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: snappyv1.proto

#include "snappyv1.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace snappyv1 {
PROTOBUF_CONSTEXPR Property_ValueString::Property_ValueString(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.value_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Property_ValueStringDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Property_ValueStringDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Property_ValueStringDefaultTypeInternal() {}
  union {
    Property_ValueString _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Property_ValueStringDefaultTypeInternal _Property_ValueString_default_instance_;
PROTOBUF_CONSTEXPR Property_ValueBool::Property_ValueBool(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.value_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Property_ValueBoolDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Property_ValueBoolDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Property_ValueBoolDefaultTypeInternal() {}
  union {
    Property_ValueBool _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Property_ValueBoolDefaultTypeInternal _Property_ValueBool_default_instance_;
PROTOBUF_CONSTEXPR Property_ValueUint32::Property_ValueUint32(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.value_)*/0u
  , /*decltype(_impl_.min_)*/0u
  , /*decltype(_impl_.max_)*/0u} {}
struct Property_ValueUint32DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Property_ValueUint32DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Property_ValueUint32DefaultTypeInternal() {}
  union {
    Property_ValueUint32 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Property_ValueUint32DefaultTypeInternal _Property_ValueUint32_default_instance_;
PROTOBUF_CONSTEXPR Property_ValueDouble::Property_ValueDouble(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.value_)*/0
  , /*decltype(_impl_.min_)*/0
  , /*decltype(_impl_.max_)*/0} {}
struct Property_ValueDoubleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Property_ValueDoubleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Property_ValueDoubleDefaultTypeInternal() {}
  union {
    Property_ValueDouble _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Property_ValueDoubleDefaultTypeInternal _Property_ValueDouble_default_instance_;
PROTOBUF_CONSTEXPR Property::Property(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.value_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct PropertyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PropertyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PropertyDefaultTypeInternal() {}
  union {
    Property _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PropertyDefaultTypeInternal _Property_default_instance_;
PROTOBUF_CONSTEXPR StreamInfo::StreamInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.stream_endpoints_)*/{}
  , /*decltype(_impl_._stream_endpoints_cached_byte_size_)*/{0}
  , /*decltype(_impl_.stream_encodings_)*/{}
  , /*decltype(_impl_._stream_encodings_cached_byte_size_)*/{0}
  , /*decltype(_impl_.platform_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StreamInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StreamInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StreamInfoDefaultTypeInternal() {}
  union {
    StreamInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StreamInfoDefaultTypeInternal _StreamInfo_default_instance_;
PROTOBUF_CONSTEXPR StreamChange::StreamChange(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.property_)*/{}
  , /*decltype(_impl_.id_)*/0u
  , /*decltype(_impl_.command_)*/0
  , /*decltype(_impl_.stream_medium_)*/0
  , /*decltype(_impl_.stream_direction_)*/0
  , /*decltype(_impl_.stream_endpoint_)*/0
  , /*decltype(_impl_.stream_encoding_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StreamChangeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StreamChangeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StreamChangeDefaultTypeInternal() {}
  union {
    StreamChange _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StreamChangeDefaultTypeInternal _StreamChange_default_instance_;
PROTOBUF_CONSTEXPR StreamData::StreamData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.payload_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.stream_id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StreamDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StreamDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StreamDataDefaultTypeInternal() {}
  union {
    StreamData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StreamDataDefaultTypeInternal _StreamData_default_instance_;
PROTOBUF_CONSTEXPR Message::Message(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.message_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct MessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MessageDefaultTypeInternal() {}
  union {
    Message _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MessageDefaultTypeInternal _Message_default_instance_;
PROTOBUF_CONSTEXPR StreamDataPointer::StreamDataPointer(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.absx_)*/0u
  , /*decltype(_impl_.absy_)*/0u
  , /*decltype(_impl_.mask_)*/0} {}
struct StreamDataPointerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StreamDataPointerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StreamDataPointerDefaultTypeInternal() {}
  union {
    StreamDataPointer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StreamDataPointerDefaultTypeInternal _StreamDataPointer_default_instance_;
PROTOBUF_CONSTEXPR StreamDataKeyboard::StreamDataKeyboard(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.keysym_)*/0u
  , /*decltype(_impl_.keycode_)*/0u
  , /*decltype(_impl_.down_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StreamDataKeyboardDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StreamDataKeyboardDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StreamDataKeyboardDefaultTypeInternal() {}
  union {
    StreamDataKeyboard _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StreamDataKeyboardDefaultTypeInternal _StreamDataKeyboard_default_instance_;
PROTOBUF_CONSTEXPR StreamDataCursor::StreamDataCursor(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.image_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.width_)*/0u
  , /*decltype(_impl_.height_)*/0u
  , /*decltype(_impl_.hotx_)*/0u
  , /*decltype(_impl_.hoty_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StreamDataCursorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StreamDataCursorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StreamDataCursorDefaultTypeInternal() {}
  union {
    StreamDataCursor _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StreamDataCursorDefaultTypeInternal _StreamDataCursor_default_instance_;
}  // namespace snappyv1
static ::_pb::Metadata file_level_metadata_snappyv1_2eproto[12];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_snappyv1_2eproto[8];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_snappyv1_2eproto = nullptr;

const uint32_t TableStruct_snappyv1_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::snappyv1::Property_ValueString, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::snappyv1::Property_ValueString, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::snappyv1::Property_ValueBool, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::snappyv1::Property_ValueBool, _impl_.value_),
  PROTOBUF_FIELD_OFFSET(::snappyv1::Property_ValueUint32, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::snappyv1::Property_ValueUint32, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::snappyv1::Property_ValueUint32, _impl_.value_),
  PROTOBUF_FIELD_OFFSET(::snappyv1::Property_ValueUint32, _impl_.min_),
  PROTOBUF_FIELD_OFFSET(::snappyv1::Property_ValueUint32, _impl_.max_),
  ~0u,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::snappyv1::Property_ValueDouble, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::snappyv1::Property_ValueDouble, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::snappyv1::Property_ValueDouble, _impl_.value_),
  PROTOBUF_FIELD_OFFSET(::snappyv1::Property_ValueDouble, _impl_.min_),
  PROTOBUF_FIELD_OFFSET(::snappyv1::Property_ValueDouble, _impl_.max_),
  ~0u,
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::snappyv1::Property, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::snappyv1::Property, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::snappyv1::Property, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::snappyv1::Property, _impl_.key_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::snappyv1::Property, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::snappyv1::StreamInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::snappyv1::StreamInfo, _impl_.platform_),
  PROTOBUF_FIELD_OFFSET(::snappyv1::StreamInfo, _impl_.stream_endpoints_),
  PROTOBUF_FIELD_OFFSET(::snappyv1::StreamInfo, _impl_.stream_encodings_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::snappyv1::StreamChange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::snappyv1::StreamChange, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::snappyv1::StreamChange, _impl_.command_),
  PROTOBUF_FIELD_OFFSET(::snappyv1::StreamChange, _impl_.stream_medium_),
  PROTOBUF_FIELD_OFFSET(::snappyv1::StreamChange, _impl_.stream_direction_),
  PROTOBUF_FIELD_OFFSET(::snappyv1::StreamChange, _impl_.stream_endpoint_),
  PROTOBUF_FIELD_OFFSET(::snappyv1::StreamChange, _impl_.stream_encoding_),
  PROTOBUF_FIELD_OFFSET(::snappyv1::StreamChange, _impl_.property_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::snappyv1::StreamData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::snappyv1::StreamData, _impl_.stream_id_),
  PROTOBUF_FIELD_OFFSET(::snappyv1::StreamData, _impl_.payload_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::snappyv1::Message, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::snappyv1::Message, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::snappyv1::Message, _impl_.type_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::snappyv1::Message, _impl_.message_),
  PROTOBUF_FIELD_OFFSET(::snappyv1::StreamDataPointer, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::snappyv1::StreamDataPointer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::snappyv1::StreamDataPointer, _impl_.absx_),
  PROTOBUF_FIELD_OFFSET(::snappyv1::StreamDataPointer, _impl_.absy_),
  PROTOBUF_FIELD_OFFSET(::snappyv1::StreamDataPointer, _impl_.mask_),
  ~0u,
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::snappyv1::StreamDataKeyboard, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::snappyv1::StreamDataKeyboard, _impl_.keysym_),
  PROTOBUF_FIELD_OFFSET(::snappyv1::StreamDataKeyboard, _impl_.keycode_),
  PROTOBUF_FIELD_OFFSET(::snappyv1::StreamDataKeyboard, _impl_.down_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::snappyv1::StreamDataCursor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::snappyv1::StreamDataCursor, _impl_.width_),
  PROTOBUF_FIELD_OFFSET(::snappyv1::StreamDataCursor, _impl_.height_),
  PROTOBUF_FIELD_OFFSET(::snappyv1::StreamDataCursor, _impl_.hotx_),
  PROTOBUF_FIELD_OFFSET(::snappyv1::StreamDataCursor, _impl_.hoty_),
  PROTOBUF_FIELD_OFFSET(::snappyv1::StreamDataCursor, _impl_.image_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::snappyv1::Property_ValueString)},
  { 7, -1, -1, sizeof(::snappyv1::Property_ValueBool)},
  { 14, 23, -1, sizeof(::snappyv1::Property_ValueUint32)},
  { 26, 35, -1, sizeof(::snappyv1::Property_ValueDouble)},
  { 38, -1, -1, sizeof(::snappyv1::Property)},
  { 51, -1, -1, sizeof(::snappyv1::StreamInfo)},
  { 60, -1, -1, sizeof(::snappyv1::StreamChange)},
  { 73, -1, -1, sizeof(::snappyv1::StreamData)},
  { 81, -1, -1, sizeof(::snappyv1::Message)},
  { 92, 101, -1, sizeof(::snappyv1::StreamDataPointer)},
  { 104, -1, -1, sizeof(::snappyv1::StreamDataKeyboard)},
  { 113, -1, -1, sizeof(::snappyv1::StreamDataCursor)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::snappyv1::_Property_ValueString_default_instance_._instance,
  &::snappyv1::_Property_ValueBool_default_instance_._instance,
  &::snappyv1::_Property_ValueUint32_default_instance_._instance,
  &::snappyv1::_Property_ValueDouble_default_instance_._instance,
  &::snappyv1::_Property_default_instance_._instance,
  &::snappyv1::_StreamInfo_default_instance_._instance,
  &::snappyv1::_StreamChange_default_instance_._instance,
  &::snappyv1::_StreamData_default_instance_._instance,
  &::snappyv1::_Message_default_instance_._instance,
  &::snappyv1::_StreamDataPointer_default_instance_._instance,
  &::snappyv1::_StreamDataKeyboard_default_instance_._instance,
  &::snappyv1::_StreamDataCursor_default_instance_._instance,
};

const char descriptor_table_protodef_snappyv1_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016snappyv1.proto\022\010snappyv1\"\200\004\n\010Property\022"
  "$\n\004type\030\001 \001(\0162\026.snappyv1.PropertyType\022\013\n"
  "\003key\030\002 \001(\t\0226\n\014value_string\030\003 \001(\0132\036.snapp"
  "yv1.Property.ValueStringH\000\0222\n\nvalue_bool"
  "\030\004 \001(\0132\034.snappyv1.Property.ValueBoolH\000\0226"
  "\n\014value_uint32\030\005 \001(\0132\036.snappyv1.Property"
  ".ValueUint32H\000\0226\n\014value_double\030\006 \001(\0132\036.s"
  "nappyv1.Property.ValueDoubleH\000\032\034\n\013ValueS"
  "tring\022\r\n\005value\030\001 \001(\t\032\032\n\tValueBool\022\r\n\005val"
  "ue\030\001 \001(\010\032P\n\013ValueUint32\022\r\n\005value\030\001 \001(\r\022\020"
  "\n\003min\030\002 \001(\rH\000\210\001\001\022\020\n\003max\030\003 \001(\rH\001\210\001\001B\006\n\004_m"
  "inB\006\n\004_max\032P\n\013ValueDouble\022\r\n\005value\030\001 \001(\001"
  "\022\020\n\003min\030\002 \001(\001H\000\210\001\001\022\020\n\003max\030\003 \001(\001H\001\210\001\001B\006\n\004"
  "_minB\006\n\004_maxB\007\n\005value\"\232\001\n\nStreamInfo\022$\n\010"
  "platform\030\001 \001(\0162\022.snappyv1.Platform\0222\n\020st"
  "ream_endpoints\030\002 \003(\0162\030.snappyv1.StreamEn"
  "dpoint\0222\n\020stream_encodings\030\003 \003(\0162\030.snapp"
  "yv1.StreamEncoding\"\256\002\n\014StreamChange\022\n\n\002i"
  "d\030\001 \001(\r\022\"\n\007command\030\002 \001(\0162\021.snappyv1.Comm"
  "and\022-\n\rstream_medium\030\003 \001(\0162\026.snappyv1.St"
  "reamMedium\0223\n\020stream_direction\030\004 \001(\0162\031.s"
  "nappyv1.StreamDirection\0221\n\017stream_endpoi"
  "nt\030\005 \001(\0162\030.snappyv1.StreamEndpoint\0221\n\017st"
  "ream_encoding\030\006 \001(\0162\030.snappyv1.StreamEnc"
  "oding\022$\n\010property\030\007 \003(\0132\022.snappyv1.Prope"
  "rty\"0\n\nStreamData\022\021\n\tstream_id\030\001 \001(\r\022\017\n\007"
  "payload\030\002 \001(\014\"\304\001\n\007Message\022#\n\004type\030\001 \001(\0162"
  "\025.snappyv1.MessageType\022/\n\rstream_change\030"
  "\002 \001(\0132\026.snappyv1.StreamChangeH\000\022+\n\013strea"
  "m_data\030\003 \001(\0132\024.snappyv1.StreamDataH\000\022+\n\013"
  "stream_info\030\004 \001(\0132\024.snappyv1.StreamInfoH"
  "\000B\t\n\007message\"K\n\021StreamDataPointer\022\014\n\004abs"
  "x\030\001 \001(\r\022\014\n\004absy\030\002 \001(\r\022\021\n\004mask\030\003 \001(\005H\000\210\001\001"
  "B\007\n\005_mask\"C\n\022StreamDataKeyboard\022\016\n\006keysy"
  "m\030\001 \001(\r\022\017\n\007keycode\030\002 \001(\r\022\014\n\004down\030\003 \001(\010\"\\"
  "\n\020StreamDataCursor\022\r\n\005width\030\001 \001(\r\022\016\n\006hei"
  "ght\030\002 \001(\r\022\014\n\004hotx\030\003 \001(\r\022\014\n\004hoty\030\004 \001(\r\022\r\n"
  "\005image\030\005 \001(\014*v\n\010Platform\022\024\n\020PLATFORM_WIN"
  "DOWS\020\000\022\022\n\016PLATFORM_LINUX\020\001\022\022\n\016PLATFORM_M"
  "ACOS\020\002\022\026\n\022PLATFORM_RASPBERRY\020\003\022\024\n\020PLATFO"
  "RM_ANDROID\020\004*^\n\014StreamMedium\022\027\n\023STREAM_M"
  "EDIUM_VIDEO\020\000\022\027\n\023STREAM_MEDIUM_AUDIO\020\001\022\034"
  "\n\030STREAM_MEDIUM_PERIPHERAL\020\002*\220\002\n\016StreamE"
  "ndpoint\022\027\n\023STREAM_ENDPOINT_DRM\020\000\022\027\n\023STRE"
  "AM_ENDPOINT_X11\020\001\022\033\n\027STREAM_ENDPOINT_WAY"
  "LAND\020\002\022\032\n\026STREAM_ENDPOINT_CAMERA\020\003\022\037\n\033ST"
  "REAM_ENDPOINT_VIDEO_DUMMY\020\004\022\033\n\027STREAM_EN"
  "DPOINT_DISPLAY\020\005\022\034\n\030STREAM_ENDPOINT_KEYB"
  "OARD\020\006\022\033\n\027STREAM_ENDPOINT_POINTER\020\007\022\032\n\026S"
  "TREAM_ENDPOINT_CURSOR\020\010*J\n\017StreamDirecti"
  "on\022\032\n\026STREAM_DIRECTION_INPUT\020\000\022\033\n\027STREAM"
  "_DIRECTION_OUTPUT\020\001*\232\001\n\016StreamEncoding\022!"
  "\n\035STREAM_ENCODING_H264_OPENH264\020\000\022!\n\035STR"
  "EAM_ENCODING_H264_HARDWARE\020\001\022 \n\034STREAM_E"
  "NCODING_MP3_SOFTWARE\020\002\022 \n\034STREAM_ENCODIN"
  "G_MP3_HARDWARE\020\003*\205\001\n\007Command\022\020\n\014COMMAND_"
  "INIT\020\000\022\023\n\017COMMAND_INIT_OK\020\001\022\021\n\rCOMMAND_S"
  "TART\020\002\022\020\n\014COMMAND_STOP\020\003\022\031\n\025COMMAND_SET_"
  "PARAMETER\020\004\022\023\n\017COMMAND_DESTROY\020\005*t\n\014Prop"
  "ertyType\022\030\n\024PROPERTY_TYPE_STRING\020\000\022\026\n\022PR"
  "OPERTY_TYPE_BOOL\020\001\022\030\n\024PROPERTY_TYPE_UINT"
  "32\020\002\022\030\n\024PROPERTY_TYPE_DOUBLE\020\003*i\n\013Messag"
  "eType\022\036\n\032MESSAGE_TYPE_STREAM_CHANGE\020\000\022\034\n"
  "\030MESSAGE_TYPE_STREAM_DATA\020\001\022\034\n\030MESSAGE_T"
  "YPE_STREAM_INFO\020\002b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_snappyv1_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_snappyv1_2eproto = {
    false, false, 2585, descriptor_table_protodef_snappyv1_2eproto,
    "snappyv1.proto",
    &descriptor_table_snappyv1_2eproto_once, nullptr, 0, 12,
    schemas, file_default_instances, TableStruct_snappyv1_2eproto::offsets,
    file_level_metadata_snappyv1_2eproto, file_level_enum_descriptors_snappyv1_2eproto,
    file_level_service_descriptors_snappyv1_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_snappyv1_2eproto_getter() {
  return &descriptor_table_snappyv1_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_snappyv1_2eproto(&descriptor_table_snappyv1_2eproto);
namespace snappyv1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Platform_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_snappyv1_2eproto);
  return file_level_enum_descriptors_snappyv1_2eproto[0];
}
bool Platform_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StreamMedium_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_snappyv1_2eproto);
  return file_level_enum_descriptors_snappyv1_2eproto[1];
}
bool StreamMedium_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StreamEndpoint_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_snappyv1_2eproto);
  return file_level_enum_descriptors_snappyv1_2eproto[2];
}
bool StreamEndpoint_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StreamDirection_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_snappyv1_2eproto);
  return file_level_enum_descriptors_snappyv1_2eproto[3];
}
bool StreamDirection_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StreamEncoding_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_snappyv1_2eproto);
  return file_level_enum_descriptors_snappyv1_2eproto[4];
}
bool StreamEncoding_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Command_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_snappyv1_2eproto);
  return file_level_enum_descriptors_snappyv1_2eproto[5];
}
bool Command_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PropertyType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_snappyv1_2eproto);
  return file_level_enum_descriptors_snappyv1_2eproto[6];
}
bool PropertyType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MessageType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_snappyv1_2eproto);
  return file_level_enum_descriptors_snappyv1_2eproto[7];
}
bool MessageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Property_ValueString::_Internal {
 public:
};

Property_ValueString::Property_ValueString(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:snappyv1.Property.ValueString)
}
Property_ValueString::Property_ValueString(const Property_ValueString& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Property_ValueString* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_value().empty()) {
    _this->_impl_.value_.Set(from._internal_value(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:snappyv1.Property.ValueString)
}

inline void Property_ValueString::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Property_ValueString::~Property_ValueString() {
  // @@protoc_insertion_point(destructor:snappyv1.Property.ValueString)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Property_ValueString::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.value_.Destroy();
}

void Property_ValueString::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Property_ValueString::Clear() {
// @@protoc_insertion_point(message_clear_start:snappyv1.Property.ValueString)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.value_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Property_ValueString::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "snappyv1.Property.ValueString.value"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Property_ValueString::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:snappyv1.Property.ValueString)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string value = 1;
  if (!this->_internal_value().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "snappyv1.Property.ValueString.value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:snappyv1.Property.ValueString)
  return target;
}

size_t Property_ValueString::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:snappyv1.Property.ValueString)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string value = 1;
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Property_ValueString::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Property_ValueString::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Property_ValueString::GetClassData() const { return &_class_data_; }


void Property_ValueString::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Property_ValueString*>(&to_msg);
  auto& from = static_cast<const Property_ValueString&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:snappyv1.Property.ValueString)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_value().empty()) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Property_ValueString::CopyFrom(const Property_ValueString& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:snappyv1.Property.ValueString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Property_ValueString::IsInitialized() const {
  return true;
}

void Property_ValueString::InternalSwap(Property_ValueString* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.value_, lhs_arena,
      &other->_impl_.value_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Property_ValueString::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_snappyv1_2eproto_getter, &descriptor_table_snappyv1_2eproto_once,
      file_level_metadata_snappyv1_2eproto[0]);
}

// ===================================================================

class Property_ValueBool::_Internal {
 public:
};

Property_ValueBool::Property_ValueBool(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:snappyv1.Property.ValueBool)
}
Property_ValueBool::Property_ValueBool(const Property_ValueBool& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Property_ValueBool* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.value_ = from._impl_.value_;
  // @@protoc_insertion_point(copy_constructor:snappyv1.Property.ValueBool)
}

inline void Property_ValueBool::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Property_ValueBool::~Property_ValueBool() {
  // @@protoc_insertion_point(destructor:snappyv1.Property.ValueBool)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Property_ValueBool::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Property_ValueBool::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Property_ValueBool::Clear() {
// @@protoc_insertion_point(message_clear_start:snappyv1.Property.ValueBool)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.value_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Property_ValueBool::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Property_ValueBool::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:snappyv1.Property.ValueBool)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool value = 1;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:snappyv1.Property.ValueBool)
  return target;
}

size_t Property_ValueBool::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:snappyv1.Property.ValueBool)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool value = 1;
  if (this->_internal_value() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Property_ValueBool::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Property_ValueBool::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Property_ValueBool::GetClassData() const { return &_class_data_; }


void Property_ValueBool::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Property_ValueBool*>(&to_msg);
  auto& from = static_cast<const Property_ValueBool&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:snappyv1.Property.ValueBool)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_value() != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Property_ValueBool::CopyFrom(const Property_ValueBool& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:snappyv1.Property.ValueBool)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Property_ValueBool::IsInitialized() const {
  return true;
}

void Property_ValueBool::InternalSwap(Property_ValueBool* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.value_, other->_impl_.value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Property_ValueBool::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_snappyv1_2eproto_getter, &descriptor_table_snappyv1_2eproto_once,
      file_level_metadata_snappyv1_2eproto[1]);
}

// ===================================================================

class Property_ValueUint32::_Internal {
 public:
  using HasBits = decltype(std::declval<Property_ValueUint32>()._impl_._has_bits_);
  static void set_has_min(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_max(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Property_ValueUint32::Property_ValueUint32(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:snappyv1.Property.ValueUint32)
}
Property_ValueUint32::Property_ValueUint32(const Property_ValueUint32& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Property_ValueUint32* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.value_){}
    , decltype(_impl_.min_){}
    , decltype(_impl_.max_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.value_, &from._impl_.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.max_) -
    reinterpret_cast<char*>(&_impl_.value_)) + sizeof(_impl_.max_));
  // @@protoc_insertion_point(copy_constructor:snappyv1.Property.ValueUint32)
}

inline void Property_ValueUint32::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.value_){0u}
    , decltype(_impl_.min_){0u}
    , decltype(_impl_.max_){0u}
  };
}

Property_ValueUint32::~Property_ValueUint32() {
  // @@protoc_insertion_point(destructor:snappyv1.Property.ValueUint32)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Property_ValueUint32::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Property_ValueUint32::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Property_ValueUint32::Clear() {
// @@protoc_insertion_point(message_clear_start:snappyv1.Property.ValueUint32)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.value_ = 0u;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.min_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.max_) -
        reinterpret_cast<char*>(&_impl_.min_)) + sizeof(_impl_.max_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Property_ValueUint32::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 min = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_min(&has_bits);
          _impl_.min_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 max = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_max(&has_bits);
          _impl_.max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Property_ValueUint32::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:snappyv1.Property.ValueUint32)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 value = 1;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_value(), target);
  }

  // optional uint32 min = 2;
  if (_internal_has_min()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_min(), target);
  }

  // optional uint32 max = 3;
  if (_internal_has_max()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_max(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:snappyv1.Property.ValueUint32)
  return target;
}

size_t Property_ValueUint32::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:snappyv1.Property.ValueUint32)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 value = 1;
  if (this->_internal_value() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_value());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 min = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_min());
    }

    // optional uint32 max = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_max());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Property_ValueUint32::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Property_ValueUint32::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Property_ValueUint32::GetClassData() const { return &_class_data_; }


void Property_ValueUint32::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Property_ValueUint32*>(&to_msg);
  auto& from = static_cast<const Property_ValueUint32&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:snappyv1.Property.ValueUint32)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_value() != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.min_ = from._impl_.min_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.max_ = from._impl_.max_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Property_ValueUint32::CopyFrom(const Property_ValueUint32& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:snappyv1.Property.ValueUint32)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Property_ValueUint32::IsInitialized() const {
  return true;
}

void Property_ValueUint32::InternalSwap(Property_ValueUint32* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Property_ValueUint32, _impl_.max_)
      + sizeof(Property_ValueUint32::_impl_.max_)
      - PROTOBUF_FIELD_OFFSET(Property_ValueUint32, _impl_.value_)>(
          reinterpret_cast<char*>(&_impl_.value_),
          reinterpret_cast<char*>(&other->_impl_.value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Property_ValueUint32::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_snappyv1_2eproto_getter, &descriptor_table_snappyv1_2eproto_once,
      file_level_metadata_snappyv1_2eproto[2]);
}

// ===================================================================

class Property_ValueDouble::_Internal {
 public:
  using HasBits = decltype(std::declval<Property_ValueDouble>()._impl_._has_bits_);
  static void set_has_min(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_max(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Property_ValueDouble::Property_ValueDouble(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:snappyv1.Property.ValueDouble)
}
Property_ValueDouble::Property_ValueDouble(const Property_ValueDouble& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Property_ValueDouble* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.value_){}
    , decltype(_impl_.min_){}
    , decltype(_impl_.max_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.value_, &from._impl_.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.max_) -
    reinterpret_cast<char*>(&_impl_.value_)) + sizeof(_impl_.max_));
  // @@protoc_insertion_point(copy_constructor:snappyv1.Property.ValueDouble)
}

inline void Property_ValueDouble::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.value_){0}
    , decltype(_impl_.min_){0}
    , decltype(_impl_.max_){0}
  };
}

Property_ValueDouble::~Property_ValueDouble() {
  // @@protoc_insertion_point(destructor:snappyv1.Property.ValueDouble)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Property_ValueDouble::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Property_ValueDouble::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Property_ValueDouble::Clear() {
// @@protoc_insertion_point(message_clear_start:snappyv1.Property.ValueDouble)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.value_ = 0;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.min_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.max_) -
        reinterpret_cast<char*>(&_impl_.min_)) + sizeof(_impl_.max_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Property_ValueDouble::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double min = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_min(&has_bits);
          _impl_.min_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double max = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_max(&has_bits);
          _impl_.max_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Property_ValueDouble::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:snappyv1.Property.ValueDouble)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double value = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_value = this->_internal_value();
  uint64_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_value(), target);
  }

  // optional double min = 2;
  if (_internal_has_min()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_min(), target);
  }

  // optional double max = 3;
  if (_internal_has_max()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_max(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:snappyv1.Property.ValueDouble)
  return target;
}

size_t Property_ValueDouble::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:snappyv1.Property.ValueDouble)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double value = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_value = this->_internal_value();
  uint64_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    total_size += 1 + 8;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double min = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double max = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Property_ValueDouble::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Property_ValueDouble::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Property_ValueDouble::GetClassData() const { return &_class_data_; }


void Property_ValueDouble::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Property_ValueDouble*>(&to_msg);
  auto& from = static_cast<const Property_ValueDouble&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:snappyv1.Property.ValueDouble)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_value = from._internal_value();
  uint64_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.min_ = from._impl_.min_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.max_ = from._impl_.max_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Property_ValueDouble::CopyFrom(const Property_ValueDouble& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:snappyv1.Property.ValueDouble)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Property_ValueDouble::IsInitialized() const {
  return true;
}

void Property_ValueDouble::InternalSwap(Property_ValueDouble* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Property_ValueDouble, _impl_.max_)
      + sizeof(Property_ValueDouble::_impl_.max_)
      - PROTOBUF_FIELD_OFFSET(Property_ValueDouble, _impl_.value_)>(
          reinterpret_cast<char*>(&_impl_.value_),
          reinterpret_cast<char*>(&other->_impl_.value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Property_ValueDouble::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_snappyv1_2eproto_getter, &descriptor_table_snappyv1_2eproto_once,
      file_level_metadata_snappyv1_2eproto[3]);
}

// ===================================================================

class Property::_Internal {
 public:
  static const ::snappyv1::Property_ValueString& value_string(const Property* msg);
  static const ::snappyv1::Property_ValueBool& value_bool(const Property* msg);
  static const ::snappyv1::Property_ValueUint32& value_uint32(const Property* msg);
  static const ::snappyv1::Property_ValueDouble& value_double(const Property* msg);
};

const ::snappyv1::Property_ValueString&
Property::_Internal::value_string(const Property* msg) {
  return *msg->_impl_.value_.value_string_;
}
const ::snappyv1::Property_ValueBool&
Property::_Internal::value_bool(const Property* msg) {
  return *msg->_impl_.value_.value_bool_;
}
const ::snappyv1::Property_ValueUint32&
Property::_Internal::value_uint32(const Property* msg) {
  return *msg->_impl_.value_.value_uint32_;
}
const ::snappyv1::Property_ValueDouble&
Property::_Internal::value_double(const Property* msg) {
  return *msg->_impl_.value_.value_double_;
}
void Property::set_allocated_value_string(::snappyv1::Property_ValueString* value_string) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (value_string) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(value_string);
    if (message_arena != submessage_arena) {
      value_string = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value_string, submessage_arena);
    }
    set_has_value_string();
    _impl_.value_.value_string_ = value_string;
  }
  // @@protoc_insertion_point(field_set_allocated:snappyv1.Property.value_string)
}
void Property::set_allocated_value_bool(::snappyv1::Property_ValueBool* value_bool) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (value_bool) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(value_bool);
    if (message_arena != submessage_arena) {
      value_bool = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value_bool, submessage_arena);
    }
    set_has_value_bool();
    _impl_.value_.value_bool_ = value_bool;
  }
  // @@protoc_insertion_point(field_set_allocated:snappyv1.Property.value_bool)
}
void Property::set_allocated_value_uint32(::snappyv1::Property_ValueUint32* value_uint32) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (value_uint32) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(value_uint32);
    if (message_arena != submessage_arena) {
      value_uint32 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value_uint32, submessage_arena);
    }
    set_has_value_uint32();
    _impl_.value_.value_uint32_ = value_uint32;
  }
  // @@protoc_insertion_point(field_set_allocated:snappyv1.Property.value_uint32)
}
void Property::set_allocated_value_double(::snappyv1::Property_ValueDouble* value_double) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (value_double) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(value_double);
    if (message_arena != submessage_arena) {
      value_double = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value_double, submessage_arena);
    }
    set_has_value_double();
    _impl_.value_.value_double_ = value_double;
  }
  // @@protoc_insertion_point(field_set_allocated:snappyv1.Property.value_double)
}
Property::Property(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:snappyv1.Property)
}
Property::Property(const Property& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Property* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    _this->_impl_.key_.Set(from._internal_key(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.type_ = from._impl_.type_;
  clear_has_value();
  switch (from.value_case()) {
    case kValueString: {
      _this->_internal_mutable_value_string()->::snappyv1::Property_ValueString::MergeFrom(
          from._internal_value_string());
      break;
    }
    case kValueBool: {
      _this->_internal_mutable_value_bool()->::snappyv1::Property_ValueBool::MergeFrom(
          from._internal_value_bool());
      break;
    }
    case kValueUint32: {
      _this->_internal_mutable_value_uint32()->::snappyv1::Property_ValueUint32::MergeFrom(
          from._internal_value_uint32());
      break;
    }
    case kValueDouble: {
      _this->_internal_mutable_value_double()->::snappyv1::Property_ValueDouble::MergeFrom(
          from._internal_value_double());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:snappyv1.Property)
}

inline void Property::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_value();
}

Property::~Property() {
  // @@protoc_insertion_point(destructor:snappyv1.Property)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Property::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.key_.Destroy();
  if (has_value()) {
    clear_value();
  }
}

void Property::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Property::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:snappyv1.Property)
  switch (value_case()) {
    case kValueString: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.value_string_;
      }
      break;
    }
    case kValueBool: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.value_bool_;
      }
      break;
    }
    case kValueUint32: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.value_uint32_;
      }
      break;
    }
    case kValueDouble: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.value_double_;
      }
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = VALUE_NOT_SET;
}


void Property::Clear() {
// @@protoc_insertion_point(message_clear_start:snappyv1.Property)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.key_.ClearToEmpty();
  _impl_.type_ = 0;
  clear_value();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Property::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .snappyv1.PropertyType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::snappyv1::PropertyType>(val));
        } else
          goto handle_unusual;
        continue;
      // string key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "snappyv1.Property.key"));
        } else
          goto handle_unusual;
        continue;
      // .snappyv1.Property.ValueString value_string = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_value_string(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .snappyv1.Property.ValueBool value_bool = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_value_bool(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .snappyv1.Property.ValueUint32 value_uint32 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_value_uint32(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .snappyv1.Property.ValueDouble value_double = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_value_double(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Property::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:snappyv1.Property)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .snappyv1.PropertyType type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // string key = 2;
  if (!this->_internal_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "snappyv1.Property.key");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_key(), target);
  }

  // .snappyv1.Property.ValueString value_string = 3;
  if (_internal_has_value_string()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::value_string(this),
        _Internal::value_string(this).GetCachedSize(), target, stream);
  }

  // .snappyv1.Property.ValueBool value_bool = 4;
  if (_internal_has_value_bool()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::value_bool(this),
        _Internal::value_bool(this).GetCachedSize(), target, stream);
  }

  // .snappyv1.Property.ValueUint32 value_uint32 = 5;
  if (_internal_has_value_uint32()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::value_uint32(this),
        _Internal::value_uint32(this).GetCachedSize(), target, stream);
  }

  // .snappyv1.Property.ValueDouble value_double = 6;
  if (_internal_has_value_double()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::value_double(this),
        _Internal::value_double(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:snappyv1.Property)
  return target;
}

size_t Property::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:snappyv1.Property)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 2;
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // .snappyv1.PropertyType type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  switch (value_case()) {
    // .snappyv1.Property.ValueString value_string = 3;
    case kValueString: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_.value_string_);
      break;
    }
    // .snappyv1.Property.ValueBool value_bool = 4;
    case kValueBool: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_.value_bool_);
      break;
    }
    // .snappyv1.Property.ValueUint32 value_uint32 = 5;
    case kValueUint32: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_.value_uint32_);
      break;
    }
    // .snappyv1.Property.ValueDouble value_double = 6;
    case kValueDouble: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_.value_double_);
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Property::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Property::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Property::GetClassData() const { return &_class_data_; }


void Property::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Property*>(&to_msg);
  auto& from = static_cast<const Property&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:snappyv1.Property)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_key().empty()) {
    _this->_internal_set_key(from._internal_key());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  switch (from.value_case()) {
    case kValueString: {
      _this->_internal_mutable_value_string()->::snappyv1::Property_ValueString::MergeFrom(
          from._internal_value_string());
      break;
    }
    case kValueBool: {
      _this->_internal_mutable_value_bool()->::snappyv1::Property_ValueBool::MergeFrom(
          from._internal_value_bool());
      break;
    }
    case kValueUint32: {
      _this->_internal_mutable_value_uint32()->::snappyv1::Property_ValueUint32::MergeFrom(
          from._internal_value_uint32());
      break;
    }
    case kValueDouble: {
      _this->_internal_mutable_value_double()->::snappyv1::Property_ValueDouble::MergeFrom(
          from._internal_value_double());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Property::CopyFrom(const Property& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:snappyv1.Property)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Property::IsInitialized() const {
  return true;
}

void Property::InternalSwap(Property* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.key_, lhs_arena,
      &other->_impl_.key_, rhs_arena
  );
  swap(_impl_.type_, other->_impl_.type_);
  swap(_impl_.value_, other->_impl_.value_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Property::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_snappyv1_2eproto_getter, &descriptor_table_snappyv1_2eproto_once,
      file_level_metadata_snappyv1_2eproto[4]);
}

// ===================================================================

class StreamInfo::_Internal {
 public:
};

StreamInfo::StreamInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:snappyv1.StreamInfo)
}
StreamInfo::StreamInfo(const StreamInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StreamInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.stream_endpoints_){from._impl_.stream_endpoints_}
    , /*decltype(_impl_._stream_endpoints_cached_byte_size_)*/{0}
    , decltype(_impl_.stream_encodings_){from._impl_.stream_encodings_}
    , /*decltype(_impl_._stream_encodings_cached_byte_size_)*/{0}
    , decltype(_impl_.platform_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.platform_ = from._impl_.platform_;
  // @@protoc_insertion_point(copy_constructor:snappyv1.StreamInfo)
}

inline void StreamInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.stream_endpoints_){arena}
    , /*decltype(_impl_._stream_endpoints_cached_byte_size_)*/{0}
    , decltype(_impl_.stream_encodings_){arena}
    , /*decltype(_impl_._stream_encodings_cached_byte_size_)*/{0}
    , decltype(_impl_.platform_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

StreamInfo::~StreamInfo() {
  // @@protoc_insertion_point(destructor:snappyv1.StreamInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StreamInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.stream_endpoints_.~RepeatedField();
  _impl_.stream_encodings_.~RepeatedField();
}

void StreamInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StreamInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:snappyv1.StreamInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.stream_endpoints_.Clear();
  _impl_.stream_encodings_.Clear();
  _impl_.platform_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .snappyv1.Platform platform = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_platform(static_cast<::snappyv1::Platform>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .snappyv1.StreamEndpoint stream_endpoints = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_stream_endpoints(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_stream_endpoints(static_cast<::snappyv1::StreamEndpoint>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .snappyv1.StreamEncoding stream_encodings = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_stream_encodings(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_stream_encodings(static_cast<::snappyv1::StreamEncoding>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StreamInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:snappyv1.StreamInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .snappyv1.Platform platform = 1;
  if (this->_internal_platform() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_platform(), target);
  }

  // repeated .snappyv1.StreamEndpoint stream_endpoints = 2;
  {
    int byte_size = _impl_._stream_endpoints_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          2, _impl_.stream_endpoints_, byte_size, target);
    }
  }

  // repeated .snappyv1.StreamEncoding stream_encodings = 3;
  {
    int byte_size = _impl_._stream_encodings_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          3, _impl_.stream_encodings_, byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:snappyv1.StreamInfo)
  return target;
}

size_t StreamInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:snappyv1.StreamInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .snappyv1.StreamEndpoint stream_endpoints = 2;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_stream_endpoints_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_stream_endpoints(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._stream_endpoints_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .snappyv1.StreamEncoding stream_encodings = 3;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_stream_encodings_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_stream_encodings(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._stream_encodings_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .snappyv1.Platform platform = 1;
  if (this->_internal_platform() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_platform());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StreamInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StreamInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StreamInfo::GetClassData() const { return &_class_data_; }


void StreamInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StreamInfo*>(&to_msg);
  auto& from = static_cast<const StreamInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:snappyv1.StreamInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.stream_endpoints_.MergeFrom(from._impl_.stream_endpoints_);
  _this->_impl_.stream_encodings_.MergeFrom(from._impl_.stream_encodings_);
  if (from._internal_platform() != 0) {
    _this->_internal_set_platform(from._internal_platform());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StreamInfo::CopyFrom(const StreamInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:snappyv1.StreamInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamInfo::IsInitialized() const {
  return true;
}

void StreamInfo::InternalSwap(StreamInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.stream_endpoints_.InternalSwap(&other->_impl_.stream_endpoints_);
  _impl_.stream_encodings_.InternalSwap(&other->_impl_.stream_encodings_);
  swap(_impl_.platform_, other->_impl_.platform_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_snappyv1_2eproto_getter, &descriptor_table_snappyv1_2eproto_once,
      file_level_metadata_snappyv1_2eproto[5]);
}

// ===================================================================

class StreamChange::_Internal {
 public:
};

StreamChange::StreamChange(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:snappyv1.StreamChange)
}
StreamChange::StreamChange(const StreamChange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StreamChange* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.property_){from._impl_.property_}
    , decltype(_impl_.id_){}
    , decltype(_impl_.command_){}
    , decltype(_impl_.stream_medium_){}
    , decltype(_impl_.stream_direction_){}
    , decltype(_impl_.stream_endpoint_){}
    , decltype(_impl_.stream_encoding_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.stream_encoding_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.stream_encoding_));
  // @@protoc_insertion_point(copy_constructor:snappyv1.StreamChange)
}

inline void StreamChange::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.property_){arena}
    , decltype(_impl_.id_){0u}
    , decltype(_impl_.command_){0}
    , decltype(_impl_.stream_medium_){0}
    , decltype(_impl_.stream_direction_){0}
    , decltype(_impl_.stream_endpoint_){0}
    , decltype(_impl_.stream_encoding_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

StreamChange::~StreamChange() {
  // @@protoc_insertion_point(destructor:snappyv1.StreamChange)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StreamChange::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.property_.~RepeatedPtrField();
}

void StreamChange::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StreamChange::Clear() {
// @@protoc_insertion_point(message_clear_start:snappyv1.StreamChange)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.property_.Clear();
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.stream_encoding_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.stream_encoding_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamChange::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .snappyv1.Command command = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_command(static_cast<::snappyv1::Command>(val));
        } else
          goto handle_unusual;
        continue;
      // .snappyv1.StreamMedium stream_medium = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_stream_medium(static_cast<::snappyv1::StreamMedium>(val));
        } else
          goto handle_unusual;
        continue;
      // .snappyv1.StreamDirection stream_direction = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_stream_direction(static_cast<::snappyv1::StreamDirection>(val));
        } else
          goto handle_unusual;
        continue;
      // .snappyv1.StreamEndpoint stream_endpoint = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_stream_endpoint(static_cast<::snappyv1::StreamEndpoint>(val));
        } else
          goto handle_unusual;
        continue;
      // .snappyv1.StreamEncoding stream_encoding = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_stream_encoding(static_cast<::snappyv1::StreamEncoding>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .snappyv1.Property property = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_property(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StreamChange::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:snappyv1.StreamChange)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // .snappyv1.Command command = 2;
  if (this->_internal_command() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_command(), target);
  }

  // .snappyv1.StreamMedium stream_medium = 3;
  if (this->_internal_stream_medium() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_stream_medium(), target);
  }

  // .snappyv1.StreamDirection stream_direction = 4;
  if (this->_internal_stream_direction() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_stream_direction(), target);
  }

  // .snappyv1.StreamEndpoint stream_endpoint = 5;
  if (this->_internal_stream_endpoint() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_stream_endpoint(), target);
  }

  // .snappyv1.StreamEncoding stream_encoding = 6;
  if (this->_internal_stream_encoding() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_stream_encoding(), target);
  }

  // repeated .snappyv1.Property property = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_property_size()); i < n; i++) {
    const auto& repfield = this->_internal_property(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:snappyv1.StreamChange)
  return target;
}

size_t StreamChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:snappyv1.StreamChange)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .snappyv1.Property property = 7;
  total_size += 1UL * this->_internal_property_size();
  for (const auto& msg : this->_impl_.property_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  // .snappyv1.Command command = 2;
  if (this->_internal_command() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_command());
  }

  // .snappyv1.StreamMedium stream_medium = 3;
  if (this->_internal_stream_medium() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_stream_medium());
  }

  // .snappyv1.StreamDirection stream_direction = 4;
  if (this->_internal_stream_direction() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_stream_direction());
  }

  // .snappyv1.StreamEndpoint stream_endpoint = 5;
  if (this->_internal_stream_endpoint() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_stream_endpoint());
  }

  // .snappyv1.StreamEncoding stream_encoding = 6;
  if (this->_internal_stream_encoding() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_stream_encoding());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StreamChange::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StreamChange::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StreamChange::GetClassData() const { return &_class_data_; }


void StreamChange::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StreamChange*>(&to_msg);
  auto& from = static_cast<const StreamChange&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:snappyv1.StreamChange)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.property_.MergeFrom(from._impl_.property_);
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_command() != 0) {
    _this->_internal_set_command(from._internal_command());
  }
  if (from._internal_stream_medium() != 0) {
    _this->_internal_set_stream_medium(from._internal_stream_medium());
  }
  if (from._internal_stream_direction() != 0) {
    _this->_internal_set_stream_direction(from._internal_stream_direction());
  }
  if (from._internal_stream_endpoint() != 0) {
    _this->_internal_set_stream_endpoint(from._internal_stream_endpoint());
  }
  if (from._internal_stream_encoding() != 0) {
    _this->_internal_set_stream_encoding(from._internal_stream_encoding());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StreamChange::CopyFrom(const StreamChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:snappyv1.StreamChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamChange::IsInitialized() const {
  return true;
}

void StreamChange::InternalSwap(StreamChange* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.property_.InternalSwap(&other->_impl_.property_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StreamChange, _impl_.stream_encoding_)
      + sizeof(StreamChange::_impl_.stream_encoding_)
      - PROTOBUF_FIELD_OFFSET(StreamChange, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamChange::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_snappyv1_2eproto_getter, &descriptor_table_snappyv1_2eproto_once,
      file_level_metadata_snappyv1_2eproto[6]);
}

// ===================================================================

class StreamData::_Internal {
 public:
};

StreamData::StreamData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:snappyv1.StreamData)
}
StreamData::StreamData(const StreamData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StreamData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.payload_){}
    , decltype(_impl_.stream_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.payload_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.payload_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_payload().empty()) {
    _this->_impl_.payload_.Set(from._internal_payload(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.stream_id_ = from._impl_.stream_id_;
  // @@protoc_insertion_point(copy_constructor:snappyv1.StreamData)
}

inline void StreamData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.payload_){}
    , decltype(_impl_.stream_id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.payload_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.payload_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StreamData::~StreamData() {
  // @@protoc_insertion_point(destructor:snappyv1.StreamData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StreamData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.payload_.Destroy();
}

void StreamData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StreamData::Clear() {
// @@protoc_insertion_point(message_clear_start:snappyv1.StreamData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.payload_.ClearToEmpty();
  _impl_.stream_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 stream_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.stream_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes payload = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_payload();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StreamData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:snappyv1.StreamData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 stream_id = 1;
  if (this->_internal_stream_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_stream_id(), target);
  }

  // bytes payload = 2;
  if (!this->_internal_payload().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_payload(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:snappyv1.StreamData)
  return target;
}

size_t StreamData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:snappyv1.StreamData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes payload = 2;
  if (!this->_internal_payload().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_payload());
  }

  // uint32 stream_id = 1;
  if (this->_internal_stream_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_stream_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StreamData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StreamData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StreamData::GetClassData() const { return &_class_data_; }


void StreamData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StreamData*>(&to_msg);
  auto& from = static_cast<const StreamData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:snappyv1.StreamData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_payload().empty()) {
    _this->_internal_set_payload(from._internal_payload());
  }
  if (from._internal_stream_id() != 0) {
    _this->_internal_set_stream_id(from._internal_stream_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StreamData::CopyFrom(const StreamData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:snappyv1.StreamData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamData::IsInitialized() const {
  return true;
}

void StreamData::InternalSwap(StreamData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.payload_, lhs_arena,
      &other->_impl_.payload_, rhs_arena
  );
  swap(_impl_.stream_id_, other->_impl_.stream_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_snappyv1_2eproto_getter, &descriptor_table_snappyv1_2eproto_once,
      file_level_metadata_snappyv1_2eproto[7]);
}

// ===================================================================

class Message::_Internal {
 public:
  static const ::snappyv1::StreamChange& stream_change(const Message* msg);
  static const ::snappyv1::StreamData& stream_data(const Message* msg);
  static const ::snappyv1::StreamInfo& stream_info(const Message* msg);
};

const ::snappyv1::StreamChange&
Message::_Internal::stream_change(const Message* msg) {
  return *msg->_impl_.message_.stream_change_;
}
const ::snappyv1::StreamData&
Message::_Internal::stream_data(const Message* msg) {
  return *msg->_impl_.message_.stream_data_;
}
const ::snappyv1::StreamInfo&
Message::_Internal::stream_info(const Message* msg) {
  return *msg->_impl_.message_.stream_info_;
}
void Message::set_allocated_stream_change(::snappyv1::StreamChange* stream_change) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (stream_change) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(stream_change);
    if (message_arena != submessage_arena) {
      stream_change = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stream_change, submessage_arena);
    }
    set_has_stream_change();
    _impl_.message_.stream_change_ = stream_change;
  }
  // @@protoc_insertion_point(field_set_allocated:snappyv1.Message.stream_change)
}
void Message::set_allocated_stream_data(::snappyv1::StreamData* stream_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (stream_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(stream_data);
    if (message_arena != submessage_arena) {
      stream_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stream_data, submessage_arena);
    }
    set_has_stream_data();
    _impl_.message_.stream_data_ = stream_data;
  }
  // @@protoc_insertion_point(field_set_allocated:snappyv1.Message.stream_data)
}
void Message::set_allocated_stream_info(::snappyv1::StreamInfo* stream_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (stream_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(stream_info);
    if (message_arena != submessage_arena) {
      stream_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stream_info, submessage_arena);
    }
    set_has_stream_info();
    _impl_.message_.stream_info_ = stream_info;
  }
  // @@protoc_insertion_point(field_set_allocated:snappyv1.Message.stream_info)
}
Message::Message(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:snappyv1.Message)
}
Message::Message(const Message& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Message* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){}
    , decltype(_impl_.message_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.type_ = from._impl_.type_;
  clear_has_message();
  switch (from.message_case()) {
    case kStreamChange: {
      _this->_internal_mutable_stream_change()->::snappyv1::StreamChange::MergeFrom(
          from._internal_stream_change());
      break;
    }
    case kStreamData: {
      _this->_internal_mutable_stream_data()->::snappyv1::StreamData::MergeFrom(
          from._internal_stream_data());
      break;
    }
    case kStreamInfo: {
      _this->_internal_mutable_stream_info()->::snappyv1::StreamInfo::MergeFrom(
          from._internal_stream_info());
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:snappyv1.Message)
}

inline void Message::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){0}
    , decltype(_impl_.message_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_message();
}

Message::~Message() {
  // @@protoc_insertion_point(destructor:snappyv1.Message)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Message::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_message()) {
    clear_message();
  }
}

void Message::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Message::clear_message() {
// @@protoc_insertion_point(one_of_clear_start:snappyv1.Message)
  switch (message_case()) {
    case kStreamChange: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.stream_change_;
      }
      break;
    }
    case kStreamData: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.stream_data_;
      }
      break;
    }
    case kStreamInfo: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.stream_info_;
      }
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = MESSAGE_NOT_SET;
}


void Message::Clear() {
// @@protoc_insertion_point(message_clear_start:snappyv1.Message)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.type_ = 0;
  clear_message();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .snappyv1.MessageType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::snappyv1::MessageType>(val));
        } else
          goto handle_unusual;
        continue;
      // .snappyv1.StreamChange stream_change = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_stream_change(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .snappyv1.StreamData stream_data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_stream_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .snappyv1.StreamInfo stream_info = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_stream_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Message::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:snappyv1.Message)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .snappyv1.MessageType type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // .snappyv1.StreamChange stream_change = 2;
  if (_internal_has_stream_change()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::stream_change(this),
        _Internal::stream_change(this).GetCachedSize(), target, stream);
  }

  // .snappyv1.StreamData stream_data = 3;
  if (_internal_has_stream_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::stream_data(this),
        _Internal::stream_data(this).GetCachedSize(), target, stream);
  }

  // .snappyv1.StreamInfo stream_info = 4;
  if (_internal_has_stream_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::stream_info(this),
        _Internal::stream_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:snappyv1.Message)
  return target;
}

size_t Message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:snappyv1.Message)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .snappyv1.MessageType type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  switch (message_case()) {
    // .snappyv1.StreamChange stream_change = 2;
    case kStreamChange: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.stream_change_);
      break;
    }
    // .snappyv1.StreamData stream_data = 3;
    case kStreamData: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.stream_data_);
      break;
    }
    // .snappyv1.StreamInfo stream_info = 4;
    case kStreamInfo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.stream_info_);
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Message::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Message::GetClassData() const { return &_class_data_; }


void Message::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Message*>(&to_msg);
  auto& from = static_cast<const Message&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:snappyv1.Message)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  switch (from.message_case()) {
    case kStreamChange: {
      _this->_internal_mutable_stream_change()->::snappyv1::StreamChange::MergeFrom(
          from._internal_stream_change());
      break;
    }
    case kStreamData: {
      _this->_internal_mutable_stream_data()->::snappyv1::StreamData::MergeFrom(
          from._internal_stream_data());
      break;
    }
    case kStreamInfo: {
      _this->_internal_mutable_stream_info()->::snappyv1::StreamInfo::MergeFrom(
          from._internal_stream_info());
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Message::CopyFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:snappyv1.Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message::IsInitialized() const {
  return true;
}

void Message::InternalSwap(Message* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.type_, other->_impl_.type_);
  swap(_impl_.message_, other->_impl_.message_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Message::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_snappyv1_2eproto_getter, &descriptor_table_snappyv1_2eproto_once,
      file_level_metadata_snappyv1_2eproto[8]);
}

// ===================================================================

class StreamDataPointer::_Internal {
 public:
  using HasBits = decltype(std::declval<StreamDataPointer>()._impl_._has_bits_);
  static void set_has_mask(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

StreamDataPointer::StreamDataPointer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:snappyv1.StreamDataPointer)
}
StreamDataPointer::StreamDataPointer(const StreamDataPointer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StreamDataPointer* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.absx_){}
    , decltype(_impl_.absy_){}
    , decltype(_impl_.mask_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.absx_, &from._impl_.absx_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.mask_) -
    reinterpret_cast<char*>(&_impl_.absx_)) + sizeof(_impl_.mask_));
  // @@protoc_insertion_point(copy_constructor:snappyv1.StreamDataPointer)
}

inline void StreamDataPointer::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.absx_){0u}
    , decltype(_impl_.absy_){0u}
    , decltype(_impl_.mask_){0}
  };
}

StreamDataPointer::~StreamDataPointer() {
  // @@protoc_insertion_point(destructor:snappyv1.StreamDataPointer)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StreamDataPointer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void StreamDataPointer::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StreamDataPointer::Clear() {
// @@protoc_insertion_point(message_clear_start:snappyv1.StreamDataPointer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.absx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.absy_) -
      reinterpret_cast<char*>(&_impl_.absx_)) + sizeof(_impl_.absy_));
  _impl_.mask_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamDataPointer::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 absx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.absx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 absy = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.absy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 mask = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_mask(&has_bits);
          _impl_.mask_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StreamDataPointer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:snappyv1.StreamDataPointer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 absx = 1;
  if (this->_internal_absx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_absx(), target);
  }

  // uint32 absy = 2;
  if (this->_internal_absy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_absy(), target);
  }

  // optional int32 mask = 3;
  if (_internal_has_mask()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_mask(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:snappyv1.StreamDataPointer)
  return target;
}

size_t StreamDataPointer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:snappyv1.StreamDataPointer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 absx = 1;
  if (this->_internal_absx() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_absx());
  }

  // uint32 absy = 2;
  if (this->_internal_absy() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_absy());
  }

  // optional int32 mask = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mask());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StreamDataPointer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StreamDataPointer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StreamDataPointer::GetClassData() const { return &_class_data_; }


void StreamDataPointer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StreamDataPointer*>(&to_msg);
  auto& from = static_cast<const StreamDataPointer&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:snappyv1.StreamDataPointer)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_absx() != 0) {
    _this->_internal_set_absx(from._internal_absx());
  }
  if (from._internal_absy() != 0) {
    _this->_internal_set_absy(from._internal_absy());
  }
  if (from._internal_has_mask()) {
    _this->_internal_set_mask(from._internal_mask());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StreamDataPointer::CopyFrom(const StreamDataPointer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:snappyv1.StreamDataPointer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamDataPointer::IsInitialized() const {
  return true;
}

void StreamDataPointer::InternalSwap(StreamDataPointer* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StreamDataPointer, _impl_.mask_)
      + sizeof(StreamDataPointer::_impl_.mask_)
      - PROTOBUF_FIELD_OFFSET(StreamDataPointer, _impl_.absx_)>(
          reinterpret_cast<char*>(&_impl_.absx_),
          reinterpret_cast<char*>(&other->_impl_.absx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamDataPointer::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_snappyv1_2eproto_getter, &descriptor_table_snappyv1_2eproto_once,
      file_level_metadata_snappyv1_2eproto[9]);
}

// ===================================================================

class StreamDataKeyboard::_Internal {
 public:
};

StreamDataKeyboard::StreamDataKeyboard(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:snappyv1.StreamDataKeyboard)
}
StreamDataKeyboard::StreamDataKeyboard(const StreamDataKeyboard& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StreamDataKeyboard* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.keysym_){}
    , decltype(_impl_.keycode_){}
    , decltype(_impl_.down_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.keysym_, &from._impl_.keysym_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.down_) -
    reinterpret_cast<char*>(&_impl_.keysym_)) + sizeof(_impl_.down_));
  // @@protoc_insertion_point(copy_constructor:snappyv1.StreamDataKeyboard)
}

inline void StreamDataKeyboard::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.keysym_){0u}
    , decltype(_impl_.keycode_){0u}
    , decltype(_impl_.down_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

StreamDataKeyboard::~StreamDataKeyboard() {
  // @@protoc_insertion_point(destructor:snappyv1.StreamDataKeyboard)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StreamDataKeyboard::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void StreamDataKeyboard::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StreamDataKeyboard::Clear() {
// @@protoc_insertion_point(message_clear_start:snappyv1.StreamDataKeyboard)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.keysym_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.down_) -
      reinterpret_cast<char*>(&_impl_.keysym_)) + sizeof(_impl_.down_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamDataKeyboard::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 keysym = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.keysym_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 keycode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.keycode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool down = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.down_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StreamDataKeyboard::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:snappyv1.StreamDataKeyboard)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 keysym = 1;
  if (this->_internal_keysym() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_keysym(), target);
  }

  // uint32 keycode = 2;
  if (this->_internal_keycode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_keycode(), target);
  }

  // bool down = 3;
  if (this->_internal_down() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_down(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:snappyv1.StreamDataKeyboard)
  return target;
}

size_t StreamDataKeyboard::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:snappyv1.StreamDataKeyboard)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 keysym = 1;
  if (this->_internal_keysym() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_keysym());
  }

  // uint32 keycode = 2;
  if (this->_internal_keycode() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_keycode());
  }

  // bool down = 3;
  if (this->_internal_down() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StreamDataKeyboard::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StreamDataKeyboard::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StreamDataKeyboard::GetClassData() const { return &_class_data_; }


void StreamDataKeyboard::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StreamDataKeyboard*>(&to_msg);
  auto& from = static_cast<const StreamDataKeyboard&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:snappyv1.StreamDataKeyboard)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_keysym() != 0) {
    _this->_internal_set_keysym(from._internal_keysym());
  }
  if (from._internal_keycode() != 0) {
    _this->_internal_set_keycode(from._internal_keycode());
  }
  if (from._internal_down() != 0) {
    _this->_internal_set_down(from._internal_down());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StreamDataKeyboard::CopyFrom(const StreamDataKeyboard& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:snappyv1.StreamDataKeyboard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamDataKeyboard::IsInitialized() const {
  return true;
}

void StreamDataKeyboard::InternalSwap(StreamDataKeyboard* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StreamDataKeyboard, _impl_.down_)
      + sizeof(StreamDataKeyboard::_impl_.down_)
      - PROTOBUF_FIELD_OFFSET(StreamDataKeyboard, _impl_.keysym_)>(
          reinterpret_cast<char*>(&_impl_.keysym_),
          reinterpret_cast<char*>(&other->_impl_.keysym_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamDataKeyboard::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_snappyv1_2eproto_getter, &descriptor_table_snappyv1_2eproto_once,
      file_level_metadata_snappyv1_2eproto[10]);
}

// ===================================================================

class StreamDataCursor::_Internal {
 public:
};

StreamDataCursor::StreamDataCursor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:snappyv1.StreamDataCursor)
}
StreamDataCursor::StreamDataCursor(const StreamDataCursor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StreamDataCursor* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.image_){}
    , decltype(_impl_.width_){}
    , decltype(_impl_.height_){}
    , decltype(_impl_.hotx_){}
    , decltype(_impl_.hoty_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.image_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.image_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_image().empty()) {
    _this->_impl_.image_.Set(from._internal_image(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.width_, &from._impl_.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.hoty_) -
    reinterpret_cast<char*>(&_impl_.width_)) + sizeof(_impl_.hoty_));
  // @@protoc_insertion_point(copy_constructor:snappyv1.StreamDataCursor)
}

inline void StreamDataCursor::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.image_){}
    , decltype(_impl_.width_){0u}
    , decltype(_impl_.height_){0u}
    , decltype(_impl_.hotx_){0u}
    , decltype(_impl_.hoty_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.image_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.image_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StreamDataCursor::~StreamDataCursor() {
  // @@protoc_insertion_point(destructor:snappyv1.StreamDataCursor)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StreamDataCursor::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.image_.Destroy();
}

void StreamDataCursor::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StreamDataCursor::Clear() {
// @@protoc_insertion_point(message_clear_start:snappyv1.StreamDataCursor)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.image_.ClearToEmpty();
  ::memset(&_impl_.width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.hoty_) -
      reinterpret_cast<char*>(&_impl_.width_)) + sizeof(_impl_.hoty_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamDataCursor::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 width = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 hotx = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.hotx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 hoty = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.hoty_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes image = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_image();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StreamDataCursor::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:snappyv1.StreamDataCursor)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 width = 1;
  if (this->_internal_width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_width(), target);
  }

  // uint32 height = 2;
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_height(), target);
  }

  // uint32 hotx = 3;
  if (this->_internal_hotx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_hotx(), target);
  }

  // uint32 hoty = 4;
  if (this->_internal_hoty() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_hoty(), target);
  }

  // bytes image = 5;
  if (!this->_internal_image().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_image(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:snappyv1.StreamDataCursor)
  return target;
}

size_t StreamDataCursor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:snappyv1.StreamDataCursor)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes image = 5;
  if (!this->_internal_image().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_image());
  }

  // uint32 width = 1;
  if (this->_internal_width() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_width());
  }

  // uint32 height = 2;
  if (this->_internal_height() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_height());
  }

  // uint32 hotx = 3;
  if (this->_internal_hotx() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_hotx());
  }

  // uint32 hoty = 4;
  if (this->_internal_hoty() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_hoty());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StreamDataCursor::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StreamDataCursor::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StreamDataCursor::GetClassData() const { return &_class_data_; }


void StreamDataCursor::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StreamDataCursor*>(&to_msg);
  auto& from = static_cast<const StreamDataCursor&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:snappyv1.StreamDataCursor)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_image().empty()) {
    _this->_internal_set_image(from._internal_image());
  }
  if (from._internal_width() != 0) {
    _this->_internal_set_width(from._internal_width());
  }
  if (from._internal_height() != 0) {
    _this->_internal_set_height(from._internal_height());
  }
  if (from._internal_hotx() != 0) {
    _this->_internal_set_hotx(from._internal_hotx());
  }
  if (from._internal_hoty() != 0) {
    _this->_internal_set_hoty(from._internal_hoty());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StreamDataCursor::CopyFrom(const StreamDataCursor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:snappyv1.StreamDataCursor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamDataCursor::IsInitialized() const {
  return true;
}

void StreamDataCursor::InternalSwap(StreamDataCursor* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.image_, lhs_arena,
      &other->_impl_.image_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StreamDataCursor, _impl_.hoty_)
      + sizeof(StreamDataCursor::_impl_.hoty_)
      - PROTOBUF_FIELD_OFFSET(StreamDataCursor, _impl_.width_)>(
          reinterpret_cast<char*>(&_impl_.width_),
          reinterpret_cast<char*>(&other->_impl_.width_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamDataCursor::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_snappyv1_2eproto_getter, &descriptor_table_snappyv1_2eproto_once,
      file_level_metadata_snappyv1_2eproto[11]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace snappyv1
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::snappyv1::Property_ValueString*
Arena::CreateMaybeMessage< ::snappyv1::Property_ValueString >(Arena* arena) {
  return Arena::CreateMessageInternal< ::snappyv1::Property_ValueString >(arena);
}
template<> PROTOBUF_NOINLINE ::snappyv1::Property_ValueBool*
Arena::CreateMaybeMessage< ::snappyv1::Property_ValueBool >(Arena* arena) {
  return Arena::CreateMessageInternal< ::snappyv1::Property_ValueBool >(arena);
}
template<> PROTOBUF_NOINLINE ::snappyv1::Property_ValueUint32*
Arena::CreateMaybeMessage< ::snappyv1::Property_ValueUint32 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::snappyv1::Property_ValueUint32 >(arena);
}
template<> PROTOBUF_NOINLINE ::snappyv1::Property_ValueDouble*
Arena::CreateMaybeMessage< ::snappyv1::Property_ValueDouble >(Arena* arena) {
  return Arena::CreateMessageInternal< ::snappyv1::Property_ValueDouble >(arena);
}
template<> PROTOBUF_NOINLINE ::snappyv1::Property*
Arena::CreateMaybeMessage< ::snappyv1::Property >(Arena* arena) {
  return Arena::CreateMessageInternal< ::snappyv1::Property >(arena);
}
template<> PROTOBUF_NOINLINE ::snappyv1::StreamInfo*
Arena::CreateMaybeMessage< ::snappyv1::StreamInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::snappyv1::StreamInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::snappyv1::StreamChange*
Arena::CreateMaybeMessage< ::snappyv1::StreamChange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::snappyv1::StreamChange >(arena);
}
template<> PROTOBUF_NOINLINE ::snappyv1::StreamData*
Arena::CreateMaybeMessage< ::snappyv1::StreamData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::snappyv1::StreamData >(arena);
}
template<> PROTOBUF_NOINLINE ::snappyv1::Message*
Arena::CreateMaybeMessage< ::snappyv1::Message >(Arena* arena) {
  return Arena::CreateMessageInternal< ::snappyv1::Message >(arena);
}
template<> PROTOBUF_NOINLINE ::snappyv1::StreamDataPointer*
Arena::CreateMaybeMessage< ::snappyv1::StreamDataPointer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::snappyv1::StreamDataPointer >(arena);
}
template<> PROTOBUF_NOINLINE ::snappyv1::StreamDataKeyboard*
Arena::CreateMaybeMessage< ::snappyv1::StreamDataKeyboard >(Arena* arena) {
  return Arena::CreateMessageInternal< ::snappyv1::StreamDataKeyboard >(arena);
}
template<> PROTOBUF_NOINLINE ::snappyv1::StreamDataCursor*
Arena::CreateMaybeMessage< ::snappyv1::StreamDataCursor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::snappyv1::StreamDataCursor >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
