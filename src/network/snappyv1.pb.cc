// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: snappyv1.proto

#include "snappyv1.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace snappyv1 {
constexpr Parameter_ValueString::Parameter_ValueString(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct Parameter_ValueStringDefaultTypeInternal {
  constexpr Parameter_ValueStringDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Parameter_ValueStringDefaultTypeInternal() {}
  union {
    Parameter_ValueString _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Parameter_ValueStringDefaultTypeInternal _Parameter_ValueString_default_instance_;
constexpr Parameter_ValueBool::Parameter_ValueBool(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(false){}
struct Parameter_ValueBoolDefaultTypeInternal {
  constexpr Parameter_ValueBoolDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Parameter_ValueBoolDefaultTypeInternal() {}
  union {
    Parameter_ValueBool _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Parameter_ValueBoolDefaultTypeInternal _Parameter_ValueBool_default_instance_;
constexpr Parameter_ValueUint32::Parameter_ValueUint32(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(0u)
  , min_(0u)
  , max_(0u){}
struct Parameter_ValueUint32DefaultTypeInternal {
  constexpr Parameter_ValueUint32DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Parameter_ValueUint32DefaultTypeInternal() {}
  union {
    Parameter_ValueUint32 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Parameter_ValueUint32DefaultTypeInternal _Parameter_ValueUint32_default_instance_;
constexpr Parameter_ValueDouble::Parameter_ValueDouble(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(0)
  , min_(0)
  , max_(0){}
struct Parameter_ValueDoubleDefaultTypeInternal {
  constexpr Parameter_ValueDoubleDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Parameter_ValueDoubleDefaultTypeInternal() {}
  union {
    Parameter_ValueDouble _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Parameter_ValueDoubleDefaultTypeInternal _Parameter_ValueDouble_default_instance_;
constexpr Parameter::Parameter(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : param_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , param_type_(0)

  , _oneof_case_{}{}
struct ParameterDefaultTypeInternal {
  constexpr ParameterDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ParameterDefaultTypeInternal() {}
  union {
    Parameter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ParameterDefaultTypeInternal _Parameter_default_instance_;
constexpr Source::Source(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : parameters_()
  , type_(0)

  , sub_type_(0)
{}
struct SourceDefaultTypeInternal {
  constexpr SourceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SourceDefaultTypeInternal() {}
  union {
    Source _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SourceDefaultTypeInternal _Source_default_instance_;
constexpr Encoder::Encoder(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : parameters_()
  , type_(0)
{}
struct EncoderDefaultTypeInternal {
  constexpr EncoderDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EncoderDefaultTypeInternal() {}
  union {
    Encoder _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EncoderDefaultTypeInternal _Encoder_default_instance_;
constexpr ServerInfo::ServerInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : available_sources_()
  , available_encoders_()
  , platform_(0)
{}
struct ServerInfoDefaultTypeInternal {
  constexpr ServerInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ServerInfoDefaultTypeInternal() {}
  union {
    ServerInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ServerInfoDefaultTypeInternal _ServerInfo_default_instance_;
constexpr StreamsChange_StreamChange::StreamsChange_StreamChange(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : source_(nullptr)
  , encoder_(nullptr)
  , id_(0u)
  , command_(0)
{}
struct StreamsChange_StreamChangeDefaultTypeInternal {
  constexpr StreamsChange_StreamChangeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StreamsChange_StreamChangeDefaultTypeInternal() {}
  union {
    StreamsChange_StreamChange _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StreamsChange_StreamChangeDefaultTypeInternal _StreamsChange_StreamChange_default_instance_;
constexpr StreamsChange::StreamsChange(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : streams_(){}
struct StreamsChangeDefaultTypeInternal {
  constexpr StreamsChangeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StreamsChangeDefaultTypeInternal() {}
  union {
    StreamsChange _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StreamsChangeDefaultTypeInternal _StreamsChange_default_instance_;
constexpr StreamStatistics::StreamStatistics(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : last_frame_(0u)
  , average_frame_qp_(0u)
  , encode_ts_start_ms_(0u)
  , encode_ts_end_ms_(0u)
  , tx_ts_start_ms_(0u)
  , tx_ts_end_ms_(0u){}
struct StreamStatisticsDefaultTypeInternal {
  constexpr StreamStatisticsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StreamStatisticsDefaultTypeInternal() {}
  union {
    StreamStatistics _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StreamStatisticsDefaultTypeInternal _StreamStatistics_default_instance_;
constexpr StreamData::StreamData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : payload_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , stream_id_(0u){}
struct StreamDataDefaultTypeInternal {
  constexpr StreamDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StreamDataDefaultTypeInternal() {}
  union {
    StreamData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StreamDataDefaultTypeInternal _StreamData_default_instance_;
constexpr Message::Message(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : type_(0)

  , _oneof_case_{}{}
struct MessageDefaultTypeInternal {
  constexpr MessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MessageDefaultTypeInternal() {}
  union {
    Message _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MessageDefaultTypeInternal _Message_default_instance_;
}  // namespace snappyv1
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_snappyv1_2eproto[13];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_snappyv1_2eproto[7];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_snappyv1_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_snappyv1_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::snappyv1::Parameter_ValueString, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::snappyv1::Parameter_ValueString, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::snappyv1::Parameter_ValueBool, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::snappyv1::Parameter_ValueBool, value_),
  PROTOBUF_FIELD_OFFSET(::snappyv1::Parameter_ValueUint32, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::snappyv1::Parameter_ValueUint32, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::snappyv1::Parameter_ValueUint32, value_),
  PROTOBUF_FIELD_OFFSET(::snappyv1::Parameter_ValueUint32, min_),
  PROTOBUF_FIELD_OFFSET(::snappyv1::Parameter_ValueUint32, max_),
  ~0u,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::snappyv1::Parameter_ValueDouble, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::snappyv1::Parameter_ValueDouble, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::snappyv1::Parameter_ValueDouble, value_),
  PROTOBUF_FIELD_OFFSET(::snappyv1::Parameter_ValueDouble, min_),
  PROTOBUF_FIELD_OFFSET(::snappyv1::Parameter_ValueDouble, max_),
  ~0u,
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::snappyv1::Parameter, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::snappyv1::Parameter, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::snappyv1::Parameter, param_type_),
  PROTOBUF_FIELD_OFFSET(::snappyv1::Parameter, param_key_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::snappyv1::Parameter, param_value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::snappyv1::Source, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::snappyv1::Source, type_),
  PROTOBUF_FIELD_OFFSET(::snappyv1::Source, sub_type_),
  PROTOBUF_FIELD_OFFSET(::snappyv1::Source, parameters_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::snappyv1::Encoder, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::snappyv1::Encoder, type_),
  PROTOBUF_FIELD_OFFSET(::snappyv1::Encoder, parameters_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::snappyv1::ServerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::snappyv1::ServerInfo, platform_),
  PROTOBUF_FIELD_OFFSET(::snappyv1::ServerInfo, available_sources_),
  PROTOBUF_FIELD_OFFSET(::snappyv1::ServerInfo, available_encoders_),
  PROTOBUF_FIELD_OFFSET(::snappyv1::StreamsChange_StreamChange, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::snappyv1::StreamsChange_StreamChange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::snappyv1::StreamsChange_StreamChange, id_),
  PROTOBUF_FIELD_OFFSET(::snappyv1::StreamsChange_StreamChange, source_),
  PROTOBUF_FIELD_OFFSET(::snappyv1::StreamsChange_StreamChange, encoder_),
  PROTOBUF_FIELD_OFFSET(::snappyv1::StreamsChange_StreamChange, command_),
  ~0u,
  0,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::snappyv1::StreamsChange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::snappyv1::StreamsChange, streams_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::snappyv1::StreamStatistics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::snappyv1::StreamStatistics, last_frame_),
  PROTOBUF_FIELD_OFFSET(::snappyv1::StreamStatistics, average_frame_qp_),
  PROTOBUF_FIELD_OFFSET(::snappyv1::StreamStatistics, encode_ts_start_ms_),
  PROTOBUF_FIELD_OFFSET(::snappyv1::StreamStatistics, encode_ts_end_ms_),
  PROTOBUF_FIELD_OFFSET(::snappyv1::StreamStatistics, tx_ts_start_ms_),
  PROTOBUF_FIELD_OFFSET(::snappyv1::StreamStatistics, tx_ts_end_ms_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::snappyv1::StreamData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::snappyv1::StreamData, stream_id_),
  PROTOBUF_FIELD_OFFSET(::snappyv1::StreamData, payload_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::snappyv1::Message, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::snappyv1::Message, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::snappyv1::Message, type_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::snappyv1::Message, message_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::snappyv1::Parameter_ValueString)},
  { 6, -1, sizeof(::snappyv1::Parameter_ValueBool)},
  { 12, 20, sizeof(::snappyv1::Parameter_ValueUint32)},
  { 23, 31, sizeof(::snappyv1::Parameter_ValueDouble)},
  { 34, -1, sizeof(::snappyv1::Parameter)},
  { 46, -1, sizeof(::snappyv1::Source)},
  { 54, -1, sizeof(::snappyv1::Encoder)},
  { 61, -1, sizeof(::snappyv1::ServerInfo)},
  { 69, 78, sizeof(::snappyv1::StreamsChange_StreamChange)},
  { 82, -1, sizeof(::snappyv1::StreamsChange)},
  { 88, -1, sizeof(::snappyv1::StreamStatistics)},
  { 99, -1, sizeof(::snappyv1::StreamData)},
  { 106, -1, sizeof(::snappyv1::Message)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::snappyv1::_Parameter_ValueString_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::snappyv1::_Parameter_ValueBool_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::snappyv1::_Parameter_ValueUint32_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::snappyv1::_Parameter_ValueDouble_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::snappyv1::_Parameter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::snappyv1::_Source_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::snappyv1::_Encoder_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::snappyv1::_ServerInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::snappyv1::_StreamsChange_StreamChange_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::snappyv1::_StreamsChange_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::snappyv1::_StreamStatistics_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::snappyv1::_StreamData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::snappyv1::_Message_default_instance_),
};

const char descriptor_table_protodef_snappyv1_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016snappyv1.proto\022\010snappyv1\"\230\004\n\tParameter"
  "\022+\n\nparam_type\030\001 \001(\0162\027.snappyv1.Paramete"
  "rType\022\021\n\tparam_key\030\002 \001(\t\0227\n\014value_string"
  "\030\003 \001(\0132\037.snappyv1.Parameter.ValueStringH"
  "\000\0223\n\nvalue_bool\030\004 \001(\0132\035.snappyv1.Paramet"
  "er.ValueBoolH\000\0227\n\014value_uint32\030\005 \001(\0132\037.s"
  "nappyv1.Parameter.ValueUint32H\000\0227\n\014value"
  "_double\030\006 \001(\0132\037.snappyv1.Parameter.Value"
  "DoubleH\000\032\034\n\013ValueString\022\r\n\005value\030\001 \001(\t\032\032"
  "\n\tValueBool\022\r\n\005value\030\001 \001(\010\032P\n\013ValueUint3"
  "2\022\r\n\005value\030\001 \001(\r\022\020\n\003min\030\002 \001(\rH\000\210\001\001\022\020\n\003ma"
  "x\030\003 \001(\rH\001\210\001\001B\006\n\004_minB\006\n\004_max\032P\n\013ValueDou"
  "ble\022\r\n\005value\030\001 \001(\001\022\020\n\003min\030\002 \001(\001H\000\210\001\001\022\020\n\003"
  "max\030\003 \001(\001H\001\210\001\001B\006\n\004_minB\006\n\004_maxB\r\n\013param_"
  "value\"\200\001\n\006Source\022\"\n\004type\030\001 \001(\0162\024.snappyv"
  "1.SourceType\022)\n\010sub_type\030\002 \001(\0162\027.snappyv"
  "1.SourceSubType\022\'\n\nparameters\030\003 \003(\0132\023.sn"
  "appyv1.Parameter\"W\n\007Encoder\022#\n\004type\030\001 \001("
  "\0162\025.snappyv1.EncoderType\022\'\n\nparameters\030\002"
  " \003(\0132\023.snappyv1.Parameter\"\216\001\n\nServerInfo"
  "\022$\n\010platform\030\001 \001(\0162\022.snappyv1.Platform\022+"
  "\n\021available_sources\030\003 \003(\0132\020.snappyv1.Sou"
  "rce\022-\n\022available_encoders\030\004 \003(\0132\021.snappy"
  "v1.Encoder\"\377\001\n\rStreamsChange\0225\n\007streams\030"
  "\002 \003(\0132$.snappyv1.StreamsChange.StreamCha"
  "nge\032\266\001\n\014StreamChange\022\n\n\002id\030\001 \001(\r\022%\n\006sour"
  "ce\030\002 \001(\0132\020.snappyv1.SourceH\000\210\001\001\022\'\n\007encod"
  "er\030\003 \001(\0132\021.snappyv1.EncoderH\001\210\001\001\022\'\n\007comm"
  "and\030\004 \001(\0162\021.snappyv1.CommandH\002\210\001\001B\t\n\007_so"
  "urceB\n\n\010_encoderB\n\n\010_command\"\244\001\n\020StreamS"
  "tatistics\022\022\n\nlast_frame\030\001 \001(\r\022\030\n\020average"
  "_frame_qp\030\002 \001(\r\022\032\n\022encode_ts_start_ms\030\003 "
  "\001(\r\022\030\n\020encode_ts_end_ms\030\004 \001(\r\022\026\n\016tx_ts_s"
  "tart_ms\030\005 \001(\r\022\024\n\014tx_ts_end_ms\030\006 \001(\r\"0\n\nS"
  "treamData\022\021\n\tstream_id\030\001 \001(\r\022\017\n\007payload\030"
  "\002 \001(\014\"\305\001\n\007Message\022#\n\004type\030\001 \001(\0162\025.snappy"
  "v1.MessageType\022+\n\013server_info\030\002 \001(\0132\024.sn"
  "appyv1.ServerInfoH\000\0220\n\rstream_change\030\003 \001"
  "(\0132\027.snappyv1.StreamsChangeH\000\022+\n\013stream_"
  "data\030\004 \001(\0132\024.snappyv1.StreamDataH\000B\t\n\007me"
  "ssage*v\n\010Platform\022\024\n\020PLATFORM_WINDOWS\020\000\022"
  "\022\n\016PLATFORM_LINUX\020\001\022\022\n\016PLATFORM_MACOS\020\002\022"
  "\026\n\022PLATFORM_RASPBERRY\020\003\022\024\n\020PLATFORM_ANDR"
  "OID\020\004*Q\n\nSourceType\022\025\n\021SOURCE_TYPE_VIDEO"
  "\020\000\022\025\n\021SOURCE_TYPE_AUDIO\020\001\022\025\n\021SOURCE_TYPE"
  "_INPUT\020\002*\234\001\n\rSourceSubType\022\027\n\023SOURCE_SUB"
  "_TYPE_X11\020\000\022\033\n\027SOURCE_SUB_TYPE_WAYLAND\020\001"
  "\022\032\n\026SOURCE_SUB_TYPE_CAMERA\020\002\022\034\n\030SOURCE_S"
  "UB_TYPE_KEYBOARD\020\003\022\033\n\027SOURCE_SUB_TYPE_PO"
  "INTER\020\004*\213\001\n\013EncoderType\022\036\n\032ENCODER_TYPE_"
  "H264_SOFTWARE\020\000\022\036\n\032ENCODER_TYPE_H264_HAR"
  "DWARE\020\001\022\035\n\031ENCODER_TYPE_MP3_SOFTWARE\020\002\022\035"
  "\n\031ENCODER_TYPE_MP3_HARDWARE\020\003*U\n\007Command"
  "\022\020\n\014COMMAND_INIT\020\000\022\021\n\rCOMMAND_START\020\001\022\020\n"
  "\014COMMAND_STOP\020\002\022\023\n\017COMMAND_DESTROY\020\003*y\n\r"
  "ParameterType\022\031\n\025PARAMETER_TYPE_STRING\020\000"
  "\022\027\n\023PARAMETER_TYPE_BOOL\020\001\022\031\n\025PARAMETER_T"
  "YPE_UINT32\020\002\022\031\n\025PARAMETER_TYPE_DOUBLE\020\003*"
  "j\n\013MessageType\022\034\n\030MESSAGE_TYPE_SERVER_IN"
  "FO\020\000\022\037\n\033MESSAGE_TYPE_STREAMS_CHANGE\020\001\022\034\n"
  "\030MESSAGE_TYPE_STREAM_DATA\020\002b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_snappyv1_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_snappyv1_2eproto = {
  false, false, 2435, descriptor_table_protodef_snappyv1_2eproto, "snappyv1.proto", 
  &descriptor_table_snappyv1_2eproto_once, nullptr, 0, 13,
  schemas, file_default_instances, TableStruct_snappyv1_2eproto::offsets,
  file_level_metadata_snappyv1_2eproto, file_level_enum_descriptors_snappyv1_2eproto, file_level_service_descriptors_snappyv1_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_snappyv1_2eproto_getter() {
  return &descriptor_table_snappyv1_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_snappyv1_2eproto(&descriptor_table_snappyv1_2eproto);
namespace snappyv1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Platform_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_snappyv1_2eproto);
  return file_level_enum_descriptors_snappyv1_2eproto[0];
}
bool Platform_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SourceType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_snappyv1_2eproto);
  return file_level_enum_descriptors_snappyv1_2eproto[1];
}
bool SourceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SourceSubType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_snappyv1_2eproto);
  return file_level_enum_descriptors_snappyv1_2eproto[2];
}
bool SourceSubType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EncoderType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_snappyv1_2eproto);
  return file_level_enum_descriptors_snappyv1_2eproto[3];
}
bool EncoderType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Command_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_snappyv1_2eproto);
  return file_level_enum_descriptors_snappyv1_2eproto[4];
}
bool Command_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ParameterType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_snappyv1_2eproto);
  return file_level_enum_descriptors_snappyv1_2eproto[5];
}
bool ParameterType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MessageType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_snappyv1_2eproto);
  return file_level_enum_descriptors_snappyv1_2eproto[6];
}
bool MessageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Parameter_ValueString::_Internal {
 public:
};

Parameter_ValueString::Parameter_ValueString(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:snappyv1.Parameter.ValueString)
}
Parameter_ValueString::Parameter_ValueString(const Parameter_ValueString& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:snappyv1.Parameter.ValueString)
}

void Parameter_ValueString::SharedCtor() {
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Parameter_ValueString::~Parameter_ValueString() {
  // @@protoc_insertion_point(destructor:snappyv1.Parameter.ValueString)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Parameter_ValueString::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Parameter_ValueString::ArenaDtor(void* object) {
  Parameter_ValueString* _this = reinterpret_cast< Parameter_ValueString* >(object);
  (void)_this;
}
void Parameter_ValueString::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Parameter_ValueString::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Parameter_ValueString::Clear() {
// @@protoc_insertion_point(message_clear_start:snappyv1.Parameter.ValueString)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Parameter_ValueString::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "snappyv1.Parameter.ValueString.value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Parameter_ValueString::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:snappyv1.Parameter.ValueString)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string value = 1;
  if (!this->value().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "snappyv1.Parameter.ValueString.value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:snappyv1.Parameter.ValueString)
  return target;
}

size_t Parameter_ValueString::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:snappyv1.Parameter.ValueString)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string value = 1;
  if (!this->value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Parameter_ValueString::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:snappyv1.Parameter.ValueString)
  GOOGLE_DCHECK_NE(&from, this);
  const Parameter_ValueString* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Parameter_ValueString>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:snappyv1.Parameter.ValueString)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:snappyv1.Parameter.ValueString)
    MergeFrom(*source);
  }
}

void Parameter_ValueString::MergeFrom(const Parameter_ValueString& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:snappyv1.Parameter.ValueString)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.value().empty()) {
    _internal_set_value(from._internal_value());
  }
}

void Parameter_ValueString::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:snappyv1.Parameter.ValueString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Parameter_ValueString::CopyFrom(const Parameter_ValueString& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:snappyv1.Parameter.ValueString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Parameter_ValueString::IsInitialized() const {
  return true;
}

void Parameter_ValueString::InternalSwap(Parameter_ValueString* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &value_, GetArenaForAllocation(),
      &other->value_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Parameter_ValueString::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_snappyv1_2eproto_getter, &descriptor_table_snappyv1_2eproto_once,
      file_level_metadata_snappyv1_2eproto[0]);
}

// ===================================================================

class Parameter_ValueBool::_Internal {
 public:
};

Parameter_ValueBool::Parameter_ValueBool(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:snappyv1.Parameter.ValueBool)
}
Parameter_ValueBool::Parameter_ValueBool(const Parameter_ValueBool& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:snappyv1.Parameter.ValueBool)
}

void Parameter_ValueBool::SharedCtor() {
value_ = false;
}

Parameter_ValueBool::~Parameter_ValueBool() {
  // @@protoc_insertion_point(destructor:snappyv1.Parameter.ValueBool)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Parameter_ValueBool::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Parameter_ValueBool::ArenaDtor(void* object) {
  Parameter_ValueBool* _this = reinterpret_cast< Parameter_ValueBool* >(object);
  (void)_this;
}
void Parameter_ValueBool::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Parameter_ValueBool::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Parameter_ValueBool::Clear() {
// @@protoc_insertion_point(message_clear_start:snappyv1.Parameter.ValueBool)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Parameter_ValueBool::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Parameter_ValueBool::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:snappyv1.Parameter.ValueBool)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool value = 1;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:snappyv1.Parameter.ValueBool)
  return target;
}

size_t Parameter_ValueBool::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:snappyv1.Parameter.ValueBool)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool value = 1;
  if (this->value() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Parameter_ValueBool::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:snappyv1.Parameter.ValueBool)
  GOOGLE_DCHECK_NE(&from, this);
  const Parameter_ValueBool* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Parameter_ValueBool>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:snappyv1.Parameter.ValueBool)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:snappyv1.Parameter.ValueBool)
    MergeFrom(*source);
  }
}

void Parameter_ValueBool::MergeFrom(const Parameter_ValueBool& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:snappyv1.Parameter.ValueBool)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
}

void Parameter_ValueBool::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:snappyv1.Parameter.ValueBool)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Parameter_ValueBool::CopyFrom(const Parameter_ValueBool& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:snappyv1.Parameter.ValueBool)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Parameter_ValueBool::IsInitialized() const {
  return true;
}

void Parameter_ValueBool::InternalSwap(Parameter_ValueBool* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Parameter_ValueBool::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_snappyv1_2eproto_getter, &descriptor_table_snappyv1_2eproto_once,
      file_level_metadata_snappyv1_2eproto[1]);
}

// ===================================================================

class Parameter_ValueUint32::_Internal {
 public:
  using HasBits = decltype(std::declval<Parameter_ValueUint32>()._has_bits_);
  static void set_has_min(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_max(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Parameter_ValueUint32::Parameter_ValueUint32(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:snappyv1.Parameter.ValueUint32)
}
Parameter_ValueUint32::Parameter_ValueUint32(const Parameter_ValueUint32& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&value_, &from.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_) -
    reinterpret_cast<char*>(&value_)) + sizeof(max_));
  // @@protoc_insertion_point(copy_constructor:snappyv1.Parameter.ValueUint32)
}

void Parameter_ValueUint32::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&value_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&max_) -
    reinterpret_cast<char*>(&value_)) + sizeof(max_));
}

Parameter_ValueUint32::~Parameter_ValueUint32() {
  // @@protoc_insertion_point(destructor:snappyv1.Parameter.ValueUint32)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Parameter_ValueUint32::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Parameter_ValueUint32::ArenaDtor(void* object) {
  Parameter_ValueUint32* _this = reinterpret_cast< Parameter_ValueUint32* >(object);
  (void)_this;
}
void Parameter_ValueUint32::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Parameter_ValueUint32::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Parameter_ValueUint32::Clear() {
// @@protoc_insertion_point(message_clear_start:snappyv1.Parameter.ValueUint32)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = 0u;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&min_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_) -
        reinterpret_cast<char*>(&min_)) + sizeof(max_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Parameter_ValueUint32::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 min = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_min(&has_bits);
          min_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 max = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_max(&has_bits);
          max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Parameter_ValueUint32::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:snappyv1.Parameter.ValueUint32)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 value = 1;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_value(), target);
  }

  // optional uint32 min = 2;
  if (_internal_has_min()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_min(), target);
  }

  // optional uint32 max = 3;
  if (_internal_has_max()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_max(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:snappyv1.Parameter.ValueUint32)
  return target;
}

size_t Parameter_ValueUint32::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:snappyv1.Parameter.ValueUint32)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 value = 1;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_value());
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 min = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_min());
    }

    // optional uint32 max = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Parameter_ValueUint32::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:snappyv1.Parameter.ValueUint32)
  GOOGLE_DCHECK_NE(&from, this);
  const Parameter_ValueUint32* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Parameter_ValueUint32>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:snappyv1.Parameter.ValueUint32)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:snappyv1.Parameter.ValueUint32)
    MergeFrom(*source);
  }
}

void Parameter_ValueUint32::MergeFrom(const Parameter_ValueUint32& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:snappyv1.Parameter.ValueUint32)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      min_ = from.min_;
    }
    if (cached_has_bits & 0x00000002u) {
      max_ = from.max_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Parameter_ValueUint32::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:snappyv1.Parameter.ValueUint32)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Parameter_ValueUint32::CopyFrom(const Parameter_ValueUint32& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:snappyv1.Parameter.ValueUint32)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Parameter_ValueUint32::IsInitialized() const {
  return true;
}

void Parameter_ValueUint32::InternalSwap(Parameter_ValueUint32* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Parameter_ValueUint32, max_)
      + sizeof(Parameter_ValueUint32::max_)
      - PROTOBUF_FIELD_OFFSET(Parameter_ValueUint32, value_)>(
          reinterpret_cast<char*>(&value_),
          reinterpret_cast<char*>(&other->value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Parameter_ValueUint32::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_snappyv1_2eproto_getter, &descriptor_table_snappyv1_2eproto_once,
      file_level_metadata_snappyv1_2eproto[2]);
}

// ===================================================================

class Parameter_ValueDouble::_Internal {
 public:
  using HasBits = decltype(std::declval<Parameter_ValueDouble>()._has_bits_);
  static void set_has_min(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_max(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Parameter_ValueDouble::Parameter_ValueDouble(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:snappyv1.Parameter.ValueDouble)
}
Parameter_ValueDouble::Parameter_ValueDouble(const Parameter_ValueDouble& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&value_, &from.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_) -
    reinterpret_cast<char*>(&value_)) + sizeof(max_));
  // @@protoc_insertion_point(copy_constructor:snappyv1.Parameter.ValueDouble)
}

void Parameter_ValueDouble::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&value_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&max_) -
    reinterpret_cast<char*>(&value_)) + sizeof(max_));
}

Parameter_ValueDouble::~Parameter_ValueDouble() {
  // @@protoc_insertion_point(destructor:snappyv1.Parameter.ValueDouble)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Parameter_ValueDouble::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Parameter_ValueDouble::ArenaDtor(void* object) {
  Parameter_ValueDouble* _this = reinterpret_cast< Parameter_ValueDouble* >(object);
  (void)_this;
}
void Parameter_ValueDouble::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Parameter_ValueDouble::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Parameter_ValueDouble::Clear() {
// @@protoc_insertion_point(message_clear_start:snappyv1.Parameter.ValueDouble)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = 0;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&min_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_) -
        reinterpret_cast<char*>(&min_)) + sizeof(max_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Parameter_ValueDouble::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double min = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_min(&has_bits);
          min_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double max = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_max(&has_bits);
          max_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Parameter_ValueDouble::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:snappyv1.Parameter.ValueDouble)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double value = 1;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_value(), target);
  }

  // optional double min = 2;
  if (_internal_has_min()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_min(), target);
  }

  // optional double max = 3;
  if (_internal_has_max()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_max(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:snappyv1.Parameter.ValueDouble)
  return target;
}

size_t Parameter_ValueDouble::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:snappyv1.Parameter.ValueDouble)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double value = 1;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    total_size += 1 + 8;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double min = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double max = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Parameter_ValueDouble::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:snappyv1.Parameter.ValueDouble)
  GOOGLE_DCHECK_NE(&from, this);
  const Parameter_ValueDouble* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Parameter_ValueDouble>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:snappyv1.Parameter.ValueDouble)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:snappyv1.Parameter.ValueDouble)
    MergeFrom(*source);
  }
}

void Parameter_ValueDouble::MergeFrom(const Parameter_ValueDouble& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:snappyv1.Parameter.ValueDouble)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.value() <= 0 && from.value() >= 0)) {
    _internal_set_value(from._internal_value());
  }
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      min_ = from.min_;
    }
    if (cached_has_bits & 0x00000002u) {
      max_ = from.max_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Parameter_ValueDouble::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:snappyv1.Parameter.ValueDouble)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Parameter_ValueDouble::CopyFrom(const Parameter_ValueDouble& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:snappyv1.Parameter.ValueDouble)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Parameter_ValueDouble::IsInitialized() const {
  return true;
}

void Parameter_ValueDouble::InternalSwap(Parameter_ValueDouble* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Parameter_ValueDouble, max_)
      + sizeof(Parameter_ValueDouble::max_)
      - PROTOBUF_FIELD_OFFSET(Parameter_ValueDouble, value_)>(
          reinterpret_cast<char*>(&value_),
          reinterpret_cast<char*>(&other->value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Parameter_ValueDouble::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_snappyv1_2eproto_getter, &descriptor_table_snappyv1_2eproto_once,
      file_level_metadata_snappyv1_2eproto[3]);
}

// ===================================================================

class Parameter::_Internal {
 public:
  static const ::snappyv1::Parameter_ValueString& value_string(const Parameter* msg);
  static const ::snappyv1::Parameter_ValueBool& value_bool(const Parameter* msg);
  static const ::snappyv1::Parameter_ValueUint32& value_uint32(const Parameter* msg);
  static const ::snappyv1::Parameter_ValueDouble& value_double(const Parameter* msg);
};

const ::snappyv1::Parameter_ValueString&
Parameter::_Internal::value_string(const Parameter* msg) {
  return *msg->param_value_.value_string_;
}
const ::snappyv1::Parameter_ValueBool&
Parameter::_Internal::value_bool(const Parameter* msg) {
  return *msg->param_value_.value_bool_;
}
const ::snappyv1::Parameter_ValueUint32&
Parameter::_Internal::value_uint32(const Parameter* msg) {
  return *msg->param_value_.value_uint32_;
}
const ::snappyv1::Parameter_ValueDouble&
Parameter::_Internal::value_double(const Parameter* msg) {
  return *msg->param_value_.value_double_;
}
void Parameter::set_allocated_value_string(::snappyv1::Parameter_ValueString* value_string) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_param_value();
  if (value_string) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::snappyv1::Parameter_ValueString>::GetOwningArena(value_string);
    if (message_arena != submessage_arena) {
      value_string = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value_string, submessage_arena);
    }
    set_has_value_string();
    param_value_.value_string_ = value_string;
  }
  // @@protoc_insertion_point(field_set_allocated:snappyv1.Parameter.value_string)
}
void Parameter::set_allocated_value_bool(::snappyv1::Parameter_ValueBool* value_bool) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_param_value();
  if (value_bool) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::snappyv1::Parameter_ValueBool>::GetOwningArena(value_bool);
    if (message_arena != submessage_arena) {
      value_bool = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value_bool, submessage_arena);
    }
    set_has_value_bool();
    param_value_.value_bool_ = value_bool;
  }
  // @@protoc_insertion_point(field_set_allocated:snappyv1.Parameter.value_bool)
}
void Parameter::set_allocated_value_uint32(::snappyv1::Parameter_ValueUint32* value_uint32) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_param_value();
  if (value_uint32) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::snappyv1::Parameter_ValueUint32>::GetOwningArena(value_uint32);
    if (message_arena != submessage_arena) {
      value_uint32 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value_uint32, submessage_arena);
    }
    set_has_value_uint32();
    param_value_.value_uint32_ = value_uint32;
  }
  // @@protoc_insertion_point(field_set_allocated:snappyv1.Parameter.value_uint32)
}
void Parameter::set_allocated_value_double(::snappyv1::Parameter_ValueDouble* value_double) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_param_value();
  if (value_double) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::snappyv1::Parameter_ValueDouble>::GetOwningArena(value_double);
    if (message_arena != submessage_arena) {
      value_double = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value_double, submessage_arena);
    }
    set_has_value_double();
    param_value_.value_double_ = value_double;
  }
  // @@protoc_insertion_point(field_set_allocated:snappyv1.Parameter.value_double)
}
Parameter::Parameter(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:snappyv1.Parameter)
}
Parameter::Parameter(const Parameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  param_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_param_key().empty()) {
    param_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_param_key(), 
      GetArenaForAllocation());
  }
  param_type_ = from.param_type_;
  clear_has_param_value();
  switch (from.param_value_case()) {
    case kValueString: {
      _internal_mutable_value_string()->::snappyv1::Parameter_ValueString::MergeFrom(from._internal_value_string());
      break;
    }
    case kValueBool: {
      _internal_mutable_value_bool()->::snappyv1::Parameter_ValueBool::MergeFrom(from._internal_value_bool());
      break;
    }
    case kValueUint32: {
      _internal_mutable_value_uint32()->::snappyv1::Parameter_ValueUint32::MergeFrom(from._internal_value_uint32());
      break;
    }
    case kValueDouble: {
      _internal_mutable_value_double()->::snappyv1::Parameter_ValueDouble::MergeFrom(from._internal_value_double());
      break;
    }
    case PARAM_VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:snappyv1.Parameter)
}

void Parameter::SharedCtor() {
param_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
param_type_ = 0;
clear_has_param_value();
}

Parameter::~Parameter() {
  // @@protoc_insertion_point(destructor:snappyv1.Parameter)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Parameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  param_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_param_value()) {
    clear_param_value();
  }
}

void Parameter::ArenaDtor(void* object) {
  Parameter* _this = reinterpret_cast< Parameter* >(object);
  (void)_this;
}
void Parameter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Parameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Parameter::clear_param_value() {
// @@protoc_insertion_point(one_of_clear_start:snappyv1.Parameter)
  switch (param_value_case()) {
    case kValueString: {
      if (GetArenaForAllocation() == nullptr) {
        delete param_value_.value_string_;
      }
      break;
    }
    case kValueBool: {
      if (GetArenaForAllocation() == nullptr) {
        delete param_value_.value_bool_;
      }
      break;
    }
    case kValueUint32: {
      if (GetArenaForAllocation() == nullptr) {
        delete param_value_.value_uint32_;
      }
      break;
    }
    case kValueDouble: {
      if (GetArenaForAllocation() == nullptr) {
        delete param_value_.value_double_;
      }
      break;
    }
    case PARAM_VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PARAM_VALUE_NOT_SET;
}


void Parameter::Clear() {
// @@protoc_insertion_point(message_clear_start:snappyv1.Parameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  param_key_.ClearToEmpty();
  param_type_ = 0;
  clear_param_value();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Parameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .snappyv1.ParameterType param_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_param_type(static_cast<::snappyv1::ParameterType>(val));
        } else goto handle_unusual;
        continue;
      // string param_key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_param_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "snappyv1.Parameter.param_key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .snappyv1.Parameter.ValueString value_string = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_value_string(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .snappyv1.Parameter.ValueBool value_bool = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_value_bool(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .snappyv1.Parameter.ValueUint32 value_uint32 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_value_uint32(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .snappyv1.Parameter.ValueDouble value_double = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_value_double(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Parameter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:snappyv1.Parameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .snappyv1.ParameterType param_type = 1;
  if (this->param_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_param_type(), target);
  }

  // string param_key = 2;
  if (!this->param_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_param_key().data(), static_cast<int>(this->_internal_param_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "snappyv1.Parameter.param_key");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_param_key(), target);
  }

  // .snappyv1.Parameter.ValueString value_string = 3;
  if (_internal_has_value_string()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::value_string(this), target, stream);
  }

  // .snappyv1.Parameter.ValueBool value_bool = 4;
  if (_internal_has_value_bool()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::value_bool(this), target, stream);
  }

  // .snappyv1.Parameter.ValueUint32 value_uint32 = 5;
  if (_internal_has_value_uint32()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::value_uint32(this), target, stream);
  }

  // .snappyv1.Parameter.ValueDouble value_double = 6;
  if (_internal_has_value_double()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::value_double(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:snappyv1.Parameter)
  return target;
}

size_t Parameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:snappyv1.Parameter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string param_key = 2;
  if (!this->param_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_param_key());
  }

  // .snappyv1.ParameterType param_type = 1;
  if (this->param_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_param_type());
  }

  switch (param_value_case()) {
    // .snappyv1.Parameter.ValueString value_string = 3;
    case kValueString: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *param_value_.value_string_);
      break;
    }
    // .snappyv1.Parameter.ValueBool value_bool = 4;
    case kValueBool: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *param_value_.value_bool_);
      break;
    }
    // .snappyv1.Parameter.ValueUint32 value_uint32 = 5;
    case kValueUint32: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *param_value_.value_uint32_);
      break;
    }
    // .snappyv1.Parameter.ValueDouble value_double = 6;
    case kValueDouble: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *param_value_.value_double_);
      break;
    }
    case PARAM_VALUE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Parameter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:snappyv1.Parameter)
  GOOGLE_DCHECK_NE(&from, this);
  const Parameter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Parameter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:snappyv1.Parameter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:snappyv1.Parameter)
    MergeFrom(*source);
  }
}

void Parameter::MergeFrom(const Parameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:snappyv1.Parameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.param_key().empty()) {
    _internal_set_param_key(from._internal_param_key());
  }
  if (from.param_type() != 0) {
    _internal_set_param_type(from._internal_param_type());
  }
  switch (from.param_value_case()) {
    case kValueString: {
      _internal_mutable_value_string()->::snappyv1::Parameter_ValueString::MergeFrom(from._internal_value_string());
      break;
    }
    case kValueBool: {
      _internal_mutable_value_bool()->::snappyv1::Parameter_ValueBool::MergeFrom(from._internal_value_bool());
      break;
    }
    case kValueUint32: {
      _internal_mutable_value_uint32()->::snappyv1::Parameter_ValueUint32::MergeFrom(from._internal_value_uint32());
      break;
    }
    case kValueDouble: {
      _internal_mutable_value_double()->::snappyv1::Parameter_ValueDouble::MergeFrom(from._internal_value_double());
      break;
    }
    case PARAM_VALUE_NOT_SET: {
      break;
    }
  }
}

void Parameter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:snappyv1.Parameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Parameter::CopyFrom(const Parameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:snappyv1.Parameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Parameter::IsInitialized() const {
  return true;
}

void Parameter::InternalSwap(Parameter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &param_key_, GetArenaForAllocation(),
      &other->param_key_, other->GetArenaForAllocation()
  );
  swap(param_type_, other->param_type_);
  swap(param_value_, other->param_value_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Parameter::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_snappyv1_2eproto_getter, &descriptor_table_snappyv1_2eproto_once,
      file_level_metadata_snappyv1_2eproto[4]);
}

// ===================================================================

class Source::_Internal {
 public:
};

Source::Source(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  parameters_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:snappyv1.Source)
}
Source::Source(const Source& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      parameters_(from.parameters_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&sub_type_) -
    reinterpret_cast<char*>(&type_)) + sizeof(sub_type_));
  // @@protoc_insertion_point(copy_constructor:snappyv1.Source)
}

void Source::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&sub_type_) -
    reinterpret_cast<char*>(&type_)) + sizeof(sub_type_));
}

Source::~Source() {
  // @@protoc_insertion_point(destructor:snappyv1.Source)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Source::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Source::ArenaDtor(void* object) {
  Source* _this = reinterpret_cast< Source* >(object);
  (void)_this;
}
void Source::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Source::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Source::Clear() {
// @@protoc_insertion_point(message_clear_start:snappyv1.Source)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  parameters_.Clear();
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sub_type_) -
      reinterpret_cast<char*>(&type_)) + sizeof(sub_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Source::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .snappyv1.SourceType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::snappyv1::SourceType>(val));
        } else goto handle_unusual;
        continue;
      // .snappyv1.SourceSubType sub_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_sub_type(static_cast<::snappyv1::SourceSubType>(val));
        } else goto handle_unusual;
        continue;
      // repeated .snappyv1.Parameter parameters = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_parameters(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Source::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:snappyv1.Source)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .snappyv1.SourceType type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // .snappyv1.SourceSubType sub_type = 2;
  if (this->sub_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_sub_type(), target);
  }

  // repeated .snappyv1.Parameter parameters = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_parameters_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_parameters(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:snappyv1.Source)
  return target;
}

size_t Source::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:snappyv1.Source)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .snappyv1.Parameter parameters = 3;
  total_size += 1UL * this->_internal_parameters_size();
  for (const auto& msg : this->parameters_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .snappyv1.SourceType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // .snappyv1.SourceSubType sub_type = 2;
  if (this->sub_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_sub_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Source::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:snappyv1.Source)
  GOOGLE_DCHECK_NE(&from, this);
  const Source* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Source>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:snappyv1.Source)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:snappyv1.Source)
    MergeFrom(*source);
  }
}

void Source::MergeFrom(const Source& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:snappyv1.Source)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  parameters_.MergeFrom(from.parameters_);
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.sub_type() != 0) {
    _internal_set_sub_type(from._internal_sub_type());
  }
}

void Source::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:snappyv1.Source)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Source::CopyFrom(const Source& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:snappyv1.Source)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Source::IsInitialized() const {
  return true;
}

void Source::InternalSwap(Source* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  parameters_.InternalSwap(&other->parameters_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Source, sub_type_)
      + sizeof(Source::sub_type_)
      - PROTOBUF_FIELD_OFFSET(Source, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Source::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_snappyv1_2eproto_getter, &descriptor_table_snappyv1_2eproto_once,
      file_level_metadata_snappyv1_2eproto[5]);
}

// ===================================================================

class Encoder::_Internal {
 public:
};

Encoder::Encoder(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  parameters_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:snappyv1.Encoder)
}
Encoder::Encoder(const Encoder& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      parameters_(from.parameters_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:snappyv1.Encoder)
}

void Encoder::SharedCtor() {
type_ = 0;
}

Encoder::~Encoder() {
  // @@protoc_insertion_point(destructor:snappyv1.Encoder)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Encoder::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Encoder::ArenaDtor(void* object) {
  Encoder* _this = reinterpret_cast< Encoder* >(object);
  (void)_this;
}
void Encoder::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Encoder::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Encoder::Clear() {
// @@protoc_insertion_point(message_clear_start:snappyv1.Encoder)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  parameters_.Clear();
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Encoder::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .snappyv1.EncoderType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::snappyv1::EncoderType>(val));
        } else goto handle_unusual;
        continue;
      // repeated .snappyv1.Parameter parameters = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_parameters(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Encoder::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:snappyv1.Encoder)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .snappyv1.EncoderType type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // repeated .snappyv1.Parameter parameters = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_parameters_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_parameters(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:snappyv1.Encoder)
  return target;
}

size_t Encoder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:snappyv1.Encoder)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .snappyv1.Parameter parameters = 2;
  total_size += 1UL * this->_internal_parameters_size();
  for (const auto& msg : this->parameters_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .snappyv1.EncoderType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Encoder::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:snappyv1.Encoder)
  GOOGLE_DCHECK_NE(&from, this);
  const Encoder* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Encoder>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:snappyv1.Encoder)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:snappyv1.Encoder)
    MergeFrom(*source);
  }
}

void Encoder::MergeFrom(const Encoder& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:snappyv1.Encoder)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  parameters_.MergeFrom(from.parameters_);
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void Encoder::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:snappyv1.Encoder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Encoder::CopyFrom(const Encoder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:snappyv1.Encoder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Encoder::IsInitialized() const {
  return true;
}

void Encoder::InternalSwap(Encoder* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  parameters_.InternalSwap(&other->parameters_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Encoder::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_snappyv1_2eproto_getter, &descriptor_table_snappyv1_2eproto_once,
      file_level_metadata_snappyv1_2eproto[6]);
}

// ===================================================================

class ServerInfo::_Internal {
 public:
};

ServerInfo::ServerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  available_sources_(arena),
  available_encoders_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:snappyv1.ServerInfo)
}
ServerInfo::ServerInfo(const ServerInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      available_sources_(from.available_sources_),
      available_encoders_(from.available_encoders_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  platform_ = from.platform_;
  // @@protoc_insertion_point(copy_constructor:snappyv1.ServerInfo)
}

void ServerInfo::SharedCtor() {
platform_ = 0;
}

ServerInfo::~ServerInfo() {
  // @@protoc_insertion_point(destructor:snappyv1.ServerInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ServerInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ServerInfo::ArenaDtor(void* object) {
  ServerInfo* _this = reinterpret_cast< ServerInfo* >(object);
  (void)_this;
}
void ServerInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ServerInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ServerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:snappyv1.ServerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  available_sources_.Clear();
  available_encoders_.Clear();
  platform_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .snappyv1.Platform platform = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_platform(static_cast<::snappyv1::Platform>(val));
        } else goto handle_unusual;
        continue;
      // repeated .snappyv1.Source available_sources = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_available_sources(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .snappyv1.Encoder available_encoders = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_available_encoders(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServerInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:snappyv1.ServerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .snappyv1.Platform platform = 1;
  if (this->platform() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_platform(), target);
  }

  // repeated .snappyv1.Source available_sources = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_available_sources_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_available_sources(i), target, stream);
  }

  // repeated .snappyv1.Encoder available_encoders = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_available_encoders_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_available_encoders(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:snappyv1.ServerInfo)
  return target;
}

size_t ServerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:snappyv1.ServerInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .snappyv1.Source available_sources = 3;
  total_size += 1UL * this->_internal_available_sources_size();
  for (const auto& msg : this->available_sources_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .snappyv1.Encoder available_encoders = 4;
  total_size += 1UL * this->_internal_available_encoders_size();
  for (const auto& msg : this->available_encoders_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .snappyv1.Platform platform = 1;
  if (this->platform() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_platform());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:snappyv1.ServerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServerInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:snappyv1.ServerInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:snappyv1.ServerInfo)
    MergeFrom(*source);
  }
}

void ServerInfo::MergeFrom(const ServerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:snappyv1.ServerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  available_sources_.MergeFrom(from.available_sources_);
  available_encoders_.MergeFrom(from.available_encoders_);
  if (from.platform() != 0) {
    _internal_set_platform(from._internal_platform());
  }
}

void ServerInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:snappyv1.ServerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerInfo::CopyFrom(const ServerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:snappyv1.ServerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerInfo::IsInitialized() const {
  return true;
}

void ServerInfo::InternalSwap(ServerInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  available_sources_.InternalSwap(&other->available_sources_);
  available_encoders_.InternalSwap(&other->available_encoders_);
  swap(platform_, other->platform_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_snappyv1_2eproto_getter, &descriptor_table_snappyv1_2eproto_once,
      file_level_metadata_snappyv1_2eproto[7]);
}

// ===================================================================

class StreamsChange_StreamChange::_Internal {
 public:
  using HasBits = decltype(std::declval<StreamsChange_StreamChange>()._has_bits_);
  static const ::snappyv1::Source& source(const StreamsChange_StreamChange* msg);
  static void set_has_source(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::snappyv1::Encoder& encoder(const StreamsChange_StreamChange* msg);
  static void set_has_encoder(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_command(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::snappyv1::Source&
StreamsChange_StreamChange::_Internal::source(const StreamsChange_StreamChange* msg) {
  return *msg->source_;
}
const ::snappyv1::Encoder&
StreamsChange_StreamChange::_Internal::encoder(const StreamsChange_StreamChange* msg) {
  return *msg->encoder_;
}
StreamsChange_StreamChange::StreamsChange_StreamChange(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:snappyv1.StreamsChange.StreamChange)
}
StreamsChange_StreamChange::StreamsChange_StreamChange(const StreamsChange_StreamChange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_source()) {
    source_ = new ::snappyv1::Source(*from.source_);
  } else {
    source_ = nullptr;
  }
  if (from._internal_has_encoder()) {
    encoder_ = new ::snappyv1::Encoder(*from.encoder_);
  } else {
    encoder_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&command_) -
    reinterpret_cast<char*>(&id_)) + sizeof(command_));
  // @@protoc_insertion_point(copy_constructor:snappyv1.StreamsChange.StreamChange)
}

void StreamsChange_StreamChange::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&source_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&command_) -
    reinterpret_cast<char*>(&source_)) + sizeof(command_));
}

StreamsChange_StreamChange::~StreamsChange_StreamChange() {
  // @@protoc_insertion_point(destructor:snappyv1.StreamsChange.StreamChange)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StreamsChange_StreamChange::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete source_;
  if (this != internal_default_instance()) delete encoder_;
}

void StreamsChange_StreamChange::ArenaDtor(void* object) {
  StreamsChange_StreamChange* _this = reinterpret_cast< StreamsChange_StreamChange* >(object);
  (void)_this;
}
void StreamsChange_StreamChange::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StreamsChange_StreamChange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StreamsChange_StreamChange::Clear() {
// @@protoc_insertion_point(message_clear_start:snappyv1.StreamsChange.StreamChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(source_ != nullptr);
      source_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(encoder_ != nullptr);
      encoder_->Clear();
    }
  }
  id_ = 0u;
  command_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamsChange_StreamChange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .snappyv1.Source source = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_source(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .snappyv1.Encoder encoder = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_encoder(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .snappyv1.Command command = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_command(static_cast<::snappyv1::Command>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StreamsChange_StreamChange::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:snappyv1.StreamsChange.StreamChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // optional .snappyv1.Source source = 2;
  if (_internal_has_source()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::source(this), target, stream);
  }

  // optional .snappyv1.Encoder encoder = 3;
  if (_internal_has_encoder()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::encoder(this), target, stream);
  }

  // optional .snappyv1.Command command = 4;
  if (_internal_has_command()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_command(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:snappyv1.StreamsChange.StreamChange)
  return target;
}

size_t StreamsChange_StreamChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:snappyv1.StreamsChange.StreamChange)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .snappyv1.Source source = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *source_);
    }

    // optional .snappyv1.Encoder encoder = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *encoder_);
    }

  }
  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  // optional .snappyv1.Command command = 4;
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_command());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StreamsChange_StreamChange::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:snappyv1.StreamsChange.StreamChange)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamsChange_StreamChange* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StreamsChange_StreamChange>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:snappyv1.StreamsChange.StreamChange)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:snappyv1.StreamsChange.StreamChange)
    MergeFrom(*source);
  }
}

void StreamsChange_StreamChange::MergeFrom(const StreamsChange_StreamChange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:snappyv1.StreamsChange.StreamChange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_source()->::snappyv1::Source::MergeFrom(from._internal_source());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_encoder()->::snappyv1::Encoder::MergeFrom(from._internal_encoder());
    }
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (cached_has_bits & 0x00000004u) {
    _internal_set_command(from._internal_command());
  }
}

void StreamsChange_StreamChange::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:snappyv1.StreamsChange.StreamChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamsChange_StreamChange::CopyFrom(const StreamsChange_StreamChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:snappyv1.StreamsChange.StreamChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamsChange_StreamChange::IsInitialized() const {
  return true;
}

void StreamsChange_StreamChange::InternalSwap(StreamsChange_StreamChange* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StreamsChange_StreamChange, command_)
      + sizeof(StreamsChange_StreamChange::command_)
      - PROTOBUF_FIELD_OFFSET(StreamsChange_StreamChange, source_)>(
          reinterpret_cast<char*>(&source_),
          reinterpret_cast<char*>(&other->source_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamsChange_StreamChange::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_snappyv1_2eproto_getter, &descriptor_table_snappyv1_2eproto_once,
      file_level_metadata_snappyv1_2eproto[8]);
}

// ===================================================================

class StreamsChange::_Internal {
 public:
};

StreamsChange::StreamsChange(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  streams_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:snappyv1.StreamsChange)
}
StreamsChange::StreamsChange(const StreamsChange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      streams_(from.streams_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:snappyv1.StreamsChange)
}

void StreamsChange::SharedCtor() {
}

StreamsChange::~StreamsChange() {
  // @@protoc_insertion_point(destructor:snappyv1.StreamsChange)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StreamsChange::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void StreamsChange::ArenaDtor(void* object) {
  StreamsChange* _this = reinterpret_cast< StreamsChange* >(object);
  (void)_this;
}
void StreamsChange::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StreamsChange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StreamsChange::Clear() {
// @@protoc_insertion_point(message_clear_start:snappyv1.StreamsChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  streams_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamsChange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .snappyv1.StreamsChange.StreamChange streams = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_streams(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StreamsChange::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:snappyv1.StreamsChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .snappyv1.StreamsChange.StreamChange streams = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_streams_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_streams(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:snappyv1.StreamsChange)
  return target;
}

size_t StreamsChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:snappyv1.StreamsChange)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .snappyv1.StreamsChange.StreamChange streams = 2;
  total_size += 1UL * this->_internal_streams_size();
  for (const auto& msg : this->streams_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StreamsChange::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:snappyv1.StreamsChange)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamsChange* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StreamsChange>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:snappyv1.StreamsChange)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:snappyv1.StreamsChange)
    MergeFrom(*source);
  }
}

void StreamsChange::MergeFrom(const StreamsChange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:snappyv1.StreamsChange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  streams_.MergeFrom(from.streams_);
}

void StreamsChange::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:snappyv1.StreamsChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamsChange::CopyFrom(const StreamsChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:snappyv1.StreamsChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamsChange::IsInitialized() const {
  return true;
}

void StreamsChange::InternalSwap(StreamsChange* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  streams_.InternalSwap(&other->streams_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamsChange::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_snappyv1_2eproto_getter, &descriptor_table_snappyv1_2eproto_once,
      file_level_metadata_snappyv1_2eproto[9]);
}

// ===================================================================

class StreamStatistics::_Internal {
 public:
};

StreamStatistics::StreamStatistics(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:snappyv1.StreamStatistics)
}
StreamStatistics::StreamStatistics(const StreamStatistics& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&last_frame_, &from.last_frame_,
    static_cast<size_t>(reinterpret_cast<char*>(&tx_ts_end_ms_) -
    reinterpret_cast<char*>(&last_frame_)) + sizeof(tx_ts_end_ms_));
  // @@protoc_insertion_point(copy_constructor:snappyv1.StreamStatistics)
}

void StreamStatistics::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&last_frame_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&tx_ts_end_ms_) -
    reinterpret_cast<char*>(&last_frame_)) + sizeof(tx_ts_end_ms_));
}

StreamStatistics::~StreamStatistics() {
  // @@protoc_insertion_point(destructor:snappyv1.StreamStatistics)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StreamStatistics::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void StreamStatistics::ArenaDtor(void* object) {
  StreamStatistics* _this = reinterpret_cast< StreamStatistics* >(object);
  (void)_this;
}
void StreamStatistics::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StreamStatistics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StreamStatistics::Clear() {
// @@protoc_insertion_point(message_clear_start:snappyv1.StreamStatistics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&last_frame_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tx_ts_end_ms_) -
      reinterpret_cast<char*>(&last_frame_)) + sizeof(tx_ts_end_ms_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamStatistics::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 last_frame = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          last_frame_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 average_frame_qp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          average_frame_qp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 encode_ts_start_ms = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          encode_ts_start_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 encode_ts_end_ms = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          encode_ts_end_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 tx_ts_start_ms = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          tx_ts_start_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 tx_ts_end_ms = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          tx_ts_end_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StreamStatistics::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:snappyv1.StreamStatistics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 last_frame = 1;
  if (this->last_frame() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_last_frame(), target);
  }

  // uint32 average_frame_qp = 2;
  if (this->average_frame_qp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_average_frame_qp(), target);
  }

  // uint32 encode_ts_start_ms = 3;
  if (this->encode_ts_start_ms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_encode_ts_start_ms(), target);
  }

  // uint32 encode_ts_end_ms = 4;
  if (this->encode_ts_end_ms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_encode_ts_end_ms(), target);
  }

  // uint32 tx_ts_start_ms = 5;
  if (this->tx_ts_start_ms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_tx_ts_start_ms(), target);
  }

  // uint32 tx_ts_end_ms = 6;
  if (this->tx_ts_end_ms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_tx_ts_end_ms(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:snappyv1.StreamStatistics)
  return target;
}

size_t StreamStatistics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:snappyv1.StreamStatistics)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 last_frame = 1;
  if (this->last_frame() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_last_frame());
  }

  // uint32 average_frame_qp = 2;
  if (this->average_frame_qp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_average_frame_qp());
  }

  // uint32 encode_ts_start_ms = 3;
  if (this->encode_ts_start_ms() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_encode_ts_start_ms());
  }

  // uint32 encode_ts_end_ms = 4;
  if (this->encode_ts_end_ms() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_encode_ts_end_ms());
  }

  // uint32 tx_ts_start_ms = 5;
  if (this->tx_ts_start_ms() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tx_ts_start_ms());
  }

  // uint32 tx_ts_end_ms = 6;
  if (this->tx_ts_end_ms() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tx_ts_end_ms());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StreamStatistics::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:snappyv1.StreamStatistics)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamStatistics* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StreamStatistics>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:snappyv1.StreamStatistics)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:snappyv1.StreamStatistics)
    MergeFrom(*source);
  }
}

void StreamStatistics::MergeFrom(const StreamStatistics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:snappyv1.StreamStatistics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.last_frame() != 0) {
    _internal_set_last_frame(from._internal_last_frame());
  }
  if (from.average_frame_qp() != 0) {
    _internal_set_average_frame_qp(from._internal_average_frame_qp());
  }
  if (from.encode_ts_start_ms() != 0) {
    _internal_set_encode_ts_start_ms(from._internal_encode_ts_start_ms());
  }
  if (from.encode_ts_end_ms() != 0) {
    _internal_set_encode_ts_end_ms(from._internal_encode_ts_end_ms());
  }
  if (from.tx_ts_start_ms() != 0) {
    _internal_set_tx_ts_start_ms(from._internal_tx_ts_start_ms());
  }
  if (from.tx_ts_end_ms() != 0) {
    _internal_set_tx_ts_end_ms(from._internal_tx_ts_end_ms());
  }
}

void StreamStatistics::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:snappyv1.StreamStatistics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamStatistics::CopyFrom(const StreamStatistics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:snappyv1.StreamStatistics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamStatistics::IsInitialized() const {
  return true;
}

void StreamStatistics::InternalSwap(StreamStatistics* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StreamStatistics, tx_ts_end_ms_)
      + sizeof(StreamStatistics::tx_ts_end_ms_)
      - PROTOBUF_FIELD_OFFSET(StreamStatistics, last_frame_)>(
          reinterpret_cast<char*>(&last_frame_),
          reinterpret_cast<char*>(&other->last_frame_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamStatistics::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_snappyv1_2eproto_getter, &descriptor_table_snappyv1_2eproto_once,
      file_level_metadata_snappyv1_2eproto[10]);
}

// ===================================================================

class StreamData::_Internal {
 public:
};

StreamData::StreamData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:snappyv1.StreamData)
}
StreamData::StreamData(const StreamData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_payload().empty()) {
    payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_payload(), 
      GetArenaForAllocation());
  }
  stream_id_ = from.stream_id_;
  // @@protoc_insertion_point(copy_constructor:snappyv1.StreamData)
}

void StreamData::SharedCtor() {
payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
stream_id_ = 0u;
}

StreamData::~StreamData() {
  // @@protoc_insertion_point(destructor:snappyv1.StreamData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StreamData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  payload_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StreamData::ArenaDtor(void* object) {
  StreamData* _this = reinterpret_cast< StreamData* >(object);
  (void)_this;
}
void StreamData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StreamData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StreamData::Clear() {
// @@protoc_insertion_point(message_clear_start:snappyv1.StreamData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  payload_.ClearToEmpty();
  stream_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 stream_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          stream_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes payload = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_payload();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StreamData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:snappyv1.StreamData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 stream_id = 1;
  if (this->stream_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_stream_id(), target);
  }

  // bytes payload = 2;
  if (!this->payload().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_payload(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:snappyv1.StreamData)
  return target;
}

size_t StreamData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:snappyv1.StreamData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes payload = 2;
  if (!this->payload().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_payload());
  }

  // uint32 stream_id = 1;
  if (this->stream_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_stream_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StreamData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:snappyv1.StreamData)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StreamData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:snappyv1.StreamData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:snappyv1.StreamData)
    MergeFrom(*source);
  }
}

void StreamData::MergeFrom(const StreamData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:snappyv1.StreamData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.payload().empty()) {
    _internal_set_payload(from._internal_payload());
  }
  if (from.stream_id() != 0) {
    _internal_set_stream_id(from._internal_stream_id());
  }
}

void StreamData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:snappyv1.StreamData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamData::CopyFrom(const StreamData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:snappyv1.StreamData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamData::IsInitialized() const {
  return true;
}

void StreamData::InternalSwap(StreamData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &payload_, GetArenaForAllocation(),
      &other->payload_, other->GetArenaForAllocation()
  );
  swap(stream_id_, other->stream_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_snappyv1_2eproto_getter, &descriptor_table_snappyv1_2eproto_once,
      file_level_metadata_snappyv1_2eproto[11]);
}

// ===================================================================

class Message::_Internal {
 public:
  static const ::snappyv1::ServerInfo& server_info(const Message* msg);
  static const ::snappyv1::StreamsChange& stream_change(const Message* msg);
  static const ::snappyv1::StreamData& stream_data(const Message* msg);
};

const ::snappyv1::ServerInfo&
Message::_Internal::server_info(const Message* msg) {
  return *msg->message_.server_info_;
}
const ::snappyv1::StreamsChange&
Message::_Internal::stream_change(const Message* msg) {
  return *msg->message_.stream_change_;
}
const ::snappyv1::StreamData&
Message::_Internal::stream_data(const Message* msg) {
  return *msg->message_.stream_data_;
}
void Message::set_allocated_server_info(::snappyv1::ServerInfo* server_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (server_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::snappyv1::ServerInfo>::GetOwningArena(server_info);
    if (message_arena != submessage_arena) {
      server_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, server_info, submessage_arena);
    }
    set_has_server_info();
    message_.server_info_ = server_info;
  }
  // @@protoc_insertion_point(field_set_allocated:snappyv1.Message.server_info)
}
void Message::set_allocated_stream_change(::snappyv1::StreamsChange* stream_change) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (stream_change) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::snappyv1::StreamsChange>::GetOwningArena(stream_change);
    if (message_arena != submessage_arena) {
      stream_change = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stream_change, submessage_arena);
    }
    set_has_stream_change();
    message_.stream_change_ = stream_change;
  }
  // @@protoc_insertion_point(field_set_allocated:snappyv1.Message.stream_change)
}
void Message::set_allocated_stream_data(::snappyv1::StreamData* stream_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (stream_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::snappyv1::StreamData>::GetOwningArena(stream_data);
    if (message_arena != submessage_arena) {
      stream_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stream_data, submessage_arena);
    }
    set_has_stream_data();
    message_.stream_data_ = stream_data;
  }
  // @@protoc_insertion_point(field_set_allocated:snappyv1.Message.stream_data)
}
Message::Message(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:snappyv1.Message)
}
Message::Message(const Message& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_ = from.type_;
  clear_has_message();
  switch (from.message_case()) {
    case kServerInfo: {
      _internal_mutable_server_info()->::snappyv1::ServerInfo::MergeFrom(from._internal_server_info());
      break;
    }
    case kStreamChange: {
      _internal_mutable_stream_change()->::snappyv1::StreamsChange::MergeFrom(from._internal_stream_change());
      break;
    }
    case kStreamData: {
      _internal_mutable_stream_data()->::snappyv1::StreamData::MergeFrom(from._internal_stream_data());
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:snappyv1.Message)
}

void Message::SharedCtor() {
type_ = 0;
clear_has_message();
}

Message::~Message() {
  // @@protoc_insertion_point(destructor:snappyv1.Message)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Message::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_message()) {
    clear_message();
  }
}

void Message::ArenaDtor(void* object) {
  Message* _this = reinterpret_cast< Message* >(object);
  (void)_this;
}
void Message::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Message::clear_message() {
// @@protoc_insertion_point(one_of_clear_start:snappyv1.Message)
  switch (message_case()) {
    case kServerInfo: {
      if (GetArenaForAllocation() == nullptr) {
        delete message_.server_info_;
      }
      break;
    }
    case kStreamChange: {
      if (GetArenaForAllocation() == nullptr) {
        delete message_.stream_change_;
      }
      break;
    }
    case kStreamData: {
      if (GetArenaForAllocation() == nullptr) {
        delete message_.stream_data_;
      }
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MESSAGE_NOT_SET;
}


void Message::Clear() {
// @@protoc_insertion_point(message_clear_start:snappyv1.Message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_ = 0;
  clear_message();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .snappyv1.MessageType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::snappyv1::MessageType>(val));
        } else goto handle_unusual;
        continue;
      // .snappyv1.ServerInfo server_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_server_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .snappyv1.StreamsChange stream_change = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_stream_change(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .snappyv1.StreamData stream_data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_stream_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Message::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:snappyv1.Message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .snappyv1.MessageType type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // .snappyv1.ServerInfo server_info = 2;
  if (_internal_has_server_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::server_info(this), target, stream);
  }

  // .snappyv1.StreamsChange stream_change = 3;
  if (_internal_has_stream_change()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::stream_change(this), target, stream);
  }

  // .snappyv1.StreamData stream_data = 4;
  if (_internal_has_stream_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::stream_data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:snappyv1.Message)
  return target;
}

size_t Message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:snappyv1.Message)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .snappyv1.MessageType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  switch (message_case()) {
    // .snappyv1.ServerInfo server_info = 2;
    case kServerInfo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.server_info_);
      break;
    }
    // .snappyv1.StreamsChange stream_change = 3;
    case kStreamChange: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.stream_change_);
      break;
    }
    // .snappyv1.StreamData stream_data = 4;
    case kStreamData: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.stream_data_);
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Message::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:snappyv1.Message)
  GOOGLE_DCHECK_NE(&from, this);
  const Message* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Message>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:snappyv1.Message)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:snappyv1.Message)
    MergeFrom(*source);
  }
}

void Message::MergeFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:snappyv1.Message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  switch (from.message_case()) {
    case kServerInfo: {
      _internal_mutable_server_info()->::snappyv1::ServerInfo::MergeFrom(from._internal_server_info());
      break;
    }
    case kStreamChange: {
      _internal_mutable_stream_change()->::snappyv1::StreamsChange::MergeFrom(from._internal_stream_change());
      break;
    }
    case kStreamData: {
      _internal_mutable_stream_data()->::snappyv1::StreamData::MergeFrom(from._internal_stream_data());
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
}

void Message::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:snappyv1.Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message::CopyFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:snappyv1.Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message::IsInitialized() const {
  return true;
}

void Message::InternalSwap(Message* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(type_, other->type_);
  swap(message_, other->message_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Message::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_snappyv1_2eproto_getter, &descriptor_table_snappyv1_2eproto_once,
      file_level_metadata_snappyv1_2eproto[12]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace snappyv1
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::snappyv1::Parameter_ValueString* Arena::CreateMaybeMessage< ::snappyv1::Parameter_ValueString >(Arena* arena) {
  return Arena::CreateMessageInternal< ::snappyv1::Parameter_ValueString >(arena);
}
template<> PROTOBUF_NOINLINE ::snappyv1::Parameter_ValueBool* Arena::CreateMaybeMessage< ::snappyv1::Parameter_ValueBool >(Arena* arena) {
  return Arena::CreateMessageInternal< ::snappyv1::Parameter_ValueBool >(arena);
}
template<> PROTOBUF_NOINLINE ::snappyv1::Parameter_ValueUint32* Arena::CreateMaybeMessage< ::snappyv1::Parameter_ValueUint32 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::snappyv1::Parameter_ValueUint32 >(arena);
}
template<> PROTOBUF_NOINLINE ::snappyv1::Parameter_ValueDouble* Arena::CreateMaybeMessage< ::snappyv1::Parameter_ValueDouble >(Arena* arena) {
  return Arena::CreateMessageInternal< ::snappyv1::Parameter_ValueDouble >(arena);
}
template<> PROTOBUF_NOINLINE ::snappyv1::Parameter* Arena::CreateMaybeMessage< ::snappyv1::Parameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::snappyv1::Parameter >(arena);
}
template<> PROTOBUF_NOINLINE ::snappyv1::Source* Arena::CreateMaybeMessage< ::snappyv1::Source >(Arena* arena) {
  return Arena::CreateMessageInternal< ::snappyv1::Source >(arena);
}
template<> PROTOBUF_NOINLINE ::snappyv1::Encoder* Arena::CreateMaybeMessage< ::snappyv1::Encoder >(Arena* arena) {
  return Arena::CreateMessageInternal< ::snappyv1::Encoder >(arena);
}
template<> PROTOBUF_NOINLINE ::snappyv1::ServerInfo* Arena::CreateMaybeMessage< ::snappyv1::ServerInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::snappyv1::ServerInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::snappyv1::StreamsChange_StreamChange* Arena::CreateMaybeMessage< ::snappyv1::StreamsChange_StreamChange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::snappyv1::StreamsChange_StreamChange >(arena);
}
template<> PROTOBUF_NOINLINE ::snappyv1::StreamsChange* Arena::CreateMaybeMessage< ::snappyv1::StreamsChange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::snappyv1::StreamsChange >(arena);
}
template<> PROTOBUF_NOINLINE ::snappyv1::StreamStatistics* Arena::CreateMaybeMessage< ::snappyv1::StreamStatistics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::snappyv1::StreamStatistics >(arena);
}
template<> PROTOBUF_NOINLINE ::snappyv1::StreamData* Arena::CreateMaybeMessage< ::snappyv1::StreamData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::snappyv1::StreamData >(arena);
}
template<> PROTOBUF_NOINLINE ::snappyv1::Message* Arena::CreateMaybeMessage< ::snappyv1::Message >(Arena* arena) {
  return Arena::CreateMessageInternal< ::snappyv1::Message >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
