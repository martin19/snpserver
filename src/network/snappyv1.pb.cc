// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: snappyv1.proto

#include "snappyv1.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace snappyv1 {
constexpr Property_ValueString::Property_ValueString(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct Property_ValueStringDefaultTypeInternal {
  constexpr Property_ValueStringDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Property_ValueStringDefaultTypeInternal() {}
  union {
    Property_ValueString _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Property_ValueStringDefaultTypeInternal _Property_ValueString_default_instance_;
constexpr Property_ValueBool::Property_ValueBool(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(false){}
struct Property_ValueBoolDefaultTypeInternal {
  constexpr Property_ValueBoolDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Property_ValueBoolDefaultTypeInternal() {}
  union {
    Property_ValueBool _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Property_ValueBoolDefaultTypeInternal _Property_ValueBool_default_instance_;
constexpr Property_ValueUint32::Property_ValueUint32(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(0u)
  , min_(0u)
  , max_(0u){}
struct Property_ValueUint32DefaultTypeInternal {
  constexpr Property_ValueUint32DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Property_ValueUint32DefaultTypeInternal() {}
  union {
    Property_ValueUint32 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Property_ValueUint32DefaultTypeInternal _Property_ValueUint32_default_instance_;
constexpr Property_ValueDouble::Property_ValueDouble(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(0)
  , min_(0)
  , max_(0){}
struct Property_ValueDoubleDefaultTypeInternal {
  constexpr Property_ValueDoubleDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Property_ValueDoubleDefaultTypeInternal() {}
  union {
    Property_ValueDouble _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Property_ValueDoubleDefaultTypeInternal _Property_ValueDouble_default_instance_;
constexpr Property::Property(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , type_(0)

  , _oneof_case_{}{}
struct PropertyDefaultTypeInternal {
  constexpr PropertyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PropertyDefaultTypeInternal() {}
  union {
    Property _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PropertyDefaultTypeInternal _Property_default_instance_;
constexpr StreamChange::StreamChange(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : property_()
  , id_(0u)
  , command_(0)

  , stream_medium_(0)

  , stream_direction_(0)

  , stream_endpoint_(0)

  , stream_encoding_(0)
{}
struct StreamChangeDefaultTypeInternal {
  constexpr StreamChangeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StreamChangeDefaultTypeInternal() {}
  union {
    StreamChange _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StreamChangeDefaultTypeInternal _StreamChange_default_instance_;
constexpr StreamData::StreamData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : payload_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , stream_id_(0u){}
struct StreamDataDefaultTypeInternal {
  constexpr StreamDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StreamDataDefaultTypeInternal() {}
  union {
    StreamData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StreamDataDefaultTypeInternal _StreamData_default_instance_;
constexpr Message::Message(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : type_(0)

  , _oneof_case_{}{}
struct MessageDefaultTypeInternal {
  constexpr MessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MessageDefaultTypeInternal() {}
  union {
    Message _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MessageDefaultTypeInternal _Message_default_instance_;
constexpr StreamDataPointer::StreamDataPointer(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : absx_(0u)
  , absy_(0u)
  , mask_(0){}
struct StreamDataPointerDefaultTypeInternal {
  constexpr StreamDataPointerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StreamDataPointerDefaultTypeInternal() {}
  union {
    StreamDataPointer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StreamDataPointerDefaultTypeInternal _StreamDataPointer_default_instance_;
constexpr StreamDataKeyboard::StreamDataKeyboard(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : keysym_(0u)
  , keycode_(0u)
  , down_(false){}
struct StreamDataKeyboardDefaultTypeInternal {
  constexpr StreamDataKeyboardDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StreamDataKeyboardDefaultTypeInternal() {}
  union {
    StreamDataKeyboard _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StreamDataKeyboardDefaultTypeInternal _StreamDataKeyboard_default_instance_;
constexpr StreamDataCursor::StreamDataCursor(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : image_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , width_(0u)
  , height_(0u)
  , hotx_(0u)
  , hoty_(0u){}
struct StreamDataCursorDefaultTypeInternal {
  constexpr StreamDataCursorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StreamDataCursorDefaultTypeInternal() {}
  union {
    StreamDataCursor _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StreamDataCursorDefaultTypeInternal _StreamDataCursor_default_instance_;
}  // namespace snappyv1
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_snappyv1_2eproto[11];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_snappyv1_2eproto[8];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_snappyv1_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_snappyv1_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::snappyv1::Property_ValueString, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::snappyv1::Property_ValueString, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::snappyv1::Property_ValueBool, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::snappyv1::Property_ValueBool, value_),
  PROTOBUF_FIELD_OFFSET(::snappyv1::Property_ValueUint32, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::snappyv1::Property_ValueUint32, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::snappyv1::Property_ValueUint32, value_),
  PROTOBUF_FIELD_OFFSET(::snappyv1::Property_ValueUint32, min_),
  PROTOBUF_FIELD_OFFSET(::snappyv1::Property_ValueUint32, max_),
  ~0u,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::snappyv1::Property_ValueDouble, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::snappyv1::Property_ValueDouble, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::snappyv1::Property_ValueDouble, value_),
  PROTOBUF_FIELD_OFFSET(::snappyv1::Property_ValueDouble, min_),
  PROTOBUF_FIELD_OFFSET(::snappyv1::Property_ValueDouble, max_),
  ~0u,
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::snappyv1::Property, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::snappyv1::Property, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::snappyv1::Property, type_),
  PROTOBUF_FIELD_OFFSET(::snappyv1::Property, key_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::snappyv1::Property, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::snappyv1::StreamChange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::snappyv1::StreamChange, id_),
  PROTOBUF_FIELD_OFFSET(::snappyv1::StreamChange, command_),
  PROTOBUF_FIELD_OFFSET(::snappyv1::StreamChange, stream_medium_),
  PROTOBUF_FIELD_OFFSET(::snappyv1::StreamChange, stream_direction_),
  PROTOBUF_FIELD_OFFSET(::snappyv1::StreamChange, stream_endpoint_),
  PROTOBUF_FIELD_OFFSET(::snappyv1::StreamChange, stream_encoding_),
  PROTOBUF_FIELD_OFFSET(::snappyv1::StreamChange, property_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::snappyv1::StreamData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::snappyv1::StreamData, stream_id_),
  PROTOBUF_FIELD_OFFSET(::snappyv1::StreamData, payload_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::snappyv1::Message, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::snappyv1::Message, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::snappyv1::Message, type_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::snappyv1::Message, message_),
  PROTOBUF_FIELD_OFFSET(::snappyv1::StreamDataPointer, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::snappyv1::StreamDataPointer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::snappyv1::StreamDataPointer, absx_),
  PROTOBUF_FIELD_OFFSET(::snappyv1::StreamDataPointer, absy_),
  PROTOBUF_FIELD_OFFSET(::snappyv1::StreamDataPointer, mask_),
  ~0u,
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::snappyv1::StreamDataKeyboard, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::snappyv1::StreamDataKeyboard, keysym_),
  PROTOBUF_FIELD_OFFSET(::snappyv1::StreamDataKeyboard, keycode_),
  PROTOBUF_FIELD_OFFSET(::snappyv1::StreamDataKeyboard, down_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::snappyv1::StreamDataCursor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::snappyv1::StreamDataCursor, width_),
  PROTOBUF_FIELD_OFFSET(::snappyv1::StreamDataCursor, height_),
  PROTOBUF_FIELD_OFFSET(::snappyv1::StreamDataCursor, hotx_),
  PROTOBUF_FIELD_OFFSET(::snappyv1::StreamDataCursor, hoty_),
  PROTOBUF_FIELD_OFFSET(::snappyv1::StreamDataCursor, image_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::snappyv1::Property_ValueString)},
  { 6, -1, sizeof(::snappyv1::Property_ValueBool)},
  { 12, 20, sizeof(::snappyv1::Property_ValueUint32)},
  { 23, 31, sizeof(::snappyv1::Property_ValueDouble)},
  { 34, -1, sizeof(::snappyv1::Property)},
  { 46, -1, sizeof(::snappyv1::StreamChange)},
  { 58, -1, sizeof(::snappyv1::StreamData)},
  { 65, -1, sizeof(::snappyv1::Message)},
  { 74, 82, sizeof(::snappyv1::StreamDataPointer)},
  { 85, -1, sizeof(::snappyv1::StreamDataKeyboard)},
  { 93, -1, sizeof(::snappyv1::StreamDataCursor)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::snappyv1::_Property_ValueString_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::snappyv1::_Property_ValueBool_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::snappyv1::_Property_ValueUint32_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::snappyv1::_Property_ValueDouble_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::snappyv1::_Property_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::snappyv1::_StreamChange_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::snappyv1::_StreamData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::snappyv1::_Message_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::snappyv1::_StreamDataPointer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::snappyv1::_StreamDataKeyboard_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::snappyv1::_StreamDataCursor_default_instance_),
};

const char descriptor_table_protodef_snappyv1_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016snappyv1.proto\022\010snappyv1\"\200\004\n\010Property\022"
  "$\n\004type\030\001 \001(\0162\026.snappyv1.PropertyType\022\013\n"
  "\003key\030\002 \001(\t\0226\n\014value_string\030\003 \001(\0132\036.snapp"
  "yv1.Property.ValueStringH\000\0222\n\nvalue_bool"
  "\030\004 \001(\0132\034.snappyv1.Property.ValueBoolH\000\0226"
  "\n\014value_uint32\030\005 \001(\0132\036.snappyv1.Property"
  ".ValueUint32H\000\0226\n\014value_double\030\006 \001(\0132\036.s"
  "nappyv1.Property.ValueDoubleH\000\032\034\n\013ValueS"
  "tring\022\r\n\005value\030\001 \001(\t\032\032\n\tValueBool\022\r\n\005val"
  "ue\030\001 \001(\010\032P\n\013ValueUint32\022\r\n\005value\030\001 \001(\r\022\020"
  "\n\003min\030\002 \001(\rH\000\210\001\001\022\020\n\003max\030\003 \001(\rH\001\210\001\001B\006\n\004_m"
  "inB\006\n\004_max\032P\n\013ValueDouble\022\r\n\005value\030\001 \001(\001"
  "\022\020\n\003min\030\002 \001(\001H\000\210\001\001\022\020\n\003max\030\003 \001(\001H\001\210\001\001B\006\n\004"
  "_minB\006\n\004_maxB\007\n\005value\"\256\002\n\014StreamChange\022\n"
  "\n\002id\030\001 \001(\r\022\"\n\007command\030\002 \001(\0162\021.snappyv1.C"
  "ommand\022-\n\rstream_medium\030\003 \001(\0162\026.snappyv1"
  ".StreamMedium\0223\n\020stream_direction\030\004 \001(\0162"
  "\031.snappyv1.StreamDirection\0221\n\017stream_end"
  "point\030\005 \001(\0162\030.snappyv1.StreamEndpoint\0221\n"
  "\017stream_encoding\030\006 \001(\0162\030.snappyv1.Stream"
  "Encoding\022$\n\010property\030\007 \003(\0132\022.snappyv1.Pr"
  "operty\"0\n\nStreamData\022\021\n\tstream_id\030\001 \001(\r\022"
  "\017\n\007payload\030\002 \001(\014\"\227\001\n\007Message\022#\n\004type\030\001 \001"
  "(\0162\025.snappyv1.MessageType\022/\n\rstream_chan"
  "ge\030\002 \001(\0132\026.snappyv1.StreamChangeH\000\022+\n\013st"
  "ream_data\030\003 \001(\0132\024.snappyv1.StreamDataH\000B"
  "\t\n\007message\"K\n\021StreamDataPointer\022\014\n\004absx\030"
  "\001 \001(\r\022\014\n\004absy\030\002 \001(\r\022\021\n\004mask\030\003 \001(\005H\000\210\001\001B\007"
  "\n\005_mask\"C\n\022StreamDataKeyboard\022\016\n\006keysym\030"
  "\001 \001(\r\022\017\n\007keycode\030\002 \001(\r\022\014\n\004down\030\003 \001(\010\"\\\n\020"
  "StreamDataCursor\022\r\n\005width\030\001 \001(\r\022\016\n\006heigh"
  "t\030\002 \001(\r\022\014\n\004hotx\030\003 \001(\r\022\014\n\004hoty\030\004 \001(\r\022\r\n\005i"
  "mage\030\005 \001(\014*v\n\010Platform\022\024\n\020PLATFORM_WINDO"
  "WS\020\000\022\022\n\016PLATFORM_LINUX\020\001\022\022\n\016PLATFORM_MAC"
  "OS\020\002\022\026\n\022PLATFORM_RASPBERRY\020\003\022\024\n\020PLATFORM"
  "_ANDROID\020\004*_\n\014StreamMedium\022\027\n\023STREAM_MED"
  "IUM_VIDEO\020\000\022\027\n\023STREAM_MEDIUM_AUDIO\020\001\022\035\n\031"
  "STREAM_MEDIUM_PERIPHERIAL\020\002*\271\001\n\016StreamEn"
  "dpoint\022\027\n\023STREAM_ENDPOINT_X11\020\000\022\033\n\027STREA"
  "M_ENDPOINT_WAYLAND\020\001\022\032\n\026STREAM_ENDPOINT_"
  "CAMERA\020\002\022\034\n\030STREAM_ENDPOINT_KEYBOARD\020\003\022\033"
  "\n\027STREAM_ENDPOINT_POINTER\020\004\022\032\n\026STREAM_EN"
  "DPOINT_CURSOR\020\005*J\n\017StreamDirection\022\032\n\026ST"
  "REAM_DIRECTION_INPUT\020\000\022\033\n\027STREAM_DIRECTI"
  "ON_OUTPUT\020\001*\232\001\n\016StreamEncoding\022!\n\035STREAM"
  "_ENCODING_H264_SOFTWARE\020\000\022!\n\035STREAM_ENCO"
  "DING_H264_HARDWARE\020\001\022 \n\034STREAM_ENCODING_"
  "MP3_SOFTWARE\020\002\022 \n\034STREAM_ENCODING_MP3_HA"
  "RDWARE\020\003*\201\001\n\007Command\022\020\n\014COMMAND_INIT\020\000\022\021"
  "\n\rCOMMAND_START\020\001\022\020\n\014COMMAND_STOP\020\002\022\031\n\025C"
  "OMMAND_SET_PARAMETER\020\003\022\023\n\017COMMAND_DESTRO"
  "Y\020\004\022\017\n\013COMMAND_ACK\020\005*t\n\014PropertyType\022\030\n\024"
  "PROPERTY_TYPE_STRING\020\000\022\026\n\022PROPERTY_TYPE_"
  "BOOL\020\001\022\030\n\024PROPERTY_TYPE_UINT32\020\002\022\030\n\024PROP"
  "ERTY_TYPE_DOUBLE\020\003*K\n\013MessageType\022\036\n\032MES"
  "SAGE_TYPE_STREAM_CHANGE\020\000\022\034\n\030MESSAGE_TYP"
  "E_STREAM_DATA\020\001b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_snappyv1_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_snappyv1_2eproto = {
  false, false, 2263, descriptor_table_protodef_snappyv1_2eproto, "snappyv1.proto", 
  &descriptor_table_snappyv1_2eproto_once, nullptr, 0, 11,
  schemas, file_default_instances, TableStruct_snappyv1_2eproto::offsets,
  file_level_metadata_snappyv1_2eproto, file_level_enum_descriptors_snappyv1_2eproto, file_level_service_descriptors_snappyv1_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_snappyv1_2eproto_getter() {
  return &descriptor_table_snappyv1_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_snappyv1_2eproto(&descriptor_table_snappyv1_2eproto);
namespace snappyv1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Platform_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_snappyv1_2eproto);
  return file_level_enum_descriptors_snappyv1_2eproto[0];
}
bool Platform_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StreamMedium_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_snappyv1_2eproto);
  return file_level_enum_descriptors_snappyv1_2eproto[1];
}
bool StreamMedium_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StreamEndpoint_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_snappyv1_2eproto);
  return file_level_enum_descriptors_snappyv1_2eproto[2];
}
bool StreamEndpoint_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StreamDirection_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_snappyv1_2eproto);
  return file_level_enum_descriptors_snappyv1_2eproto[3];
}
bool StreamDirection_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StreamEncoding_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_snappyv1_2eproto);
  return file_level_enum_descriptors_snappyv1_2eproto[4];
}
bool StreamEncoding_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Command_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_snappyv1_2eproto);
  return file_level_enum_descriptors_snappyv1_2eproto[5];
}
bool Command_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PropertyType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_snappyv1_2eproto);
  return file_level_enum_descriptors_snappyv1_2eproto[6];
}
bool PropertyType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MessageType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_snappyv1_2eproto);
  return file_level_enum_descriptors_snappyv1_2eproto[7];
}
bool MessageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Property_ValueString::_Internal {
 public:
};

Property_ValueString::Property_ValueString(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:snappyv1.Property.ValueString)
}
Property_ValueString::Property_ValueString(const Property_ValueString& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:snappyv1.Property.ValueString)
}

void Property_ValueString::SharedCtor() {
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Property_ValueString::~Property_ValueString() {
  // @@protoc_insertion_point(destructor:snappyv1.Property.ValueString)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Property_ValueString::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Property_ValueString::ArenaDtor(void* object) {
  Property_ValueString* _this = reinterpret_cast< Property_ValueString* >(object);
  (void)_this;
}
void Property_ValueString::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Property_ValueString::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Property_ValueString::Clear() {
// @@protoc_insertion_point(message_clear_start:snappyv1.Property.ValueString)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Property_ValueString::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "snappyv1.Property.ValueString.value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Property_ValueString::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:snappyv1.Property.ValueString)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string value = 1;
  if (!this->value().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "snappyv1.Property.ValueString.value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:snappyv1.Property.ValueString)
  return target;
}

size_t Property_ValueString::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:snappyv1.Property.ValueString)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string value = 1;
  if (!this->value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Property_ValueString::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:snappyv1.Property.ValueString)
  GOOGLE_DCHECK_NE(&from, this);
  const Property_ValueString* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Property_ValueString>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:snappyv1.Property.ValueString)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:snappyv1.Property.ValueString)
    MergeFrom(*source);
  }
}

void Property_ValueString::MergeFrom(const Property_ValueString& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:snappyv1.Property.ValueString)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.value().empty()) {
    _internal_set_value(from._internal_value());
  }
}

void Property_ValueString::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:snappyv1.Property.ValueString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Property_ValueString::CopyFrom(const Property_ValueString& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:snappyv1.Property.ValueString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Property_ValueString::IsInitialized() const {
  return true;
}

void Property_ValueString::InternalSwap(Property_ValueString* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &value_, GetArenaForAllocation(),
      &other->value_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Property_ValueString::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_snappyv1_2eproto_getter, &descriptor_table_snappyv1_2eproto_once,
      file_level_metadata_snappyv1_2eproto[0]);
}

// ===================================================================

class Property_ValueBool::_Internal {
 public:
};

Property_ValueBool::Property_ValueBool(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:snappyv1.Property.ValueBool)
}
Property_ValueBool::Property_ValueBool(const Property_ValueBool& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:snappyv1.Property.ValueBool)
}

void Property_ValueBool::SharedCtor() {
value_ = false;
}

Property_ValueBool::~Property_ValueBool() {
  // @@protoc_insertion_point(destructor:snappyv1.Property.ValueBool)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Property_ValueBool::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Property_ValueBool::ArenaDtor(void* object) {
  Property_ValueBool* _this = reinterpret_cast< Property_ValueBool* >(object);
  (void)_this;
}
void Property_ValueBool::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Property_ValueBool::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Property_ValueBool::Clear() {
// @@protoc_insertion_point(message_clear_start:snappyv1.Property.ValueBool)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Property_ValueBool::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Property_ValueBool::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:snappyv1.Property.ValueBool)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool value = 1;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:snappyv1.Property.ValueBool)
  return target;
}

size_t Property_ValueBool::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:snappyv1.Property.ValueBool)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool value = 1;
  if (this->value() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Property_ValueBool::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:snappyv1.Property.ValueBool)
  GOOGLE_DCHECK_NE(&from, this);
  const Property_ValueBool* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Property_ValueBool>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:snappyv1.Property.ValueBool)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:snappyv1.Property.ValueBool)
    MergeFrom(*source);
  }
}

void Property_ValueBool::MergeFrom(const Property_ValueBool& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:snappyv1.Property.ValueBool)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
}

void Property_ValueBool::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:snappyv1.Property.ValueBool)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Property_ValueBool::CopyFrom(const Property_ValueBool& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:snappyv1.Property.ValueBool)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Property_ValueBool::IsInitialized() const {
  return true;
}

void Property_ValueBool::InternalSwap(Property_ValueBool* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Property_ValueBool::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_snappyv1_2eproto_getter, &descriptor_table_snappyv1_2eproto_once,
      file_level_metadata_snappyv1_2eproto[1]);
}

// ===================================================================

class Property_ValueUint32::_Internal {
 public:
  using HasBits = decltype(std::declval<Property_ValueUint32>()._has_bits_);
  static void set_has_min(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_max(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Property_ValueUint32::Property_ValueUint32(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:snappyv1.Property.ValueUint32)
}
Property_ValueUint32::Property_ValueUint32(const Property_ValueUint32& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&value_, &from.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_) -
    reinterpret_cast<char*>(&value_)) + sizeof(max_));
  // @@protoc_insertion_point(copy_constructor:snappyv1.Property.ValueUint32)
}

void Property_ValueUint32::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&value_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&max_) -
    reinterpret_cast<char*>(&value_)) + sizeof(max_));
}

Property_ValueUint32::~Property_ValueUint32() {
  // @@protoc_insertion_point(destructor:snappyv1.Property.ValueUint32)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Property_ValueUint32::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Property_ValueUint32::ArenaDtor(void* object) {
  Property_ValueUint32* _this = reinterpret_cast< Property_ValueUint32* >(object);
  (void)_this;
}
void Property_ValueUint32::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Property_ValueUint32::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Property_ValueUint32::Clear() {
// @@protoc_insertion_point(message_clear_start:snappyv1.Property.ValueUint32)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = 0u;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&min_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_) -
        reinterpret_cast<char*>(&min_)) + sizeof(max_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Property_ValueUint32::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 min = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_min(&has_bits);
          min_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 max = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_max(&has_bits);
          max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Property_ValueUint32::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:snappyv1.Property.ValueUint32)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 value = 1;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_value(), target);
  }

  // optional uint32 min = 2;
  if (_internal_has_min()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_min(), target);
  }

  // optional uint32 max = 3;
  if (_internal_has_max()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_max(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:snappyv1.Property.ValueUint32)
  return target;
}

size_t Property_ValueUint32::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:snappyv1.Property.ValueUint32)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 value = 1;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_value());
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 min = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_min());
    }

    // optional uint32 max = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Property_ValueUint32::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:snappyv1.Property.ValueUint32)
  GOOGLE_DCHECK_NE(&from, this);
  const Property_ValueUint32* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Property_ValueUint32>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:snappyv1.Property.ValueUint32)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:snappyv1.Property.ValueUint32)
    MergeFrom(*source);
  }
}

void Property_ValueUint32::MergeFrom(const Property_ValueUint32& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:snappyv1.Property.ValueUint32)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      min_ = from.min_;
    }
    if (cached_has_bits & 0x00000002u) {
      max_ = from.max_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Property_ValueUint32::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:snappyv1.Property.ValueUint32)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Property_ValueUint32::CopyFrom(const Property_ValueUint32& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:snappyv1.Property.ValueUint32)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Property_ValueUint32::IsInitialized() const {
  return true;
}

void Property_ValueUint32::InternalSwap(Property_ValueUint32* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Property_ValueUint32, max_)
      + sizeof(Property_ValueUint32::max_)
      - PROTOBUF_FIELD_OFFSET(Property_ValueUint32, value_)>(
          reinterpret_cast<char*>(&value_),
          reinterpret_cast<char*>(&other->value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Property_ValueUint32::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_snappyv1_2eproto_getter, &descriptor_table_snappyv1_2eproto_once,
      file_level_metadata_snappyv1_2eproto[2]);
}

// ===================================================================

class Property_ValueDouble::_Internal {
 public:
  using HasBits = decltype(std::declval<Property_ValueDouble>()._has_bits_);
  static void set_has_min(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_max(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Property_ValueDouble::Property_ValueDouble(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:snappyv1.Property.ValueDouble)
}
Property_ValueDouble::Property_ValueDouble(const Property_ValueDouble& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&value_, &from.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_) -
    reinterpret_cast<char*>(&value_)) + sizeof(max_));
  // @@protoc_insertion_point(copy_constructor:snappyv1.Property.ValueDouble)
}

void Property_ValueDouble::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&value_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&max_) -
    reinterpret_cast<char*>(&value_)) + sizeof(max_));
}

Property_ValueDouble::~Property_ValueDouble() {
  // @@protoc_insertion_point(destructor:snappyv1.Property.ValueDouble)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Property_ValueDouble::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Property_ValueDouble::ArenaDtor(void* object) {
  Property_ValueDouble* _this = reinterpret_cast< Property_ValueDouble* >(object);
  (void)_this;
}
void Property_ValueDouble::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Property_ValueDouble::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Property_ValueDouble::Clear() {
// @@protoc_insertion_point(message_clear_start:snappyv1.Property.ValueDouble)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = 0;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&min_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_) -
        reinterpret_cast<char*>(&min_)) + sizeof(max_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Property_ValueDouble::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double min = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_min(&has_bits);
          min_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double max = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_max(&has_bits);
          max_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Property_ValueDouble::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:snappyv1.Property.ValueDouble)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double value = 1;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_value(), target);
  }

  // optional double min = 2;
  if (_internal_has_min()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_min(), target);
  }

  // optional double max = 3;
  if (_internal_has_max()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_max(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:snappyv1.Property.ValueDouble)
  return target;
}

size_t Property_ValueDouble::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:snappyv1.Property.ValueDouble)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double value = 1;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    total_size += 1 + 8;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double min = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double max = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Property_ValueDouble::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:snappyv1.Property.ValueDouble)
  GOOGLE_DCHECK_NE(&from, this);
  const Property_ValueDouble* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Property_ValueDouble>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:snappyv1.Property.ValueDouble)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:snappyv1.Property.ValueDouble)
    MergeFrom(*source);
  }
}

void Property_ValueDouble::MergeFrom(const Property_ValueDouble& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:snappyv1.Property.ValueDouble)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.value() <= 0 && from.value() >= 0)) {
    _internal_set_value(from._internal_value());
  }
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      min_ = from.min_;
    }
    if (cached_has_bits & 0x00000002u) {
      max_ = from.max_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Property_ValueDouble::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:snappyv1.Property.ValueDouble)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Property_ValueDouble::CopyFrom(const Property_ValueDouble& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:snappyv1.Property.ValueDouble)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Property_ValueDouble::IsInitialized() const {
  return true;
}

void Property_ValueDouble::InternalSwap(Property_ValueDouble* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Property_ValueDouble, max_)
      + sizeof(Property_ValueDouble::max_)
      - PROTOBUF_FIELD_OFFSET(Property_ValueDouble, value_)>(
          reinterpret_cast<char*>(&value_),
          reinterpret_cast<char*>(&other->value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Property_ValueDouble::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_snappyv1_2eproto_getter, &descriptor_table_snappyv1_2eproto_once,
      file_level_metadata_snappyv1_2eproto[3]);
}

// ===================================================================

class Property::_Internal {
 public:
  static const ::snappyv1::Property_ValueString& value_string(const Property* msg);
  static const ::snappyv1::Property_ValueBool& value_bool(const Property* msg);
  static const ::snappyv1::Property_ValueUint32& value_uint32(const Property* msg);
  static const ::snappyv1::Property_ValueDouble& value_double(const Property* msg);
};

const ::snappyv1::Property_ValueString&
Property::_Internal::value_string(const Property* msg) {
  return *msg->value_.value_string_;
}
const ::snappyv1::Property_ValueBool&
Property::_Internal::value_bool(const Property* msg) {
  return *msg->value_.value_bool_;
}
const ::snappyv1::Property_ValueUint32&
Property::_Internal::value_uint32(const Property* msg) {
  return *msg->value_.value_uint32_;
}
const ::snappyv1::Property_ValueDouble&
Property::_Internal::value_double(const Property* msg) {
  return *msg->value_.value_double_;
}
void Property::set_allocated_value_string(::snappyv1::Property_ValueString* value_string) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (value_string) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::snappyv1::Property_ValueString>::GetOwningArena(value_string);
    if (message_arena != submessage_arena) {
      value_string = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value_string, submessage_arena);
    }
    set_has_value_string();
    value_.value_string_ = value_string;
  }
  // @@protoc_insertion_point(field_set_allocated:snappyv1.Property.value_string)
}
void Property::set_allocated_value_bool(::snappyv1::Property_ValueBool* value_bool) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (value_bool) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::snappyv1::Property_ValueBool>::GetOwningArena(value_bool);
    if (message_arena != submessage_arena) {
      value_bool = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value_bool, submessage_arena);
    }
    set_has_value_bool();
    value_.value_bool_ = value_bool;
  }
  // @@protoc_insertion_point(field_set_allocated:snappyv1.Property.value_bool)
}
void Property::set_allocated_value_uint32(::snappyv1::Property_ValueUint32* value_uint32) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (value_uint32) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::snappyv1::Property_ValueUint32>::GetOwningArena(value_uint32);
    if (message_arena != submessage_arena) {
      value_uint32 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value_uint32, submessage_arena);
    }
    set_has_value_uint32();
    value_.value_uint32_ = value_uint32;
  }
  // @@protoc_insertion_point(field_set_allocated:snappyv1.Property.value_uint32)
}
void Property::set_allocated_value_double(::snappyv1::Property_ValueDouble* value_double) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (value_double) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::snappyv1::Property_ValueDouble>::GetOwningArena(value_double);
    if (message_arena != submessage_arena) {
      value_double = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value_double, submessage_arena);
    }
    set_has_value_double();
    value_.value_double_ = value_double;
  }
  // @@protoc_insertion_point(field_set_allocated:snappyv1.Property.value_double)
}
Property::Property(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:snappyv1.Property)
}
Property::Property(const Property& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArenaForAllocation());
  }
  type_ = from.type_;
  clear_has_value();
  switch (from.value_case()) {
    case kValueString: {
      _internal_mutable_value_string()->::snappyv1::Property_ValueString::MergeFrom(from._internal_value_string());
      break;
    }
    case kValueBool: {
      _internal_mutable_value_bool()->::snappyv1::Property_ValueBool::MergeFrom(from._internal_value_bool());
      break;
    }
    case kValueUint32: {
      _internal_mutable_value_uint32()->::snappyv1::Property_ValueUint32::MergeFrom(from._internal_value_uint32());
      break;
    }
    case kValueDouble: {
      _internal_mutable_value_double()->::snappyv1::Property_ValueDouble::MergeFrom(from._internal_value_double());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:snappyv1.Property)
}

void Property::SharedCtor() {
key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
type_ = 0;
clear_has_value();
}

Property::~Property() {
  // @@protoc_insertion_point(destructor:snappyv1.Property)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Property::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_value()) {
    clear_value();
  }
}

void Property::ArenaDtor(void* object) {
  Property* _this = reinterpret_cast< Property* >(object);
  (void)_this;
}
void Property::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Property::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Property::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:snappyv1.Property)
  switch (value_case()) {
    case kValueString: {
      if (GetArenaForAllocation() == nullptr) {
        delete value_.value_string_;
      }
      break;
    }
    case kValueBool: {
      if (GetArenaForAllocation() == nullptr) {
        delete value_.value_bool_;
      }
      break;
    }
    case kValueUint32: {
      if (GetArenaForAllocation() == nullptr) {
        delete value_.value_uint32_;
      }
      break;
    }
    case kValueDouble: {
      if (GetArenaForAllocation() == nullptr) {
        delete value_.value_double_;
      }
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}


void Property::Clear() {
// @@protoc_insertion_point(message_clear_start:snappyv1.Property)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmpty();
  type_ = 0;
  clear_value();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Property::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .snappyv1.PropertyType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::snappyv1::PropertyType>(val));
        } else goto handle_unusual;
        continue;
      // string key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "snappyv1.Property.key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .snappyv1.Property.ValueString value_string = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_value_string(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .snappyv1.Property.ValueBool value_bool = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_value_bool(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .snappyv1.Property.ValueUint32 value_uint32 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_value_uint32(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .snappyv1.Property.ValueDouble value_double = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_value_double(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Property::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:snappyv1.Property)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .snappyv1.PropertyType type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // string key = 2;
  if (!this->key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "snappyv1.Property.key");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_key(), target);
  }

  // .snappyv1.Property.ValueString value_string = 3;
  if (_internal_has_value_string()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::value_string(this), target, stream);
  }

  // .snappyv1.Property.ValueBool value_bool = 4;
  if (_internal_has_value_bool()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::value_bool(this), target, stream);
  }

  // .snappyv1.Property.ValueUint32 value_uint32 = 5;
  if (_internal_has_value_uint32()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::value_uint32(this), target, stream);
  }

  // .snappyv1.Property.ValueDouble value_double = 6;
  if (_internal_has_value_double()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::value_double(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:snappyv1.Property)
  return target;
}

size_t Property::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:snappyv1.Property)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 2;
  if (!this->key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // .snappyv1.PropertyType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  switch (value_case()) {
    // .snappyv1.Property.ValueString value_string = 3;
    case kValueString: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.value_string_);
      break;
    }
    // .snappyv1.Property.ValueBool value_bool = 4;
    case kValueBool: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.value_bool_);
      break;
    }
    // .snappyv1.Property.ValueUint32 value_uint32 = 5;
    case kValueUint32: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.value_uint32_);
      break;
    }
    // .snappyv1.Property.ValueDouble value_double = 6;
    case kValueDouble: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.value_double_);
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Property::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:snappyv1.Property)
  GOOGLE_DCHECK_NE(&from, this);
  const Property* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Property>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:snappyv1.Property)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:snappyv1.Property)
    MergeFrom(*source);
  }
}

void Property::MergeFrom(const Property& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:snappyv1.Property)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.key().empty()) {
    _internal_set_key(from._internal_key());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  switch (from.value_case()) {
    case kValueString: {
      _internal_mutable_value_string()->::snappyv1::Property_ValueString::MergeFrom(from._internal_value_string());
      break;
    }
    case kValueBool: {
      _internal_mutable_value_bool()->::snappyv1::Property_ValueBool::MergeFrom(from._internal_value_bool());
      break;
    }
    case kValueUint32: {
      _internal_mutable_value_uint32()->::snappyv1::Property_ValueUint32::MergeFrom(from._internal_value_uint32());
      break;
    }
    case kValueDouble: {
      _internal_mutable_value_double()->::snappyv1::Property_ValueDouble::MergeFrom(from._internal_value_double());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
}

void Property::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:snappyv1.Property)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Property::CopyFrom(const Property& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:snappyv1.Property)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Property::IsInitialized() const {
  return true;
}

void Property::InternalSwap(Property* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &key_, GetArenaForAllocation(),
      &other->key_, other->GetArenaForAllocation()
  );
  swap(type_, other->type_);
  swap(value_, other->value_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Property::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_snappyv1_2eproto_getter, &descriptor_table_snappyv1_2eproto_once,
      file_level_metadata_snappyv1_2eproto[4]);
}

// ===================================================================

class StreamChange::_Internal {
 public:
};

StreamChange::StreamChange(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  property_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:snappyv1.StreamChange)
}
StreamChange::StreamChange(const StreamChange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      property_(from.property_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&stream_encoding_) -
    reinterpret_cast<char*>(&id_)) + sizeof(stream_encoding_));
  // @@protoc_insertion_point(copy_constructor:snappyv1.StreamChange)
}

void StreamChange::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&stream_encoding_) -
    reinterpret_cast<char*>(&id_)) + sizeof(stream_encoding_));
}

StreamChange::~StreamChange() {
  // @@protoc_insertion_point(destructor:snappyv1.StreamChange)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StreamChange::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void StreamChange::ArenaDtor(void* object) {
  StreamChange* _this = reinterpret_cast< StreamChange* >(object);
  (void)_this;
}
void StreamChange::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StreamChange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StreamChange::Clear() {
// @@protoc_insertion_point(message_clear_start:snappyv1.StreamChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  property_.Clear();
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stream_encoding_) -
      reinterpret_cast<char*>(&id_)) + sizeof(stream_encoding_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamChange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .snappyv1.Command command = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_command(static_cast<::snappyv1::Command>(val));
        } else goto handle_unusual;
        continue;
      // .snappyv1.StreamMedium stream_medium = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_stream_medium(static_cast<::snappyv1::StreamMedium>(val));
        } else goto handle_unusual;
        continue;
      // .snappyv1.StreamDirection stream_direction = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_stream_direction(static_cast<::snappyv1::StreamDirection>(val));
        } else goto handle_unusual;
        continue;
      // .snappyv1.StreamEndpoint stream_endpoint = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_stream_endpoint(static_cast<::snappyv1::StreamEndpoint>(val));
        } else goto handle_unusual;
        continue;
      // .snappyv1.StreamEncoding stream_encoding = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_stream_encoding(static_cast<::snappyv1::StreamEncoding>(val));
        } else goto handle_unusual;
        continue;
      // repeated .snappyv1.Property property = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_property(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StreamChange::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:snappyv1.StreamChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // .snappyv1.Command command = 2;
  if (this->command() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_command(), target);
  }

  // .snappyv1.StreamMedium stream_medium = 3;
  if (this->stream_medium() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_stream_medium(), target);
  }

  // .snappyv1.StreamDirection stream_direction = 4;
  if (this->stream_direction() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_stream_direction(), target);
  }

  // .snappyv1.StreamEndpoint stream_endpoint = 5;
  if (this->stream_endpoint() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_stream_endpoint(), target);
  }

  // .snappyv1.StreamEncoding stream_encoding = 6;
  if (this->stream_encoding() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_stream_encoding(), target);
  }

  // repeated .snappyv1.Property property = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_property_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_property(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:snappyv1.StreamChange)
  return target;
}

size_t StreamChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:snappyv1.StreamChange)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .snappyv1.Property property = 7;
  total_size += 1UL * this->_internal_property_size();
  for (const auto& msg : this->property_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  // .snappyv1.Command command = 2;
  if (this->command() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_command());
  }

  // .snappyv1.StreamMedium stream_medium = 3;
  if (this->stream_medium() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_stream_medium());
  }

  // .snappyv1.StreamDirection stream_direction = 4;
  if (this->stream_direction() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_stream_direction());
  }

  // .snappyv1.StreamEndpoint stream_endpoint = 5;
  if (this->stream_endpoint() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_stream_endpoint());
  }

  // .snappyv1.StreamEncoding stream_encoding = 6;
  if (this->stream_encoding() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_stream_encoding());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StreamChange::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:snappyv1.StreamChange)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamChange* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StreamChange>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:snappyv1.StreamChange)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:snappyv1.StreamChange)
    MergeFrom(*source);
  }
}

void StreamChange::MergeFrom(const StreamChange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:snappyv1.StreamChange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  property_.MergeFrom(from.property_);
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.command() != 0) {
    _internal_set_command(from._internal_command());
  }
  if (from.stream_medium() != 0) {
    _internal_set_stream_medium(from._internal_stream_medium());
  }
  if (from.stream_direction() != 0) {
    _internal_set_stream_direction(from._internal_stream_direction());
  }
  if (from.stream_endpoint() != 0) {
    _internal_set_stream_endpoint(from._internal_stream_endpoint());
  }
  if (from.stream_encoding() != 0) {
    _internal_set_stream_encoding(from._internal_stream_encoding());
  }
}

void StreamChange::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:snappyv1.StreamChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamChange::CopyFrom(const StreamChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:snappyv1.StreamChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamChange::IsInitialized() const {
  return true;
}

void StreamChange::InternalSwap(StreamChange* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  property_.InternalSwap(&other->property_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StreamChange, stream_encoding_)
      + sizeof(StreamChange::stream_encoding_)
      - PROTOBUF_FIELD_OFFSET(StreamChange, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamChange::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_snappyv1_2eproto_getter, &descriptor_table_snappyv1_2eproto_once,
      file_level_metadata_snappyv1_2eproto[5]);
}

// ===================================================================

class StreamData::_Internal {
 public:
};

StreamData::StreamData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:snappyv1.StreamData)
}
StreamData::StreamData(const StreamData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_payload().empty()) {
    payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_payload(), 
      GetArenaForAllocation());
  }
  stream_id_ = from.stream_id_;
  // @@protoc_insertion_point(copy_constructor:snappyv1.StreamData)
}

void StreamData::SharedCtor() {
payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
stream_id_ = 0u;
}

StreamData::~StreamData() {
  // @@protoc_insertion_point(destructor:snappyv1.StreamData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StreamData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  payload_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StreamData::ArenaDtor(void* object) {
  StreamData* _this = reinterpret_cast< StreamData* >(object);
  (void)_this;
}
void StreamData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StreamData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StreamData::Clear() {
// @@protoc_insertion_point(message_clear_start:snappyv1.StreamData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  payload_.ClearToEmpty();
  stream_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 stream_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          stream_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes payload = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_payload();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StreamData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:snappyv1.StreamData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 stream_id = 1;
  if (this->stream_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_stream_id(), target);
  }

  // bytes payload = 2;
  if (!this->payload().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_payload(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:snappyv1.StreamData)
  return target;
}

size_t StreamData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:snappyv1.StreamData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes payload = 2;
  if (!this->payload().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_payload());
  }

  // uint32 stream_id = 1;
  if (this->stream_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_stream_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StreamData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:snappyv1.StreamData)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StreamData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:snappyv1.StreamData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:snappyv1.StreamData)
    MergeFrom(*source);
  }
}

void StreamData::MergeFrom(const StreamData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:snappyv1.StreamData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.payload().empty()) {
    _internal_set_payload(from._internal_payload());
  }
  if (from.stream_id() != 0) {
    _internal_set_stream_id(from._internal_stream_id());
  }
}

void StreamData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:snappyv1.StreamData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamData::CopyFrom(const StreamData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:snappyv1.StreamData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamData::IsInitialized() const {
  return true;
}

void StreamData::InternalSwap(StreamData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &payload_, GetArenaForAllocation(),
      &other->payload_, other->GetArenaForAllocation()
  );
  swap(stream_id_, other->stream_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_snappyv1_2eproto_getter, &descriptor_table_snappyv1_2eproto_once,
      file_level_metadata_snappyv1_2eproto[6]);
}

// ===================================================================

class Message::_Internal {
 public:
  static const ::snappyv1::StreamChange& stream_change(const Message* msg);
  static const ::snappyv1::StreamData& stream_data(const Message* msg);
};

const ::snappyv1::StreamChange&
Message::_Internal::stream_change(const Message* msg) {
  return *msg->message_.stream_change_;
}
const ::snappyv1::StreamData&
Message::_Internal::stream_data(const Message* msg) {
  return *msg->message_.stream_data_;
}
void Message::set_allocated_stream_change(::snappyv1::StreamChange* stream_change) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (stream_change) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::snappyv1::StreamChange>::GetOwningArena(stream_change);
    if (message_arena != submessage_arena) {
      stream_change = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stream_change, submessage_arena);
    }
    set_has_stream_change();
    message_.stream_change_ = stream_change;
  }
  // @@protoc_insertion_point(field_set_allocated:snappyv1.Message.stream_change)
}
void Message::set_allocated_stream_data(::snappyv1::StreamData* stream_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (stream_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::snappyv1::StreamData>::GetOwningArena(stream_data);
    if (message_arena != submessage_arena) {
      stream_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stream_data, submessage_arena);
    }
    set_has_stream_data();
    message_.stream_data_ = stream_data;
  }
  // @@protoc_insertion_point(field_set_allocated:snappyv1.Message.stream_data)
}
Message::Message(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:snappyv1.Message)
}
Message::Message(const Message& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_ = from.type_;
  clear_has_message();
  switch (from.message_case()) {
    case kStreamChange: {
      _internal_mutable_stream_change()->::snappyv1::StreamChange::MergeFrom(from._internal_stream_change());
      break;
    }
    case kStreamData: {
      _internal_mutable_stream_data()->::snappyv1::StreamData::MergeFrom(from._internal_stream_data());
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:snappyv1.Message)
}

void Message::SharedCtor() {
type_ = 0;
clear_has_message();
}

Message::~Message() {
  // @@protoc_insertion_point(destructor:snappyv1.Message)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Message::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_message()) {
    clear_message();
  }
}

void Message::ArenaDtor(void* object) {
  Message* _this = reinterpret_cast< Message* >(object);
  (void)_this;
}
void Message::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Message::clear_message() {
// @@protoc_insertion_point(one_of_clear_start:snappyv1.Message)
  switch (message_case()) {
    case kStreamChange: {
      if (GetArenaForAllocation() == nullptr) {
        delete message_.stream_change_;
      }
      break;
    }
    case kStreamData: {
      if (GetArenaForAllocation() == nullptr) {
        delete message_.stream_data_;
      }
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MESSAGE_NOT_SET;
}


void Message::Clear() {
// @@protoc_insertion_point(message_clear_start:snappyv1.Message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_ = 0;
  clear_message();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .snappyv1.MessageType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::snappyv1::MessageType>(val));
        } else goto handle_unusual;
        continue;
      // .snappyv1.StreamChange stream_change = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_stream_change(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .snappyv1.StreamData stream_data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_stream_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Message::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:snappyv1.Message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .snappyv1.MessageType type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // .snappyv1.StreamChange stream_change = 2;
  if (_internal_has_stream_change()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::stream_change(this), target, stream);
  }

  // .snappyv1.StreamData stream_data = 3;
  if (_internal_has_stream_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::stream_data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:snappyv1.Message)
  return target;
}

size_t Message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:snappyv1.Message)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .snappyv1.MessageType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  switch (message_case()) {
    // .snappyv1.StreamChange stream_change = 2;
    case kStreamChange: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.stream_change_);
      break;
    }
    // .snappyv1.StreamData stream_data = 3;
    case kStreamData: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.stream_data_);
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Message::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:snappyv1.Message)
  GOOGLE_DCHECK_NE(&from, this);
  const Message* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Message>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:snappyv1.Message)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:snappyv1.Message)
    MergeFrom(*source);
  }
}

void Message::MergeFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:snappyv1.Message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  switch (from.message_case()) {
    case kStreamChange: {
      _internal_mutable_stream_change()->::snappyv1::StreamChange::MergeFrom(from._internal_stream_change());
      break;
    }
    case kStreamData: {
      _internal_mutable_stream_data()->::snappyv1::StreamData::MergeFrom(from._internal_stream_data());
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
}

void Message::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:snappyv1.Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message::CopyFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:snappyv1.Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message::IsInitialized() const {
  return true;
}

void Message::InternalSwap(Message* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(type_, other->type_);
  swap(message_, other->message_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Message::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_snappyv1_2eproto_getter, &descriptor_table_snappyv1_2eproto_once,
      file_level_metadata_snappyv1_2eproto[7]);
}

// ===================================================================

class StreamDataPointer::_Internal {
 public:
  using HasBits = decltype(std::declval<StreamDataPointer>()._has_bits_);
  static void set_has_mask(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

StreamDataPointer::StreamDataPointer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:snappyv1.StreamDataPointer)
}
StreamDataPointer::StreamDataPointer(const StreamDataPointer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&absx_, &from.absx_,
    static_cast<size_t>(reinterpret_cast<char*>(&mask_) -
    reinterpret_cast<char*>(&absx_)) + sizeof(mask_));
  // @@protoc_insertion_point(copy_constructor:snappyv1.StreamDataPointer)
}

void StreamDataPointer::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&absx_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&mask_) -
    reinterpret_cast<char*>(&absx_)) + sizeof(mask_));
}

StreamDataPointer::~StreamDataPointer() {
  // @@protoc_insertion_point(destructor:snappyv1.StreamDataPointer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StreamDataPointer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void StreamDataPointer::ArenaDtor(void* object) {
  StreamDataPointer* _this = reinterpret_cast< StreamDataPointer* >(object);
  (void)_this;
}
void StreamDataPointer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StreamDataPointer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StreamDataPointer::Clear() {
// @@protoc_insertion_point(message_clear_start:snappyv1.StreamDataPointer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&absx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&absy_) -
      reinterpret_cast<char*>(&absx_)) + sizeof(absy_));
  mask_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamDataPointer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 absx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          absx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 absy = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          absy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 mask = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_mask(&has_bits);
          mask_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StreamDataPointer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:snappyv1.StreamDataPointer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 absx = 1;
  if (this->absx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_absx(), target);
  }

  // uint32 absy = 2;
  if (this->absy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_absy(), target);
  }

  // optional int32 mask = 3;
  if (_internal_has_mask()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_mask(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:snappyv1.StreamDataPointer)
  return target;
}

size_t StreamDataPointer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:snappyv1.StreamDataPointer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 absx = 1;
  if (this->absx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_absx());
  }

  // uint32 absy = 2;
  if (this->absy() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_absy());
  }

  // optional int32 mask = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mask());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StreamDataPointer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:snappyv1.StreamDataPointer)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamDataPointer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StreamDataPointer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:snappyv1.StreamDataPointer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:snappyv1.StreamDataPointer)
    MergeFrom(*source);
  }
}

void StreamDataPointer::MergeFrom(const StreamDataPointer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:snappyv1.StreamDataPointer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.absx() != 0) {
    _internal_set_absx(from._internal_absx());
  }
  if (from.absy() != 0) {
    _internal_set_absy(from._internal_absy());
  }
  if (from._internal_has_mask()) {
    _internal_set_mask(from._internal_mask());
  }
}

void StreamDataPointer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:snappyv1.StreamDataPointer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamDataPointer::CopyFrom(const StreamDataPointer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:snappyv1.StreamDataPointer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamDataPointer::IsInitialized() const {
  return true;
}

void StreamDataPointer::InternalSwap(StreamDataPointer* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StreamDataPointer, mask_)
      + sizeof(StreamDataPointer::mask_)
      - PROTOBUF_FIELD_OFFSET(StreamDataPointer, absx_)>(
          reinterpret_cast<char*>(&absx_),
          reinterpret_cast<char*>(&other->absx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamDataPointer::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_snappyv1_2eproto_getter, &descriptor_table_snappyv1_2eproto_once,
      file_level_metadata_snappyv1_2eproto[8]);
}

// ===================================================================

class StreamDataKeyboard::_Internal {
 public:
};

StreamDataKeyboard::StreamDataKeyboard(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:snappyv1.StreamDataKeyboard)
}
StreamDataKeyboard::StreamDataKeyboard(const StreamDataKeyboard& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&keysym_, &from.keysym_,
    static_cast<size_t>(reinterpret_cast<char*>(&down_) -
    reinterpret_cast<char*>(&keysym_)) + sizeof(down_));
  // @@protoc_insertion_point(copy_constructor:snappyv1.StreamDataKeyboard)
}

void StreamDataKeyboard::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&keysym_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&down_) -
    reinterpret_cast<char*>(&keysym_)) + sizeof(down_));
}

StreamDataKeyboard::~StreamDataKeyboard() {
  // @@protoc_insertion_point(destructor:snappyv1.StreamDataKeyboard)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StreamDataKeyboard::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void StreamDataKeyboard::ArenaDtor(void* object) {
  StreamDataKeyboard* _this = reinterpret_cast< StreamDataKeyboard* >(object);
  (void)_this;
}
void StreamDataKeyboard::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StreamDataKeyboard::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StreamDataKeyboard::Clear() {
// @@protoc_insertion_point(message_clear_start:snappyv1.StreamDataKeyboard)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&keysym_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&down_) -
      reinterpret_cast<char*>(&keysym_)) + sizeof(down_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamDataKeyboard::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 keysym = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          keysym_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 keycode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          keycode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool down = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          down_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StreamDataKeyboard::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:snappyv1.StreamDataKeyboard)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 keysym = 1;
  if (this->keysym() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_keysym(), target);
  }

  // uint32 keycode = 2;
  if (this->keycode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_keycode(), target);
  }

  // bool down = 3;
  if (this->down() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_down(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:snappyv1.StreamDataKeyboard)
  return target;
}

size_t StreamDataKeyboard::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:snappyv1.StreamDataKeyboard)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 keysym = 1;
  if (this->keysym() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_keysym());
  }

  // uint32 keycode = 2;
  if (this->keycode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_keycode());
  }

  // bool down = 3;
  if (this->down() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StreamDataKeyboard::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:snappyv1.StreamDataKeyboard)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamDataKeyboard* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StreamDataKeyboard>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:snappyv1.StreamDataKeyboard)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:snappyv1.StreamDataKeyboard)
    MergeFrom(*source);
  }
}

void StreamDataKeyboard::MergeFrom(const StreamDataKeyboard& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:snappyv1.StreamDataKeyboard)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.keysym() != 0) {
    _internal_set_keysym(from._internal_keysym());
  }
  if (from.keycode() != 0) {
    _internal_set_keycode(from._internal_keycode());
  }
  if (from.down() != 0) {
    _internal_set_down(from._internal_down());
  }
}

void StreamDataKeyboard::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:snappyv1.StreamDataKeyboard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamDataKeyboard::CopyFrom(const StreamDataKeyboard& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:snappyv1.StreamDataKeyboard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamDataKeyboard::IsInitialized() const {
  return true;
}

void StreamDataKeyboard::InternalSwap(StreamDataKeyboard* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StreamDataKeyboard, down_)
      + sizeof(StreamDataKeyboard::down_)
      - PROTOBUF_FIELD_OFFSET(StreamDataKeyboard, keysym_)>(
          reinterpret_cast<char*>(&keysym_),
          reinterpret_cast<char*>(&other->keysym_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamDataKeyboard::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_snappyv1_2eproto_getter, &descriptor_table_snappyv1_2eproto_once,
      file_level_metadata_snappyv1_2eproto[9]);
}

// ===================================================================

class StreamDataCursor::_Internal {
 public:
};

StreamDataCursor::StreamDataCursor(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:snappyv1.StreamDataCursor)
}
StreamDataCursor::StreamDataCursor(const StreamDataCursor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  image_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_image().empty()) {
    image_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_image(), 
      GetArenaForAllocation());
  }
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&hoty_) -
    reinterpret_cast<char*>(&width_)) + sizeof(hoty_));
  // @@protoc_insertion_point(copy_constructor:snappyv1.StreamDataCursor)
}

void StreamDataCursor::SharedCtor() {
image_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&width_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&hoty_) -
    reinterpret_cast<char*>(&width_)) + sizeof(hoty_));
}

StreamDataCursor::~StreamDataCursor() {
  // @@protoc_insertion_point(destructor:snappyv1.StreamDataCursor)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StreamDataCursor::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  image_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StreamDataCursor::ArenaDtor(void* object) {
  StreamDataCursor* _this = reinterpret_cast< StreamDataCursor* >(object);
  (void)_this;
}
void StreamDataCursor::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StreamDataCursor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StreamDataCursor::Clear() {
// @@protoc_insertion_point(message_clear_start:snappyv1.StreamDataCursor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  image_.ClearToEmpty();
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hoty_) -
      reinterpret_cast<char*>(&width_)) + sizeof(hoty_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamDataCursor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 width = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 hotx = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          hotx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 hoty = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          hoty_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes image = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_image();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StreamDataCursor::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:snappyv1.StreamDataCursor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 width = 1;
  if (this->width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_width(), target);
  }

  // uint32 height = 2;
  if (this->height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_height(), target);
  }

  // uint32 hotx = 3;
  if (this->hotx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_hotx(), target);
  }

  // uint32 hoty = 4;
  if (this->hoty() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_hoty(), target);
  }

  // bytes image = 5;
  if (!this->image().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_image(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:snappyv1.StreamDataCursor)
  return target;
}

size_t StreamDataCursor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:snappyv1.StreamDataCursor)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes image = 5;
  if (!this->image().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_image());
  }

  // uint32 width = 1;
  if (this->width() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_width());
  }

  // uint32 height = 2;
  if (this->height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_height());
  }

  // uint32 hotx = 3;
  if (this->hotx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_hotx());
  }

  // uint32 hoty = 4;
  if (this->hoty() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_hoty());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StreamDataCursor::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:snappyv1.StreamDataCursor)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamDataCursor* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StreamDataCursor>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:snappyv1.StreamDataCursor)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:snappyv1.StreamDataCursor)
    MergeFrom(*source);
  }
}

void StreamDataCursor::MergeFrom(const StreamDataCursor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:snappyv1.StreamDataCursor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.image().empty()) {
    _internal_set_image(from._internal_image());
  }
  if (from.width() != 0) {
    _internal_set_width(from._internal_width());
  }
  if (from.height() != 0) {
    _internal_set_height(from._internal_height());
  }
  if (from.hotx() != 0) {
    _internal_set_hotx(from._internal_hotx());
  }
  if (from.hoty() != 0) {
    _internal_set_hoty(from._internal_hoty());
  }
}

void StreamDataCursor::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:snappyv1.StreamDataCursor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamDataCursor::CopyFrom(const StreamDataCursor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:snappyv1.StreamDataCursor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamDataCursor::IsInitialized() const {
  return true;
}

void StreamDataCursor::InternalSwap(StreamDataCursor* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &image_, GetArenaForAllocation(),
      &other->image_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StreamDataCursor, hoty_)
      + sizeof(StreamDataCursor::hoty_)
      - PROTOBUF_FIELD_OFFSET(StreamDataCursor, width_)>(
          reinterpret_cast<char*>(&width_),
          reinterpret_cast<char*>(&other->width_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamDataCursor::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_snappyv1_2eproto_getter, &descriptor_table_snappyv1_2eproto_once,
      file_level_metadata_snappyv1_2eproto[10]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace snappyv1
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::snappyv1::Property_ValueString* Arena::CreateMaybeMessage< ::snappyv1::Property_ValueString >(Arena* arena) {
  return Arena::CreateMessageInternal< ::snappyv1::Property_ValueString >(arena);
}
template<> PROTOBUF_NOINLINE ::snappyv1::Property_ValueBool* Arena::CreateMaybeMessage< ::snappyv1::Property_ValueBool >(Arena* arena) {
  return Arena::CreateMessageInternal< ::snappyv1::Property_ValueBool >(arena);
}
template<> PROTOBUF_NOINLINE ::snappyv1::Property_ValueUint32* Arena::CreateMaybeMessage< ::snappyv1::Property_ValueUint32 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::snappyv1::Property_ValueUint32 >(arena);
}
template<> PROTOBUF_NOINLINE ::snappyv1::Property_ValueDouble* Arena::CreateMaybeMessage< ::snappyv1::Property_ValueDouble >(Arena* arena) {
  return Arena::CreateMessageInternal< ::snappyv1::Property_ValueDouble >(arena);
}
template<> PROTOBUF_NOINLINE ::snappyv1::Property* Arena::CreateMaybeMessage< ::snappyv1::Property >(Arena* arena) {
  return Arena::CreateMessageInternal< ::snappyv1::Property >(arena);
}
template<> PROTOBUF_NOINLINE ::snappyv1::StreamChange* Arena::CreateMaybeMessage< ::snappyv1::StreamChange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::snappyv1::StreamChange >(arena);
}
template<> PROTOBUF_NOINLINE ::snappyv1::StreamData* Arena::CreateMaybeMessage< ::snappyv1::StreamData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::snappyv1::StreamData >(arena);
}
template<> PROTOBUF_NOINLINE ::snappyv1::Message* Arena::CreateMaybeMessage< ::snappyv1::Message >(Arena* arena) {
  return Arena::CreateMessageInternal< ::snappyv1::Message >(arena);
}
template<> PROTOBUF_NOINLINE ::snappyv1::StreamDataPointer* Arena::CreateMaybeMessage< ::snappyv1::StreamDataPointer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::snappyv1::StreamDataPointer >(arena);
}
template<> PROTOBUF_NOINLINE ::snappyv1::StreamDataKeyboard* Arena::CreateMaybeMessage< ::snappyv1::StreamDataKeyboard >(Arena* arena) {
  return Arena::CreateMessageInternal< ::snappyv1::StreamDataKeyboard >(arena);
}
template<> PROTOBUF_NOINLINE ::snappyv1::StreamDataCursor* Arena::CreateMaybeMessage< ::snappyv1::StreamDataCursor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::snappyv1::StreamDataCursor >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
