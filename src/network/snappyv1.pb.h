// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: snappyv1.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_snappyv1_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_snappyv1_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_snappyv1_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_snappyv1_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[16]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_snappyv1_2eproto;
namespace snappyv1 {
class Encoder;
struct EncoderDefaultTypeInternal;
extern EncoderDefaultTypeInternal _Encoder_default_instance_;
class Message;
struct MessageDefaultTypeInternal;
extern MessageDefaultTypeInternal _Message_default_instance_;
class Parameter;
struct ParameterDefaultTypeInternal;
extern ParameterDefaultTypeInternal _Parameter_default_instance_;
class Parameter_ValueBool;
struct Parameter_ValueBoolDefaultTypeInternal;
extern Parameter_ValueBoolDefaultTypeInternal _Parameter_ValueBool_default_instance_;
class Parameter_ValueDouble;
struct Parameter_ValueDoubleDefaultTypeInternal;
extern Parameter_ValueDoubleDefaultTypeInternal _Parameter_ValueDouble_default_instance_;
class Parameter_ValueString;
struct Parameter_ValueStringDefaultTypeInternal;
extern Parameter_ValueStringDefaultTypeInternal _Parameter_ValueString_default_instance_;
class Parameter_ValueUint32;
struct Parameter_ValueUint32DefaultTypeInternal;
extern Parameter_ValueUint32DefaultTypeInternal _Parameter_ValueUint32_default_instance_;
class ServerInfo;
struct ServerInfoDefaultTypeInternal;
extern ServerInfoDefaultTypeInternal _ServerInfo_default_instance_;
class Source;
struct SourceDefaultTypeInternal;
extern SourceDefaultTypeInternal _Source_default_instance_;
class StreamData;
struct StreamDataDefaultTypeInternal;
extern StreamDataDefaultTypeInternal _StreamData_default_instance_;
class StreamDataCursor;
struct StreamDataCursorDefaultTypeInternal;
extern StreamDataCursorDefaultTypeInternal _StreamDataCursor_default_instance_;
class StreamDataKeyboard;
struct StreamDataKeyboardDefaultTypeInternal;
extern StreamDataKeyboardDefaultTypeInternal _StreamDataKeyboard_default_instance_;
class StreamDataPointer;
struct StreamDataPointerDefaultTypeInternal;
extern StreamDataPointerDefaultTypeInternal _StreamDataPointer_default_instance_;
class StreamStatistics;
struct StreamStatisticsDefaultTypeInternal;
extern StreamStatisticsDefaultTypeInternal _StreamStatistics_default_instance_;
class StreamsChange;
struct StreamsChangeDefaultTypeInternal;
extern StreamsChangeDefaultTypeInternal _StreamsChange_default_instance_;
class StreamsChange_StreamChange;
struct StreamsChange_StreamChangeDefaultTypeInternal;
extern StreamsChange_StreamChangeDefaultTypeInternal _StreamsChange_StreamChange_default_instance_;
}  // namespace snappyv1
PROTOBUF_NAMESPACE_OPEN
template<> ::snappyv1::Encoder* Arena::CreateMaybeMessage<::snappyv1::Encoder>(Arena*);
template<> ::snappyv1::Message* Arena::CreateMaybeMessage<::snappyv1::Message>(Arena*);
template<> ::snappyv1::Parameter* Arena::CreateMaybeMessage<::snappyv1::Parameter>(Arena*);
template<> ::snappyv1::Parameter_ValueBool* Arena::CreateMaybeMessage<::snappyv1::Parameter_ValueBool>(Arena*);
template<> ::snappyv1::Parameter_ValueDouble* Arena::CreateMaybeMessage<::snappyv1::Parameter_ValueDouble>(Arena*);
template<> ::snappyv1::Parameter_ValueString* Arena::CreateMaybeMessage<::snappyv1::Parameter_ValueString>(Arena*);
template<> ::snappyv1::Parameter_ValueUint32* Arena::CreateMaybeMessage<::snappyv1::Parameter_ValueUint32>(Arena*);
template<> ::snappyv1::ServerInfo* Arena::CreateMaybeMessage<::snappyv1::ServerInfo>(Arena*);
template<> ::snappyv1::Source* Arena::CreateMaybeMessage<::snappyv1::Source>(Arena*);
template<> ::snappyv1::StreamData* Arena::CreateMaybeMessage<::snappyv1::StreamData>(Arena*);
template<> ::snappyv1::StreamDataCursor* Arena::CreateMaybeMessage<::snappyv1::StreamDataCursor>(Arena*);
template<> ::snappyv1::StreamDataKeyboard* Arena::CreateMaybeMessage<::snappyv1::StreamDataKeyboard>(Arena*);
template<> ::snappyv1::StreamDataPointer* Arena::CreateMaybeMessage<::snappyv1::StreamDataPointer>(Arena*);
template<> ::snappyv1::StreamStatistics* Arena::CreateMaybeMessage<::snappyv1::StreamStatistics>(Arena*);
template<> ::snappyv1::StreamsChange* Arena::CreateMaybeMessage<::snappyv1::StreamsChange>(Arena*);
template<> ::snappyv1::StreamsChange_StreamChange* Arena::CreateMaybeMessage<::snappyv1::StreamsChange_StreamChange>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace snappyv1 {

enum Platform : int {
  PLATFORM_WINDOWS = 0,
  PLATFORM_LINUX = 1,
  PLATFORM_MACOS = 2,
  PLATFORM_RASPBERRY = 3,
  PLATFORM_ANDROID = 4,
  Platform_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Platform_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Platform_IsValid(int value);
constexpr Platform Platform_MIN = PLATFORM_WINDOWS;
constexpr Platform Platform_MAX = PLATFORM_ANDROID;
constexpr int Platform_ARRAYSIZE = Platform_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Platform_descriptor();
template<typename T>
inline const std::string& Platform_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Platform>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Platform_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Platform_descriptor(), enum_t_value);
}
inline bool Platform_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Platform* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Platform>(
    Platform_descriptor(), name, value);
}
enum SourceType : int {
  SOURCE_TYPE_VIDEO = 0,
  SOURCE_TYPE_AUDIO = 1,
  SOURCE_TYPE_INPUT = 2,
  SourceType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SourceType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SourceType_IsValid(int value);
constexpr SourceType SourceType_MIN = SOURCE_TYPE_VIDEO;
constexpr SourceType SourceType_MAX = SOURCE_TYPE_INPUT;
constexpr int SourceType_ARRAYSIZE = SourceType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SourceType_descriptor();
template<typename T>
inline const std::string& SourceType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SourceType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SourceType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SourceType_descriptor(), enum_t_value);
}
inline bool SourceType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SourceType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SourceType>(
    SourceType_descriptor(), name, value);
}
enum SourceSubType : int {
  SOURCE_SUB_TYPE_X11 = 0,
  SOURCE_SUB_TYPE_WAYLAND = 1,
  SOURCE_SUB_TYPE_CAMERA = 2,
  SOURCE_SUB_TYPE_KEYBOARD = 3,
  SOURCE_SUB_TYPE_POINTER = 4,
  SOURCE_SUB_TYPE_CURSOR = 5,
  SourceSubType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SourceSubType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SourceSubType_IsValid(int value);
constexpr SourceSubType SourceSubType_MIN = SOURCE_SUB_TYPE_X11;
constexpr SourceSubType SourceSubType_MAX = SOURCE_SUB_TYPE_CURSOR;
constexpr int SourceSubType_ARRAYSIZE = SourceSubType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SourceSubType_descriptor();
template<typename T>
inline const std::string& SourceSubType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SourceSubType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SourceSubType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SourceSubType_descriptor(), enum_t_value);
}
inline bool SourceSubType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SourceSubType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SourceSubType>(
    SourceSubType_descriptor(), name, value);
}
enum EncoderType : int {
  ENCODER_TYPE_H264_SOFTWARE = 0,
  ENCODER_TYPE_H264_HARDWARE = 1,
  ENCODER_TYPE_MP3_SOFTWARE = 2,
  ENCODER_TYPE_MP3_HARDWARE = 3,
  EncoderType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  EncoderType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool EncoderType_IsValid(int value);
constexpr EncoderType EncoderType_MIN = ENCODER_TYPE_H264_SOFTWARE;
constexpr EncoderType EncoderType_MAX = ENCODER_TYPE_MP3_HARDWARE;
constexpr int EncoderType_ARRAYSIZE = EncoderType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EncoderType_descriptor();
template<typename T>
inline const std::string& EncoderType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EncoderType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EncoderType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EncoderType_descriptor(), enum_t_value);
}
inline bool EncoderType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EncoderType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EncoderType>(
    EncoderType_descriptor(), name, value);
}
enum Command : int {
  COMMAND_INIT = 0,
  COMMAND_START = 1,
  COMMAND_STOP = 2,
  COMMAND_DESTROY = 3,
  Command_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Command_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Command_IsValid(int value);
constexpr Command Command_MIN = COMMAND_INIT;
constexpr Command Command_MAX = COMMAND_DESTROY;
constexpr int Command_ARRAYSIZE = Command_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Command_descriptor();
template<typename T>
inline const std::string& Command_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Command>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Command_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Command_descriptor(), enum_t_value);
}
inline bool Command_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Command* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Command>(
    Command_descriptor(), name, value);
}
enum ParameterType : int {
  PARAMETER_TYPE_STRING = 0,
  PARAMETER_TYPE_BOOL = 1,
  PARAMETER_TYPE_UINT32 = 2,
  PARAMETER_TYPE_DOUBLE = 3,
  ParameterType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ParameterType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ParameterType_IsValid(int value);
constexpr ParameterType ParameterType_MIN = PARAMETER_TYPE_STRING;
constexpr ParameterType ParameterType_MAX = PARAMETER_TYPE_DOUBLE;
constexpr int ParameterType_ARRAYSIZE = ParameterType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ParameterType_descriptor();
template<typename T>
inline const std::string& ParameterType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ParameterType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ParameterType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ParameterType_descriptor(), enum_t_value);
}
inline bool ParameterType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ParameterType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ParameterType>(
    ParameterType_descriptor(), name, value);
}
enum MessageType : int {
  MESSAGE_TYPE_SERVER_INFO = 0,
  MESSAGE_TYPE_STREAMS_CHANGE = 1,
  MESSAGE_TYPE_STREAM_DATA = 2,
  MessageType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  MessageType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool MessageType_IsValid(int value);
constexpr MessageType MessageType_MIN = MESSAGE_TYPE_SERVER_INFO;
constexpr MessageType MessageType_MAX = MESSAGE_TYPE_STREAM_DATA;
constexpr int MessageType_ARRAYSIZE = MessageType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MessageType_descriptor();
template<typename T>
inline const std::string& MessageType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MessageType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MessageType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MessageType_descriptor(), enum_t_value);
}
inline bool MessageType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MessageType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MessageType>(
    MessageType_descriptor(), name, value);
}
// ===================================================================

class Parameter_ValueString final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:snappyv1.Parameter.ValueString) */ {
 public:
  inline Parameter_ValueString() : Parameter_ValueString(nullptr) {}
  ~Parameter_ValueString() override;
  explicit constexpr Parameter_ValueString(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Parameter_ValueString(const Parameter_ValueString& from);
  Parameter_ValueString(Parameter_ValueString&& from) noexcept
    : Parameter_ValueString() {
    *this = ::std::move(from);
  }

  inline Parameter_ValueString& operator=(const Parameter_ValueString& from) {
    CopyFrom(from);
    return *this;
  }
  inline Parameter_ValueString& operator=(Parameter_ValueString&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Parameter_ValueString& default_instance() {
    return *internal_default_instance();
  }
  static inline const Parameter_ValueString* internal_default_instance() {
    return reinterpret_cast<const Parameter_ValueString*>(
               &_Parameter_ValueString_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Parameter_ValueString& a, Parameter_ValueString& b) {
    a.Swap(&b);
  }
  inline void Swap(Parameter_ValueString* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Parameter_ValueString* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Parameter_ValueString* New() const final {
    return new Parameter_ValueString();
  }

  Parameter_ValueString* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Parameter_ValueString>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Parameter_ValueString& from);
  void MergeFrom(const Parameter_ValueString& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Parameter_ValueString* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "snappyv1.Parameter.ValueString";
  }
  protected:
  explicit Parameter_ValueString(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // string value = 1;
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:snappyv1.Parameter.ValueString)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_snappyv1_2eproto;
};
// -------------------------------------------------------------------

class Parameter_ValueBool final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:snappyv1.Parameter.ValueBool) */ {
 public:
  inline Parameter_ValueBool() : Parameter_ValueBool(nullptr) {}
  ~Parameter_ValueBool() override;
  explicit constexpr Parameter_ValueBool(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Parameter_ValueBool(const Parameter_ValueBool& from);
  Parameter_ValueBool(Parameter_ValueBool&& from) noexcept
    : Parameter_ValueBool() {
    *this = ::std::move(from);
  }

  inline Parameter_ValueBool& operator=(const Parameter_ValueBool& from) {
    CopyFrom(from);
    return *this;
  }
  inline Parameter_ValueBool& operator=(Parameter_ValueBool&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Parameter_ValueBool& default_instance() {
    return *internal_default_instance();
  }
  static inline const Parameter_ValueBool* internal_default_instance() {
    return reinterpret_cast<const Parameter_ValueBool*>(
               &_Parameter_ValueBool_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Parameter_ValueBool& a, Parameter_ValueBool& b) {
    a.Swap(&b);
  }
  inline void Swap(Parameter_ValueBool* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Parameter_ValueBool* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Parameter_ValueBool* New() const final {
    return new Parameter_ValueBool();
  }

  Parameter_ValueBool* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Parameter_ValueBool>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Parameter_ValueBool& from);
  void MergeFrom(const Parameter_ValueBool& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Parameter_ValueBool* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "snappyv1.Parameter.ValueBool";
  }
  protected:
  explicit Parameter_ValueBool(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // bool value = 1;
  void clear_value();
  bool value() const;
  void set_value(bool value);
  private:
  bool _internal_value() const;
  void _internal_set_value(bool value);
  public:

  // @@protoc_insertion_point(class_scope:snappyv1.Parameter.ValueBool)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_snappyv1_2eproto;
};
// -------------------------------------------------------------------

class Parameter_ValueUint32 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:snappyv1.Parameter.ValueUint32) */ {
 public:
  inline Parameter_ValueUint32() : Parameter_ValueUint32(nullptr) {}
  ~Parameter_ValueUint32() override;
  explicit constexpr Parameter_ValueUint32(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Parameter_ValueUint32(const Parameter_ValueUint32& from);
  Parameter_ValueUint32(Parameter_ValueUint32&& from) noexcept
    : Parameter_ValueUint32() {
    *this = ::std::move(from);
  }

  inline Parameter_ValueUint32& operator=(const Parameter_ValueUint32& from) {
    CopyFrom(from);
    return *this;
  }
  inline Parameter_ValueUint32& operator=(Parameter_ValueUint32&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Parameter_ValueUint32& default_instance() {
    return *internal_default_instance();
  }
  static inline const Parameter_ValueUint32* internal_default_instance() {
    return reinterpret_cast<const Parameter_ValueUint32*>(
               &_Parameter_ValueUint32_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Parameter_ValueUint32& a, Parameter_ValueUint32& b) {
    a.Swap(&b);
  }
  inline void Swap(Parameter_ValueUint32* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Parameter_ValueUint32* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Parameter_ValueUint32* New() const final {
    return new Parameter_ValueUint32();
  }

  Parameter_ValueUint32* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Parameter_ValueUint32>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Parameter_ValueUint32& from);
  void MergeFrom(const Parameter_ValueUint32& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Parameter_ValueUint32* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "snappyv1.Parameter.ValueUint32";
  }
  protected:
  explicit Parameter_ValueUint32(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
    kMinFieldNumber = 2,
    kMaxFieldNumber = 3,
  };
  // uint32 value = 1;
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::uint32 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 min = 2;
  bool has_min() const;
  private:
  bool _internal_has_min() const;
  public:
  void clear_min();
  ::PROTOBUF_NAMESPACE_ID::uint32 min() const;
  void set_min(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_min() const;
  void _internal_set_min(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 max = 3;
  bool has_max() const;
  private:
  bool _internal_has_max() const;
  public:
  void clear_max();
  ::PROTOBUF_NAMESPACE_ID::uint32 max() const;
  void set_max(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max() const;
  void _internal_set_max(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:snappyv1.Parameter.ValueUint32)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 value_;
  ::PROTOBUF_NAMESPACE_ID::uint32 min_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_;
  friend struct ::TableStruct_snappyv1_2eproto;
};
// -------------------------------------------------------------------

class Parameter_ValueDouble final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:snappyv1.Parameter.ValueDouble) */ {
 public:
  inline Parameter_ValueDouble() : Parameter_ValueDouble(nullptr) {}
  ~Parameter_ValueDouble() override;
  explicit constexpr Parameter_ValueDouble(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Parameter_ValueDouble(const Parameter_ValueDouble& from);
  Parameter_ValueDouble(Parameter_ValueDouble&& from) noexcept
    : Parameter_ValueDouble() {
    *this = ::std::move(from);
  }

  inline Parameter_ValueDouble& operator=(const Parameter_ValueDouble& from) {
    CopyFrom(from);
    return *this;
  }
  inline Parameter_ValueDouble& operator=(Parameter_ValueDouble&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Parameter_ValueDouble& default_instance() {
    return *internal_default_instance();
  }
  static inline const Parameter_ValueDouble* internal_default_instance() {
    return reinterpret_cast<const Parameter_ValueDouble*>(
               &_Parameter_ValueDouble_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Parameter_ValueDouble& a, Parameter_ValueDouble& b) {
    a.Swap(&b);
  }
  inline void Swap(Parameter_ValueDouble* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Parameter_ValueDouble* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Parameter_ValueDouble* New() const final {
    return new Parameter_ValueDouble();
  }

  Parameter_ValueDouble* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Parameter_ValueDouble>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Parameter_ValueDouble& from);
  void MergeFrom(const Parameter_ValueDouble& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Parameter_ValueDouble* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "snappyv1.Parameter.ValueDouble";
  }
  protected:
  explicit Parameter_ValueDouble(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
    kMinFieldNumber = 2,
    kMaxFieldNumber = 3,
  };
  // double value = 1;
  void clear_value();
  double value() const;
  void set_value(double value);
  private:
  double _internal_value() const;
  void _internal_set_value(double value);
  public:

  // optional double min = 2;
  bool has_min() const;
  private:
  bool _internal_has_min() const;
  public:
  void clear_min();
  double min() const;
  void set_min(double value);
  private:
  double _internal_min() const;
  void _internal_set_min(double value);
  public:

  // optional double max = 3;
  bool has_max() const;
  private:
  bool _internal_has_max() const;
  public:
  void clear_max();
  double max() const;
  void set_max(double value);
  private:
  double _internal_max() const;
  void _internal_set_max(double value);
  public:

  // @@protoc_insertion_point(class_scope:snappyv1.Parameter.ValueDouble)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double value_;
  double min_;
  double max_;
  friend struct ::TableStruct_snappyv1_2eproto;
};
// -------------------------------------------------------------------

class Parameter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:snappyv1.Parameter) */ {
 public:
  inline Parameter() : Parameter(nullptr) {}
  ~Parameter() override;
  explicit constexpr Parameter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Parameter(const Parameter& from);
  Parameter(Parameter&& from) noexcept
    : Parameter() {
    *this = ::std::move(from);
  }

  inline Parameter& operator=(const Parameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline Parameter& operator=(Parameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Parameter& default_instance() {
    return *internal_default_instance();
  }
  enum ValueCase {
    kValueString = 3,
    kValueBool = 4,
    kValueUint32 = 5,
    kValueDouble = 6,
    VALUE_NOT_SET = 0,
  };

  static inline const Parameter* internal_default_instance() {
    return reinterpret_cast<const Parameter*>(
               &_Parameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Parameter& a, Parameter& b) {
    a.Swap(&b);
  }
  inline void Swap(Parameter* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Parameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Parameter* New() const final {
    return new Parameter();
  }

  Parameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Parameter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Parameter& from);
  void MergeFrom(const Parameter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Parameter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "snappyv1.Parameter";
  }
  protected:
  explicit Parameter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Parameter_ValueString ValueString;
  typedef Parameter_ValueBool ValueBool;
  typedef Parameter_ValueUint32 ValueUint32;
  typedef Parameter_ValueDouble ValueDouble;

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 2,
    kTypeFieldNumber = 1,
    kValueStringFieldNumber = 3,
    kValueBoolFieldNumber = 4,
    kValueUint32FieldNumber = 5,
    kValueDoubleFieldNumber = 6,
  };
  // string key = 2;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // .snappyv1.ParameterType type = 1;
  void clear_type();
  ::snappyv1::ParameterType type() const;
  void set_type(::snappyv1::ParameterType value);
  private:
  ::snappyv1::ParameterType _internal_type() const;
  void _internal_set_type(::snappyv1::ParameterType value);
  public:

  // .snappyv1.Parameter.ValueString value_string = 3;
  bool has_value_string() const;
  private:
  bool _internal_has_value_string() const;
  public:
  void clear_value_string();
  const ::snappyv1::Parameter_ValueString& value_string() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::snappyv1::Parameter_ValueString* release_value_string();
  ::snappyv1::Parameter_ValueString* mutable_value_string();
  void set_allocated_value_string(::snappyv1::Parameter_ValueString* value_string);
  private:
  const ::snappyv1::Parameter_ValueString& _internal_value_string() const;
  ::snappyv1::Parameter_ValueString* _internal_mutable_value_string();
  public:
  void unsafe_arena_set_allocated_value_string(
      ::snappyv1::Parameter_ValueString* value_string);
  ::snappyv1::Parameter_ValueString* unsafe_arena_release_value_string();

  // .snappyv1.Parameter.ValueBool value_bool = 4;
  bool has_value_bool() const;
  private:
  bool _internal_has_value_bool() const;
  public:
  void clear_value_bool();
  const ::snappyv1::Parameter_ValueBool& value_bool() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::snappyv1::Parameter_ValueBool* release_value_bool();
  ::snappyv1::Parameter_ValueBool* mutable_value_bool();
  void set_allocated_value_bool(::snappyv1::Parameter_ValueBool* value_bool);
  private:
  const ::snappyv1::Parameter_ValueBool& _internal_value_bool() const;
  ::snappyv1::Parameter_ValueBool* _internal_mutable_value_bool();
  public:
  void unsafe_arena_set_allocated_value_bool(
      ::snappyv1::Parameter_ValueBool* value_bool);
  ::snappyv1::Parameter_ValueBool* unsafe_arena_release_value_bool();

  // .snappyv1.Parameter.ValueUint32 value_uint32 = 5;
  bool has_value_uint32() const;
  private:
  bool _internal_has_value_uint32() const;
  public:
  void clear_value_uint32();
  const ::snappyv1::Parameter_ValueUint32& value_uint32() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::snappyv1::Parameter_ValueUint32* release_value_uint32();
  ::snappyv1::Parameter_ValueUint32* mutable_value_uint32();
  void set_allocated_value_uint32(::snappyv1::Parameter_ValueUint32* value_uint32);
  private:
  const ::snappyv1::Parameter_ValueUint32& _internal_value_uint32() const;
  ::snappyv1::Parameter_ValueUint32* _internal_mutable_value_uint32();
  public:
  void unsafe_arena_set_allocated_value_uint32(
      ::snappyv1::Parameter_ValueUint32* value_uint32);
  ::snappyv1::Parameter_ValueUint32* unsafe_arena_release_value_uint32();

  // .snappyv1.Parameter.ValueDouble value_double = 6;
  bool has_value_double() const;
  private:
  bool _internal_has_value_double() const;
  public:
  void clear_value_double();
  const ::snappyv1::Parameter_ValueDouble& value_double() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::snappyv1::Parameter_ValueDouble* release_value_double();
  ::snappyv1::Parameter_ValueDouble* mutable_value_double();
  void set_allocated_value_double(::snappyv1::Parameter_ValueDouble* value_double);
  private:
  const ::snappyv1::Parameter_ValueDouble& _internal_value_double() const;
  ::snappyv1::Parameter_ValueDouble* _internal_mutable_value_double();
  public:
  void unsafe_arena_set_allocated_value_double(
      ::snappyv1::Parameter_ValueDouble* value_double);
  ::snappyv1::Parameter_ValueDouble* unsafe_arena_release_value_double();

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:snappyv1.Parameter)
 private:
  class _Internal;
  void set_has_value_string();
  void set_has_value_bool();
  void set_has_value_uint32();
  void set_has_value_double();

  inline bool has_value() const;
  inline void clear_has_value();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  int type_;
  union ValueUnion {
    constexpr ValueUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::snappyv1::Parameter_ValueString* value_string_;
    ::snappyv1::Parameter_ValueBool* value_bool_;
    ::snappyv1::Parameter_ValueUint32* value_uint32_;
    ::snappyv1::Parameter_ValueDouble* value_double_;
  } value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_snappyv1_2eproto;
};
// -------------------------------------------------------------------

class Source final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:snappyv1.Source) */ {
 public:
  inline Source() : Source(nullptr) {}
  ~Source() override;
  explicit constexpr Source(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Source(const Source& from);
  Source(Source&& from) noexcept
    : Source() {
    *this = ::std::move(from);
  }

  inline Source& operator=(const Source& from) {
    CopyFrom(from);
    return *this;
  }
  inline Source& operator=(Source&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Source& default_instance() {
    return *internal_default_instance();
  }
  static inline const Source* internal_default_instance() {
    return reinterpret_cast<const Source*>(
               &_Source_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Source& a, Source& b) {
    a.Swap(&b);
  }
  inline void Swap(Source* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Source* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Source* New() const final {
    return new Source();
  }

  Source* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Source>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Source& from);
  void MergeFrom(const Source& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Source* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "snappyv1.Source";
  }
  protected:
  explicit Source(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParametersFieldNumber = 3,
    kTypeFieldNumber = 1,
    kSubTypeFieldNumber = 2,
  };
  // repeated .snappyv1.Parameter parameters = 3;
  int parameters_size() const;
  private:
  int _internal_parameters_size() const;
  public:
  void clear_parameters();
  ::snappyv1::Parameter* mutable_parameters(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::snappyv1::Parameter >*
      mutable_parameters();
  private:
  const ::snappyv1::Parameter& _internal_parameters(int index) const;
  ::snappyv1::Parameter* _internal_add_parameters();
  public:
  const ::snappyv1::Parameter& parameters(int index) const;
  ::snappyv1::Parameter* add_parameters();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::snappyv1::Parameter >&
      parameters() const;

  // .snappyv1.SourceType type = 1;
  void clear_type();
  ::snappyv1::SourceType type() const;
  void set_type(::snappyv1::SourceType value);
  private:
  ::snappyv1::SourceType _internal_type() const;
  void _internal_set_type(::snappyv1::SourceType value);
  public:

  // .snappyv1.SourceSubType sub_type = 2;
  void clear_sub_type();
  ::snappyv1::SourceSubType sub_type() const;
  void set_sub_type(::snappyv1::SourceSubType value);
  private:
  ::snappyv1::SourceSubType _internal_sub_type() const;
  void _internal_set_sub_type(::snappyv1::SourceSubType value);
  public:

  // @@protoc_insertion_point(class_scope:snappyv1.Source)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::snappyv1::Parameter > parameters_;
  int type_;
  int sub_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_snappyv1_2eproto;
};
// -------------------------------------------------------------------

class Encoder final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:snappyv1.Encoder) */ {
 public:
  inline Encoder() : Encoder(nullptr) {}
  ~Encoder() override;
  explicit constexpr Encoder(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Encoder(const Encoder& from);
  Encoder(Encoder&& from) noexcept
    : Encoder() {
    *this = ::std::move(from);
  }

  inline Encoder& operator=(const Encoder& from) {
    CopyFrom(from);
    return *this;
  }
  inline Encoder& operator=(Encoder&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Encoder& default_instance() {
    return *internal_default_instance();
  }
  static inline const Encoder* internal_default_instance() {
    return reinterpret_cast<const Encoder*>(
               &_Encoder_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Encoder& a, Encoder& b) {
    a.Swap(&b);
  }
  inline void Swap(Encoder* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Encoder* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Encoder* New() const final {
    return new Encoder();
  }

  Encoder* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Encoder>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Encoder& from);
  void MergeFrom(const Encoder& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Encoder* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "snappyv1.Encoder";
  }
  protected:
  explicit Encoder(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParametersFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // repeated .snappyv1.Parameter parameters = 2;
  int parameters_size() const;
  private:
  int _internal_parameters_size() const;
  public:
  void clear_parameters();
  ::snappyv1::Parameter* mutable_parameters(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::snappyv1::Parameter >*
      mutable_parameters();
  private:
  const ::snappyv1::Parameter& _internal_parameters(int index) const;
  ::snappyv1::Parameter* _internal_add_parameters();
  public:
  const ::snappyv1::Parameter& parameters(int index) const;
  ::snappyv1::Parameter* add_parameters();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::snappyv1::Parameter >&
      parameters() const;

  // .snappyv1.EncoderType type = 1;
  void clear_type();
  ::snappyv1::EncoderType type() const;
  void set_type(::snappyv1::EncoderType value);
  private:
  ::snappyv1::EncoderType _internal_type() const;
  void _internal_set_type(::snappyv1::EncoderType value);
  public:

  // @@protoc_insertion_point(class_scope:snappyv1.Encoder)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::snappyv1::Parameter > parameters_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_snappyv1_2eproto;
};
// -------------------------------------------------------------------

class ServerInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:snappyv1.ServerInfo) */ {
 public:
  inline ServerInfo() : ServerInfo(nullptr) {}
  ~ServerInfo() override;
  explicit constexpr ServerInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServerInfo(const ServerInfo& from);
  ServerInfo(ServerInfo&& from) noexcept
    : ServerInfo() {
    *this = ::std::move(from);
  }

  inline ServerInfo& operator=(const ServerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerInfo& operator=(ServerInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ServerInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServerInfo* internal_default_instance() {
    return reinterpret_cast<const ServerInfo*>(
               &_ServerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ServerInfo& a, ServerInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServerInfo* New() const final {
    return new ServerInfo();
  }

  ServerInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServerInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServerInfo& from);
  void MergeFrom(const ServerInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "snappyv1.ServerInfo";
  }
  protected:
  explicit ServerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAvailableSourcesFieldNumber = 3,
    kAvailableEncodersFieldNumber = 4,
    kPlatformFieldNumber = 1,
  };
  // repeated .snappyv1.Source available_sources = 3;
  int available_sources_size() const;
  private:
  int _internal_available_sources_size() const;
  public:
  void clear_available_sources();
  ::snappyv1::Source* mutable_available_sources(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::snappyv1::Source >*
      mutable_available_sources();
  private:
  const ::snappyv1::Source& _internal_available_sources(int index) const;
  ::snappyv1::Source* _internal_add_available_sources();
  public:
  const ::snappyv1::Source& available_sources(int index) const;
  ::snappyv1::Source* add_available_sources();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::snappyv1::Source >&
      available_sources() const;

  // repeated .snappyv1.Encoder available_encoders = 4;
  int available_encoders_size() const;
  private:
  int _internal_available_encoders_size() const;
  public:
  void clear_available_encoders();
  ::snappyv1::Encoder* mutable_available_encoders(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::snappyv1::Encoder >*
      mutable_available_encoders();
  private:
  const ::snappyv1::Encoder& _internal_available_encoders(int index) const;
  ::snappyv1::Encoder* _internal_add_available_encoders();
  public:
  const ::snappyv1::Encoder& available_encoders(int index) const;
  ::snappyv1::Encoder* add_available_encoders();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::snappyv1::Encoder >&
      available_encoders() const;

  // .snappyv1.Platform platform = 1;
  void clear_platform();
  ::snappyv1::Platform platform() const;
  void set_platform(::snappyv1::Platform value);
  private:
  ::snappyv1::Platform _internal_platform() const;
  void _internal_set_platform(::snappyv1::Platform value);
  public:

  // @@protoc_insertion_point(class_scope:snappyv1.ServerInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::snappyv1::Source > available_sources_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::snappyv1::Encoder > available_encoders_;
  int platform_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_snappyv1_2eproto;
};
// -------------------------------------------------------------------

class StreamsChange_StreamChange final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:snappyv1.StreamsChange.StreamChange) */ {
 public:
  inline StreamsChange_StreamChange() : StreamsChange_StreamChange(nullptr) {}
  ~StreamsChange_StreamChange() override;
  explicit constexpr StreamsChange_StreamChange(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StreamsChange_StreamChange(const StreamsChange_StreamChange& from);
  StreamsChange_StreamChange(StreamsChange_StreamChange&& from) noexcept
    : StreamsChange_StreamChange() {
    *this = ::std::move(from);
  }

  inline StreamsChange_StreamChange& operator=(const StreamsChange_StreamChange& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamsChange_StreamChange& operator=(StreamsChange_StreamChange&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StreamsChange_StreamChange& default_instance() {
    return *internal_default_instance();
  }
  static inline const StreamsChange_StreamChange* internal_default_instance() {
    return reinterpret_cast<const StreamsChange_StreamChange*>(
               &_StreamsChange_StreamChange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(StreamsChange_StreamChange& a, StreamsChange_StreamChange& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamsChange_StreamChange* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamsChange_StreamChange* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StreamsChange_StreamChange* New() const final {
    return new StreamsChange_StreamChange();
  }

  StreamsChange_StreamChange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StreamsChange_StreamChange>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StreamsChange_StreamChange& from);
  void MergeFrom(const StreamsChange_StreamChange& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamsChange_StreamChange* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "snappyv1.StreamsChange.StreamChange";
  }
  protected:
  explicit StreamsChange_StreamChange(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourceFieldNumber = 2,
    kEncoderFieldNumber = 3,
    kIdFieldNumber = 1,
    kCommandFieldNumber = 4,
  };
  // optional .snappyv1.Source source = 2;
  bool has_source() const;
  private:
  bool _internal_has_source() const;
  public:
  void clear_source();
  const ::snappyv1::Source& source() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::snappyv1::Source* release_source();
  ::snappyv1::Source* mutable_source();
  void set_allocated_source(::snappyv1::Source* source);
  private:
  const ::snappyv1::Source& _internal_source() const;
  ::snappyv1::Source* _internal_mutable_source();
  public:
  void unsafe_arena_set_allocated_source(
      ::snappyv1::Source* source);
  ::snappyv1::Source* unsafe_arena_release_source();

  // optional .snappyv1.Encoder encoder = 3;
  bool has_encoder() const;
  private:
  bool _internal_has_encoder() const;
  public:
  void clear_encoder();
  const ::snappyv1::Encoder& encoder() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::snappyv1::Encoder* release_encoder();
  ::snappyv1::Encoder* mutable_encoder();
  void set_allocated_encoder(::snappyv1::Encoder* encoder);
  private:
  const ::snappyv1::Encoder& _internal_encoder() const;
  ::snappyv1::Encoder* _internal_mutable_encoder();
  public:
  void unsafe_arena_set_allocated_encoder(
      ::snappyv1::Encoder* encoder);
  ::snappyv1::Encoder* unsafe_arena_release_encoder();

  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .snappyv1.Command command = 4;
  bool has_command() const;
  private:
  bool _internal_has_command() const;
  public:
  void clear_command();
  ::snappyv1::Command command() const;
  void set_command(::snappyv1::Command value);
  private:
  ::snappyv1::Command _internal_command() const;
  void _internal_set_command(::snappyv1::Command value);
  public:

  // @@protoc_insertion_point(class_scope:snappyv1.StreamsChange.StreamChange)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::snappyv1::Source* source_;
  ::snappyv1::Encoder* encoder_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  int command_;
  friend struct ::TableStruct_snappyv1_2eproto;
};
// -------------------------------------------------------------------

class StreamsChange final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:snappyv1.StreamsChange) */ {
 public:
  inline StreamsChange() : StreamsChange(nullptr) {}
  ~StreamsChange() override;
  explicit constexpr StreamsChange(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StreamsChange(const StreamsChange& from);
  StreamsChange(StreamsChange&& from) noexcept
    : StreamsChange() {
    *this = ::std::move(from);
  }

  inline StreamsChange& operator=(const StreamsChange& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamsChange& operator=(StreamsChange&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StreamsChange& default_instance() {
    return *internal_default_instance();
  }
  static inline const StreamsChange* internal_default_instance() {
    return reinterpret_cast<const StreamsChange*>(
               &_StreamsChange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(StreamsChange& a, StreamsChange& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamsChange* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamsChange* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StreamsChange* New() const final {
    return new StreamsChange();
  }

  StreamsChange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StreamsChange>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StreamsChange& from);
  void MergeFrom(const StreamsChange& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamsChange* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "snappyv1.StreamsChange";
  }
  protected:
  explicit StreamsChange(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef StreamsChange_StreamChange StreamChange;

  // accessors -------------------------------------------------------

  enum : int {
    kStreamsFieldNumber = 2,
  };
  // repeated .snappyv1.StreamsChange.StreamChange streams = 2;
  int streams_size() const;
  private:
  int _internal_streams_size() const;
  public:
  void clear_streams();
  ::snappyv1::StreamsChange_StreamChange* mutable_streams(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::snappyv1::StreamsChange_StreamChange >*
      mutable_streams();
  private:
  const ::snappyv1::StreamsChange_StreamChange& _internal_streams(int index) const;
  ::snappyv1::StreamsChange_StreamChange* _internal_add_streams();
  public:
  const ::snappyv1::StreamsChange_StreamChange& streams(int index) const;
  ::snappyv1::StreamsChange_StreamChange* add_streams();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::snappyv1::StreamsChange_StreamChange >&
      streams() const;

  // @@protoc_insertion_point(class_scope:snappyv1.StreamsChange)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::snappyv1::StreamsChange_StreamChange > streams_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_snappyv1_2eproto;
};
// -------------------------------------------------------------------

class StreamStatistics final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:snappyv1.StreamStatistics) */ {
 public:
  inline StreamStatistics() : StreamStatistics(nullptr) {}
  ~StreamStatistics() override;
  explicit constexpr StreamStatistics(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StreamStatistics(const StreamStatistics& from);
  StreamStatistics(StreamStatistics&& from) noexcept
    : StreamStatistics() {
    *this = ::std::move(from);
  }

  inline StreamStatistics& operator=(const StreamStatistics& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamStatistics& operator=(StreamStatistics&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StreamStatistics& default_instance() {
    return *internal_default_instance();
  }
  static inline const StreamStatistics* internal_default_instance() {
    return reinterpret_cast<const StreamStatistics*>(
               &_StreamStatistics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(StreamStatistics& a, StreamStatistics& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamStatistics* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamStatistics* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StreamStatistics* New() const final {
    return new StreamStatistics();
  }

  StreamStatistics* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StreamStatistics>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StreamStatistics& from);
  void MergeFrom(const StreamStatistics& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamStatistics* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "snappyv1.StreamStatistics";
  }
  protected:
  explicit StreamStatistics(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLastFrameFieldNumber = 1,
    kAverageFrameQpFieldNumber = 2,
    kEncodeTsStartMsFieldNumber = 3,
    kEncodeTsEndMsFieldNumber = 4,
    kTxTsStartMsFieldNumber = 5,
    kTxTsEndMsFieldNumber = 6,
  };
  // uint32 last_frame = 1;
  void clear_last_frame();
  ::PROTOBUF_NAMESPACE_ID::uint32 last_frame() const;
  void set_last_frame(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_last_frame() const;
  void _internal_set_last_frame(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 average_frame_qp = 2;
  void clear_average_frame_qp();
  ::PROTOBUF_NAMESPACE_ID::uint32 average_frame_qp() const;
  void set_average_frame_qp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_average_frame_qp() const;
  void _internal_set_average_frame_qp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 encode_ts_start_ms = 3;
  void clear_encode_ts_start_ms();
  ::PROTOBUF_NAMESPACE_ID::uint32 encode_ts_start_ms() const;
  void set_encode_ts_start_ms(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_encode_ts_start_ms() const;
  void _internal_set_encode_ts_start_ms(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 encode_ts_end_ms = 4;
  void clear_encode_ts_end_ms();
  ::PROTOBUF_NAMESPACE_ID::uint32 encode_ts_end_ms() const;
  void set_encode_ts_end_ms(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_encode_ts_end_ms() const;
  void _internal_set_encode_ts_end_ms(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 tx_ts_start_ms = 5;
  void clear_tx_ts_start_ms();
  ::PROTOBUF_NAMESPACE_ID::uint32 tx_ts_start_ms() const;
  void set_tx_ts_start_ms(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tx_ts_start_ms() const;
  void _internal_set_tx_ts_start_ms(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 tx_ts_end_ms = 6;
  void clear_tx_ts_end_ms();
  ::PROTOBUF_NAMESPACE_ID::uint32 tx_ts_end_ms() const;
  void set_tx_ts_end_ms(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tx_ts_end_ms() const;
  void _internal_set_tx_ts_end_ms(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:snappyv1.StreamStatistics)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 last_frame_;
  ::PROTOBUF_NAMESPACE_ID::uint32 average_frame_qp_;
  ::PROTOBUF_NAMESPACE_ID::uint32 encode_ts_start_ms_;
  ::PROTOBUF_NAMESPACE_ID::uint32 encode_ts_end_ms_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tx_ts_start_ms_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tx_ts_end_ms_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_snappyv1_2eproto;
};
// -------------------------------------------------------------------

class StreamData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:snappyv1.StreamData) */ {
 public:
  inline StreamData() : StreamData(nullptr) {}
  ~StreamData() override;
  explicit constexpr StreamData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StreamData(const StreamData& from);
  StreamData(StreamData&& from) noexcept
    : StreamData() {
    *this = ::std::move(from);
  }

  inline StreamData& operator=(const StreamData& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamData& operator=(StreamData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StreamData& default_instance() {
    return *internal_default_instance();
  }
  static inline const StreamData* internal_default_instance() {
    return reinterpret_cast<const StreamData*>(
               &_StreamData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(StreamData& a, StreamData& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamData* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StreamData* New() const final {
    return new StreamData();
  }

  StreamData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StreamData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StreamData& from);
  void MergeFrom(const StreamData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "snappyv1.StreamData";
  }
  protected:
  explicit StreamData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPayloadFieldNumber = 2,
    kStreamIdFieldNumber = 1,
  };
  // bytes payload = 2;
  void clear_payload();
  const std::string& payload() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_payload(ArgT0&& arg0, ArgT... args);
  std::string* mutable_payload();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_payload();
  void set_allocated_payload(std::string* payload);
  private:
  const std::string& _internal_payload() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_payload(const std::string& value);
  std::string* _internal_mutable_payload();
  public:

  // uint32 stream_id = 1;
  void clear_stream_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 stream_id() const;
  void set_stream_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_stream_id() const;
  void _internal_set_stream_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:snappyv1.StreamData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_;
  ::PROTOBUF_NAMESPACE_ID::uint32 stream_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_snappyv1_2eproto;
};
// -------------------------------------------------------------------

class Message final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:snappyv1.Message) */ {
 public:
  inline Message() : Message(nullptr) {}
  ~Message() override;
  explicit constexpr Message(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Message(const Message& from);
  Message(Message&& from) noexcept
    : Message() {
    *this = ::std::move(from);
  }

  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message& operator=(Message&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message& default_instance() {
    return *internal_default_instance();
  }
  enum MessageCase {
    kServerInfo = 2,
    kStreamChange = 3,
    kStreamData = 4,
    MESSAGE_NOT_SET = 0,
  };

  static inline const Message* internal_default_instance() {
    return reinterpret_cast<const Message*>(
               &_Message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(Message& a, Message& b) {
    a.Swap(&b);
  }
  inline void Swap(Message* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Message* New() const final {
    return new Message();
  }

  Message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Message>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Message& from);
  void MergeFrom(const Message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "snappyv1.Message";
  }
  protected:
  explicit Message(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kServerInfoFieldNumber = 2,
    kStreamChangeFieldNumber = 3,
    kStreamDataFieldNumber = 4,
  };
  // .snappyv1.MessageType type = 1;
  void clear_type();
  ::snappyv1::MessageType type() const;
  void set_type(::snappyv1::MessageType value);
  private:
  ::snappyv1::MessageType _internal_type() const;
  void _internal_set_type(::snappyv1::MessageType value);
  public:

  // .snappyv1.ServerInfo server_info = 2;
  bool has_server_info() const;
  private:
  bool _internal_has_server_info() const;
  public:
  void clear_server_info();
  const ::snappyv1::ServerInfo& server_info() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::snappyv1::ServerInfo* release_server_info();
  ::snappyv1::ServerInfo* mutable_server_info();
  void set_allocated_server_info(::snappyv1::ServerInfo* server_info);
  private:
  const ::snappyv1::ServerInfo& _internal_server_info() const;
  ::snappyv1::ServerInfo* _internal_mutable_server_info();
  public:
  void unsafe_arena_set_allocated_server_info(
      ::snappyv1::ServerInfo* server_info);
  ::snappyv1::ServerInfo* unsafe_arena_release_server_info();

  // .snappyv1.StreamsChange stream_change = 3;
  bool has_stream_change() const;
  private:
  bool _internal_has_stream_change() const;
  public:
  void clear_stream_change();
  const ::snappyv1::StreamsChange& stream_change() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::snappyv1::StreamsChange* release_stream_change();
  ::snappyv1::StreamsChange* mutable_stream_change();
  void set_allocated_stream_change(::snappyv1::StreamsChange* stream_change);
  private:
  const ::snappyv1::StreamsChange& _internal_stream_change() const;
  ::snappyv1::StreamsChange* _internal_mutable_stream_change();
  public:
  void unsafe_arena_set_allocated_stream_change(
      ::snappyv1::StreamsChange* stream_change);
  ::snappyv1::StreamsChange* unsafe_arena_release_stream_change();

  // .snappyv1.StreamData stream_data = 4;
  bool has_stream_data() const;
  private:
  bool _internal_has_stream_data() const;
  public:
  void clear_stream_data();
  const ::snappyv1::StreamData& stream_data() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::snappyv1::StreamData* release_stream_data();
  ::snappyv1::StreamData* mutable_stream_data();
  void set_allocated_stream_data(::snappyv1::StreamData* stream_data);
  private:
  const ::snappyv1::StreamData& _internal_stream_data() const;
  ::snappyv1::StreamData* _internal_mutable_stream_data();
  public:
  void unsafe_arena_set_allocated_stream_data(
      ::snappyv1::StreamData* stream_data);
  ::snappyv1::StreamData* unsafe_arena_release_stream_data();

  void clear_message();
  MessageCase message_case() const;
  // @@protoc_insertion_point(class_scope:snappyv1.Message)
 private:
  class _Internal;
  void set_has_server_info();
  void set_has_stream_change();
  void set_has_stream_data();

  inline bool has_message() const;
  inline void clear_has_message();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int type_;
  union MessageUnion {
    constexpr MessageUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::snappyv1::ServerInfo* server_info_;
    ::snappyv1::StreamsChange* stream_change_;
    ::snappyv1::StreamData* stream_data_;
  } message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_snappyv1_2eproto;
};
// -------------------------------------------------------------------

class StreamDataPointer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:snappyv1.StreamDataPointer) */ {
 public:
  inline StreamDataPointer() : StreamDataPointer(nullptr) {}
  ~StreamDataPointer() override;
  explicit constexpr StreamDataPointer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StreamDataPointer(const StreamDataPointer& from);
  StreamDataPointer(StreamDataPointer&& from) noexcept
    : StreamDataPointer() {
    *this = ::std::move(from);
  }

  inline StreamDataPointer& operator=(const StreamDataPointer& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamDataPointer& operator=(StreamDataPointer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StreamDataPointer& default_instance() {
    return *internal_default_instance();
  }
  static inline const StreamDataPointer* internal_default_instance() {
    return reinterpret_cast<const StreamDataPointer*>(
               &_StreamDataPointer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(StreamDataPointer& a, StreamDataPointer& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamDataPointer* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamDataPointer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StreamDataPointer* New() const final {
    return new StreamDataPointer();
  }

  StreamDataPointer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StreamDataPointer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StreamDataPointer& from);
  void MergeFrom(const StreamDataPointer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamDataPointer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "snappyv1.StreamDataPointer";
  }
  protected:
  explicit StreamDataPointer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAbsxFieldNumber = 1,
    kAbsyFieldNumber = 2,
    kMaskFieldNumber = 3,
  };
  // uint32 absx = 1;
  void clear_absx();
  ::PROTOBUF_NAMESPACE_ID::uint32 absx() const;
  void set_absx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_absx() const;
  void _internal_set_absx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 absy = 2;
  void clear_absy();
  ::PROTOBUF_NAMESPACE_ID::uint32 absy() const;
  void set_absy(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_absy() const;
  void _internal_set_absy(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional int32 mask = 3;
  bool has_mask() const;
  private:
  bool _internal_has_mask() const;
  public:
  void clear_mask();
  ::PROTOBUF_NAMESPACE_ID::int32 mask() const;
  void set_mask(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mask() const;
  void _internal_set_mask(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:snappyv1.StreamDataPointer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 absx_;
  ::PROTOBUF_NAMESPACE_ID::uint32 absy_;
  ::PROTOBUF_NAMESPACE_ID::int32 mask_;
  friend struct ::TableStruct_snappyv1_2eproto;
};
// -------------------------------------------------------------------

class StreamDataKeyboard final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:snappyv1.StreamDataKeyboard) */ {
 public:
  inline StreamDataKeyboard() : StreamDataKeyboard(nullptr) {}
  ~StreamDataKeyboard() override;
  explicit constexpr StreamDataKeyboard(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StreamDataKeyboard(const StreamDataKeyboard& from);
  StreamDataKeyboard(StreamDataKeyboard&& from) noexcept
    : StreamDataKeyboard() {
    *this = ::std::move(from);
  }

  inline StreamDataKeyboard& operator=(const StreamDataKeyboard& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamDataKeyboard& operator=(StreamDataKeyboard&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StreamDataKeyboard& default_instance() {
    return *internal_default_instance();
  }
  static inline const StreamDataKeyboard* internal_default_instance() {
    return reinterpret_cast<const StreamDataKeyboard*>(
               &_StreamDataKeyboard_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(StreamDataKeyboard& a, StreamDataKeyboard& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamDataKeyboard* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamDataKeyboard* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StreamDataKeyboard* New() const final {
    return new StreamDataKeyboard();
  }

  StreamDataKeyboard* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StreamDataKeyboard>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StreamDataKeyboard& from);
  void MergeFrom(const StreamDataKeyboard& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamDataKeyboard* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "snappyv1.StreamDataKeyboard";
  }
  protected:
  explicit StreamDataKeyboard(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeysymFieldNumber = 1,
    kKeycodeFieldNumber = 2,
    kDownFieldNumber = 3,
  };
  // uint32 keysym = 1;
  void clear_keysym();
  ::PROTOBUF_NAMESPACE_ID::uint32 keysym() const;
  void set_keysym(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_keysym() const;
  void _internal_set_keysym(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 keycode = 2;
  void clear_keycode();
  ::PROTOBUF_NAMESPACE_ID::uint32 keycode() const;
  void set_keycode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_keycode() const;
  void _internal_set_keycode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool down = 3;
  void clear_down();
  bool down() const;
  void set_down(bool value);
  private:
  bool _internal_down() const;
  void _internal_set_down(bool value);
  public:

  // @@protoc_insertion_point(class_scope:snappyv1.StreamDataKeyboard)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 keysym_;
  ::PROTOBUF_NAMESPACE_ID::uint32 keycode_;
  bool down_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_snappyv1_2eproto;
};
// -------------------------------------------------------------------

class StreamDataCursor final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:snappyv1.StreamDataCursor) */ {
 public:
  inline StreamDataCursor() : StreamDataCursor(nullptr) {}
  ~StreamDataCursor() override;
  explicit constexpr StreamDataCursor(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StreamDataCursor(const StreamDataCursor& from);
  StreamDataCursor(StreamDataCursor&& from) noexcept
    : StreamDataCursor() {
    *this = ::std::move(from);
  }

  inline StreamDataCursor& operator=(const StreamDataCursor& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamDataCursor& operator=(StreamDataCursor&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StreamDataCursor& default_instance() {
    return *internal_default_instance();
  }
  static inline const StreamDataCursor* internal_default_instance() {
    return reinterpret_cast<const StreamDataCursor*>(
               &_StreamDataCursor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(StreamDataCursor& a, StreamDataCursor& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamDataCursor* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamDataCursor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StreamDataCursor* New() const final {
    return new StreamDataCursor();
  }

  StreamDataCursor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StreamDataCursor>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StreamDataCursor& from);
  void MergeFrom(const StreamDataCursor& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamDataCursor* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "snappyv1.StreamDataCursor";
  }
  protected:
  explicit StreamDataCursor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImageFieldNumber = 5,
    kWidthFieldNumber = 1,
    kHeightFieldNumber = 2,
    kHotxFieldNumber = 3,
    kHotyFieldNumber = 4,
  };
  // bytes image = 5;
  void clear_image();
  const std::string& image() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_image(ArgT0&& arg0, ArgT... args);
  std::string* mutable_image();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_image();
  void set_allocated_image(std::string* image);
  private:
  const std::string& _internal_image() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_image(const std::string& value);
  std::string* _internal_mutable_image();
  public:

  // uint32 width = 1;
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::uint32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_width() const;
  void _internal_set_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 height = 2;
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::uint32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 hotx = 3;
  void clear_hotx();
  ::PROTOBUF_NAMESPACE_ID::uint32 hotx() const;
  void set_hotx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_hotx() const;
  void _internal_set_hotx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 hoty = 4;
  void clear_hoty();
  ::PROTOBUF_NAMESPACE_ID::uint32 hoty() const;
  void set_hoty(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_hoty() const;
  void _internal_set_hoty(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:snappyv1.StreamDataCursor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_;
  ::PROTOBUF_NAMESPACE_ID::uint32 width_;
  ::PROTOBUF_NAMESPACE_ID::uint32 height_;
  ::PROTOBUF_NAMESPACE_ID::uint32 hotx_;
  ::PROTOBUF_NAMESPACE_ID::uint32 hoty_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_snappyv1_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Parameter_ValueString

// string value = 1;
inline void Parameter_ValueString::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& Parameter_ValueString::value() const {
  // @@protoc_insertion_point(field_get:snappyv1.Parameter.ValueString.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Parameter_ValueString::set_value(ArgT0&& arg0, ArgT... args) {
 
 value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:snappyv1.Parameter.ValueString.value)
}
inline std::string* Parameter_ValueString::mutable_value() {
  // @@protoc_insertion_point(field_mutable:snappyv1.Parameter.ValueString.value)
  return _internal_mutable_value();
}
inline const std::string& Parameter_ValueString::_internal_value() const {
  return value_.Get();
}
inline void Parameter_ValueString::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Parameter_ValueString::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Parameter_ValueString::release_value() {
  // @@protoc_insertion_point(field_release:snappyv1.Parameter.ValueString.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Parameter_ValueString::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:snappyv1.Parameter.ValueString.value)
}

// -------------------------------------------------------------------

// Parameter_ValueBool

// bool value = 1;
inline void Parameter_ValueBool::clear_value() {
  value_ = false;
}
inline bool Parameter_ValueBool::_internal_value() const {
  return value_;
}
inline bool Parameter_ValueBool::value() const {
  // @@protoc_insertion_point(field_get:snappyv1.Parameter.ValueBool.value)
  return _internal_value();
}
inline void Parameter_ValueBool::_internal_set_value(bool value) {
  
  value_ = value;
}
inline void Parameter_ValueBool::set_value(bool value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:snappyv1.Parameter.ValueBool.value)
}

// -------------------------------------------------------------------

// Parameter_ValueUint32

// uint32 value = 1;
inline void Parameter_ValueUint32::clear_value() {
  value_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Parameter_ValueUint32::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Parameter_ValueUint32::value() const {
  // @@protoc_insertion_point(field_get:snappyv1.Parameter.ValueUint32.value)
  return _internal_value();
}
inline void Parameter_ValueUint32::_internal_set_value(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  value_ = value;
}
inline void Parameter_ValueUint32::set_value(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:snappyv1.Parameter.ValueUint32.value)
}

// optional uint32 min = 2;
inline bool Parameter_ValueUint32::_internal_has_min() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Parameter_ValueUint32::has_min() const {
  return _internal_has_min();
}
inline void Parameter_ValueUint32::clear_min() {
  min_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Parameter_ValueUint32::_internal_min() const {
  return min_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Parameter_ValueUint32::min() const {
  // @@protoc_insertion_point(field_get:snappyv1.Parameter.ValueUint32.min)
  return _internal_min();
}
inline void Parameter_ValueUint32::_internal_set_min(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  min_ = value;
}
inline void Parameter_ValueUint32::set_min(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_min(value);
  // @@protoc_insertion_point(field_set:snappyv1.Parameter.ValueUint32.min)
}

// optional uint32 max = 3;
inline bool Parameter_ValueUint32::_internal_has_max() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Parameter_ValueUint32::has_max() const {
  return _internal_has_max();
}
inline void Parameter_ValueUint32::clear_max() {
  max_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Parameter_ValueUint32::_internal_max() const {
  return max_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Parameter_ValueUint32::max() const {
  // @@protoc_insertion_point(field_get:snappyv1.Parameter.ValueUint32.max)
  return _internal_max();
}
inline void Parameter_ValueUint32::_internal_set_max(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  max_ = value;
}
inline void Parameter_ValueUint32::set_max(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max(value);
  // @@protoc_insertion_point(field_set:snappyv1.Parameter.ValueUint32.max)
}

// -------------------------------------------------------------------

// Parameter_ValueDouble

// double value = 1;
inline void Parameter_ValueDouble::clear_value() {
  value_ = 0;
}
inline double Parameter_ValueDouble::_internal_value() const {
  return value_;
}
inline double Parameter_ValueDouble::value() const {
  // @@protoc_insertion_point(field_get:snappyv1.Parameter.ValueDouble.value)
  return _internal_value();
}
inline void Parameter_ValueDouble::_internal_set_value(double value) {
  
  value_ = value;
}
inline void Parameter_ValueDouble::set_value(double value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:snappyv1.Parameter.ValueDouble.value)
}

// optional double min = 2;
inline bool Parameter_ValueDouble::_internal_has_min() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Parameter_ValueDouble::has_min() const {
  return _internal_has_min();
}
inline void Parameter_ValueDouble::clear_min() {
  min_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double Parameter_ValueDouble::_internal_min() const {
  return min_;
}
inline double Parameter_ValueDouble::min() const {
  // @@protoc_insertion_point(field_get:snappyv1.Parameter.ValueDouble.min)
  return _internal_min();
}
inline void Parameter_ValueDouble::_internal_set_min(double value) {
  _has_bits_[0] |= 0x00000001u;
  min_ = value;
}
inline void Parameter_ValueDouble::set_min(double value) {
  _internal_set_min(value);
  // @@protoc_insertion_point(field_set:snappyv1.Parameter.ValueDouble.min)
}

// optional double max = 3;
inline bool Parameter_ValueDouble::_internal_has_max() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Parameter_ValueDouble::has_max() const {
  return _internal_has_max();
}
inline void Parameter_ValueDouble::clear_max() {
  max_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double Parameter_ValueDouble::_internal_max() const {
  return max_;
}
inline double Parameter_ValueDouble::max() const {
  // @@protoc_insertion_point(field_get:snappyv1.Parameter.ValueDouble.max)
  return _internal_max();
}
inline void Parameter_ValueDouble::_internal_set_max(double value) {
  _has_bits_[0] |= 0x00000002u;
  max_ = value;
}
inline void Parameter_ValueDouble::set_max(double value) {
  _internal_set_max(value);
  // @@protoc_insertion_point(field_set:snappyv1.Parameter.ValueDouble.max)
}

// -------------------------------------------------------------------

// Parameter

// .snappyv1.ParameterType type = 1;
inline void Parameter::clear_type() {
  type_ = 0;
}
inline ::snappyv1::ParameterType Parameter::_internal_type() const {
  return static_cast< ::snappyv1::ParameterType >(type_);
}
inline ::snappyv1::ParameterType Parameter::type() const {
  // @@protoc_insertion_point(field_get:snappyv1.Parameter.type)
  return _internal_type();
}
inline void Parameter::_internal_set_type(::snappyv1::ParameterType value) {
  
  type_ = value;
}
inline void Parameter::set_type(::snappyv1::ParameterType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:snappyv1.Parameter.type)
}

// string key = 2;
inline void Parameter::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& Parameter::key() const {
  // @@protoc_insertion_point(field_get:snappyv1.Parameter.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Parameter::set_key(ArgT0&& arg0, ArgT... args) {
 
 key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:snappyv1.Parameter.key)
}
inline std::string* Parameter::mutable_key() {
  // @@protoc_insertion_point(field_mutable:snappyv1.Parameter.key)
  return _internal_mutable_key();
}
inline const std::string& Parameter::_internal_key() const {
  return key_.Get();
}
inline void Parameter::_internal_set_key(const std::string& value) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Parameter::_internal_mutable_key() {
  
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Parameter::release_key() {
  // @@protoc_insertion_point(field_release:snappyv1.Parameter.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Parameter::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:snappyv1.Parameter.key)
}

// .snappyv1.Parameter.ValueString value_string = 3;
inline bool Parameter::_internal_has_value_string() const {
  return value_case() == kValueString;
}
inline bool Parameter::has_value_string() const {
  return _internal_has_value_string();
}
inline void Parameter::set_has_value_string() {
  _oneof_case_[0] = kValueString;
}
inline void Parameter::clear_value_string() {
  if (_internal_has_value_string()) {
    if (GetArenaForAllocation() == nullptr) {
      delete value_.value_string_;
    }
    clear_has_value();
  }
}
inline ::snappyv1::Parameter_ValueString* Parameter::release_value_string() {
  // @@protoc_insertion_point(field_release:snappyv1.Parameter.value_string)
  if (_internal_has_value_string()) {
    clear_has_value();
      ::snappyv1::Parameter_ValueString* temp = value_.value_string_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    value_.value_string_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::snappyv1::Parameter_ValueString& Parameter::_internal_value_string() const {
  return _internal_has_value_string()
      ? *value_.value_string_
      : reinterpret_cast< ::snappyv1::Parameter_ValueString&>(::snappyv1::_Parameter_ValueString_default_instance_);
}
inline const ::snappyv1::Parameter_ValueString& Parameter::value_string() const {
  // @@protoc_insertion_point(field_get:snappyv1.Parameter.value_string)
  return _internal_value_string();
}
inline ::snappyv1::Parameter_ValueString* Parameter::unsafe_arena_release_value_string() {
  // @@protoc_insertion_point(field_unsafe_arena_release:snappyv1.Parameter.value_string)
  if (_internal_has_value_string()) {
    clear_has_value();
    ::snappyv1::Parameter_ValueString* temp = value_.value_string_;
    value_.value_string_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Parameter::unsafe_arena_set_allocated_value_string(::snappyv1::Parameter_ValueString* value_string) {
  clear_value();
  if (value_string) {
    set_has_value_string();
    value_.value_string_ = value_string;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:snappyv1.Parameter.value_string)
}
inline ::snappyv1::Parameter_ValueString* Parameter::_internal_mutable_value_string() {
  if (!_internal_has_value_string()) {
    clear_value();
    set_has_value_string();
    value_.value_string_ = CreateMaybeMessage< ::snappyv1::Parameter_ValueString >(GetArenaForAllocation());
  }
  return value_.value_string_;
}
inline ::snappyv1::Parameter_ValueString* Parameter::mutable_value_string() {
  // @@protoc_insertion_point(field_mutable:snappyv1.Parameter.value_string)
  return _internal_mutable_value_string();
}

// .snappyv1.Parameter.ValueBool value_bool = 4;
inline bool Parameter::_internal_has_value_bool() const {
  return value_case() == kValueBool;
}
inline bool Parameter::has_value_bool() const {
  return _internal_has_value_bool();
}
inline void Parameter::set_has_value_bool() {
  _oneof_case_[0] = kValueBool;
}
inline void Parameter::clear_value_bool() {
  if (_internal_has_value_bool()) {
    if (GetArenaForAllocation() == nullptr) {
      delete value_.value_bool_;
    }
    clear_has_value();
  }
}
inline ::snappyv1::Parameter_ValueBool* Parameter::release_value_bool() {
  // @@protoc_insertion_point(field_release:snappyv1.Parameter.value_bool)
  if (_internal_has_value_bool()) {
    clear_has_value();
      ::snappyv1::Parameter_ValueBool* temp = value_.value_bool_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    value_.value_bool_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::snappyv1::Parameter_ValueBool& Parameter::_internal_value_bool() const {
  return _internal_has_value_bool()
      ? *value_.value_bool_
      : reinterpret_cast< ::snappyv1::Parameter_ValueBool&>(::snappyv1::_Parameter_ValueBool_default_instance_);
}
inline const ::snappyv1::Parameter_ValueBool& Parameter::value_bool() const {
  // @@protoc_insertion_point(field_get:snappyv1.Parameter.value_bool)
  return _internal_value_bool();
}
inline ::snappyv1::Parameter_ValueBool* Parameter::unsafe_arena_release_value_bool() {
  // @@protoc_insertion_point(field_unsafe_arena_release:snappyv1.Parameter.value_bool)
  if (_internal_has_value_bool()) {
    clear_has_value();
    ::snappyv1::Parameter_ValueBool* temp = value_.value_bool_;
    value_.value_bool_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Parameter::unsafe_arena_set_allocated_value_bool(::snappyv1::Parameter_ValueBool* value_bool) {
  clear_value();
  if (value_bool) {
    set_has_value_bool();
    value_.value_bool_ = value_bool;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:snappyv1.Parameter.value_bool)
}
inline ::snappyv1::Parameter_ValueBool* Parameter::_internal_mutable_value_bool() {
  if (!_internal_has_value_bool()) {
    clear_value();
    set_has_value_bool();
    value_.value_bool_ = CreateMaybeMessage< ::snappyv1::Parameter_ValueBool >(GetArenaForAllocation());
  }
  return value_.value_bool_;
}
inline ::snappyv1::Parameter_ValueBool* Parameter::mutable_value_bool() {
  // @@protoc_insertion_point(field_mutable:snappyv1.Parameter.value_bool)
  return _internal_mutable_value_bool();
}

// .snappyv1.Parameter.ValueUint32 value_uint32 = 5;
inline bool Parameter::_internal_has_value_uint32() const {
  return value_case() == kValueUint32;
}
inline bool Parameter::has_value_uint32() const {
  return _internal_has_value_uint32();
}
inline void Parameter::set_has_value_uint32() {
  _oneof_case_[0] = kValueUint32;
}
inline void Parameter::clear_value_uint32() {
  if (_internal_has_value_uint32()) {
    if (GetArenaForAllocation() == nullptr) {
      delete value_.value_uint32_;
    }
    clear_has_value();
  }
}
inline ::snappyv1::Parameter_ValueUint32* Parameter::release_value_uint32() {
  // @@protoc_insertion_point(field_release:snappyv1.Parameter.value_uint32)
  if (_internal_has_value_uint32()) {
    clear_has_value();
      ::snappyv1::Parameter_ValueUint32* temp = value_.value_uint32_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    value_.value_uint32_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::snappyv1::Parameter_ValueUint32& Parameter::_internal_value_uint32() const {
  return _internal_has_value_uint32()
      ? *value_.value_uint32_
      : reinterpret_cast< ::snappyv1::Parameter_ValueUint32&>(::snappyv1::_Parameter_ValueUint32_default_instance_);
}
inline const ::snappyv1::Parameter_ValueUint32& Parameter::value_uint32() const {
  // @@protoc_insertion_point(field_get:snappyv1.Parameter.value_uint32)
  return _internal_value_uint32();
}
inline ::snappyv1::Parameter_ValueUint32* Parameter::unsafe_arena_release_value_uint32() {
  // @@protoc_insertion_point(field_unsafe_arena_release:snappyv1.Parameter.value_uint32)
  if (_internal_has_value_uint32()) {
    clear_has_value();
    ::snappyv1::Parameter_ValueUint32* temp = value_.value_uint32_;
    value_.value_uint32_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Parameter::unsafe_arena_set_allocated_value_uint32(::snappyv1::Parameter_ValueUint32* value_uint32) {
  clear_value();
  if (value_uint32) {
    set_has_value_uint32();
    value_.value_uint32_ = value_uint32;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:snappyv1.Parameter.value_uint32)
}
inline ::snappyv1::Parameter_ValueUint32* Parameter::_internal_mutable_value_uint32() {
  if (!_internal_has_value_uint32()) {
    clear_value();
    set_has_value_uint32();
    value_.value_uint32_ = CreateMaybeMessage< ::snappyv1::Parameter_ValueUint32 >(GetArenaForAllocation());
  }
  return value_.value_uint32_;
}
inline ::snappyv1::Parameter_ValueUint32* Parameter::mutable_value_uint32() {
  // @@protoc_insertion_point(field_mutable:snappyv1.Parameter.value_uint32)
  return _internal_mutable_value_uint32();
}

// .snappyv1.Parameter.ValueDouble value_double = 6;
inline bool Parameter::_internal_has_value_double() const {
  return value_case() == kValueDouble;
}
inline bool Parameter::has_value_double() const {
  return _internal_has_value_double();
}
inline void Parameter::set_has_value_double() {
  _oneof_case_[0] = kValueDouble;
}
inline void Parameter::clear_value_double() {
  if (_internal_has_value_double()) {
    if (GetArenaForAllocation() == nullptr) {
      delete value_.value_double_;
    }
    clear_has_value();
  }
}
inline ::snappyv1::Parameter_ValueDouble* Parameter::release_value_double() {
  // @@protoc_insertion_point(field_release:snappyv1.Parameter.value_double)
  if (_internal_has_value_double()) {
    clear_has_value();
      ::snappyv1::Parameter_ValueDouble* temp = value_.value_double_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    value_.value_double_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::snappyv1::Parameter_ValueDouble& Parameter::_internal_value_double() const {
  return _internal_has_value_double()
      ? *value_.value_double_
      : reinterpret_cast< ::snappyv1::Parameter_ValueDouble&>(::snappyv1::_Parameter_ValueDouble_default_instance_);
}
inline const ::snappyv1::Parameter_ValueDouble& Parameter::value_double() const {
  // @@protoc_insertion_point(field_get:snappyv1.Parameter.value_double)
  return _internal_value_double();
}
inline ::snappyv1::Parameter_ValueDouble* Parameter::unsafe_arena_release_value_double() {
  // @@protoc_insertion_point(field_unsafe_arena_release:snappyv1.Parameter.value_double)
  if (_internal_has_value_double()) {
    clear_has_value();
    ::snappyv1::Parameter_ValueDouble* temp = value_.value_double_;
    value_.value_double_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Parameter::unsafe_arena_set_allocated_value_double(::snappyv1::Parameter_ValueDouble* value_double) {
  clear_value();
  if (value_double) {
    set_has_value_double();
    value_.value_double_ = value_double;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:snappyv1.Parameter.value_double)
}
inline ::snappyv1::Parameter_ValueDouble* Parameter::_internal_mutable_value_double() {
  if (!_internal_has_value_double()) {
    clear_value();
    set_has_value_double();
    value_.value_double_ = CreateMaybeMessage< ::snappyv1::Parameter_ValueDouble >(GetArenaForAllocation());
  }
  return value_.value_double_;
}
inline ::snappyv1::Parameter_ValueDouble* Parameter::mutable_value_double() {
  // @@protoc_insertion_point(field_mutable:snappyv1.Parameter.value_double)
  return _internal_mutable_value_double();
}

inline bool Parameter::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void Parameter::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline Parameter::ValueCase Parameter::value_case() const {
  return Parameter::ValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Source

// .snappyv1.SourceType type = 1;
inline void Source::clear_type() {
  type_ = 0;
}
inline ::snappyv1::SourceType Source::_internal_type() const {
  return static_cast< ::snappyv1::SourceType >(type_);
}
inline ::snappyv1::SourceType Source::type() const {
  // @@protoc_insertion_point(field_get:snappyv1.Source.type)
  return _internal_type();
}
inline void Source::_internal_set_type(::snappyv1::SourceType value) {
  
  type_ = value;
}
inline void Source::set_type(::snappyv1::SourceType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:snappyv1.Source.type)
}

// .snappyv1.SourceSubType sub_type = 2;
inline void Source::clear_sub_type() {
  sub_type_ = 0;
}
inline ::snappyv1::SourceSubType Source::_internal_sub_type() const {
  return static_cast< ::snappyv1::SourceSubType >(sub_type_);
}
inline ::snappyv1::SourceSubType Source::sub_type() const {
  // @@protoc_insertion_point(field_get:snappyv1.Source.sub_type)
  return _internal_sub_type();
}
inline void Source::_internal_set_sub_type(::snappyv1::SourceSubType value) {
  
  sub_type_ = value;
}
inline void Source::set_sub_type(::snappyv1::SourceSubType value) {
  _internal_set_sub_type(value);
  // @@protoc_insertion_point(field_set:snappyv1.Source.sub_type)
}

// repeated .snappyv1.Parameter parameters = 3;
inline int Source::_internal_parameters_size() const {
  return parameters_.size();
}
inline int Source::parameters_size() const {
  return _internal_parameters_size();
}
inline void Source::clear_parameters() {
  parameters_.Clear();
}
inline ::snappyv1::Parameter* Source::mutable_parameters(int index) {
  // @@protoc_insertion_point(field_mutable:snappyv1.Source.parameters)
  return parameters_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::snappyv1::Parameter >*
Source::mutable_parameters() {
  // @@protoc_insertion_point(field_mutable_list:snappyv1.Source.parameters)
  return &parameters_;
}
inline const ::snappyv1::Parameter& Source::_internal_parameters(int index) const {
  return parameters_.Get(index);
}
inline const ::snappyv1::Parameter& Source::parameters(int index) const {
  // @@protoc_insertion_point(field_get:snappyv1.Source.parameters)
  return _internal_parameters(index);
}
inline ::snappyv1::Parameter* Source::_internal_add_parameters() {
  return parameters_.Add();
}
inline ::snappyv1::Parameter* Source::add_parameters() {
  // @@protoc_insertion_point(field_add:snappyv1.Source.parameters)
  return _internal_add_parameters();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::snappyv1::Parameter >&
Source::parameters() const {
  // @@protoc_insertion_point(field_list:snappyv1.Source.parameters)
  return parameters_;
}

// -------------------------------------------------------------------

// Encoder

// .snappyv1.EncoderType type = 1;
inline void Encoder::clear_type() {
  type_ = 0;
}
inline ::snappyv1::EncoderType Encoder::_internal_type() const {
  return static_cast< ::snappyv1::EncoderType >(type_);
}
inline ::snappyv1::EncoderType Encoder::type() const {
  // @@protoc_insertion_point(field_get:snappyv1.Encoder.type)
  return _internal_type();
}
inline void Encoder::_internal_set_type(::snappyv1::EncoderType value) {
  
  type_ = value;
}
inline void Encoder::set_type(::snappyv1::EncoderType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:snappyv1.Encoder.type)
}

// repeated .snappyv1.Parameter parameters = 2;
inline int Encoder::_internal_parameters_size() const {
  return parameters_.size();
}
inline int Encoder::parameters_size() const {
  return _internal_parameters_size();
}
inline void Encoder::clear_parameters() {
  parameters_.Clear();
}
inline ::snappyv1::Parameter* Encoder::mutable_parameters(int index) {
  // @@protoc_insertion_point(field_mutable:snappyv1.Encoder.parameters)
  return parameters_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::snappyv1::Parameter >*
Encoder::mutable_parameters() {
  // @@protoc_insertion_point(field_mutable_list:snappyv1.Encoder.parameters)
  return &parameters_;
}
inline const ::snappyv1::Parameter& Encoder::_internal_parameters(int index) const {
  return parameters_.Get(index);
}
inline const ::snappyv1::Parameter& Encoder::parameters(int index) const {
  // @@protoc_insertion_point(field_get:snappyv1.Encoder.parameters)
  return _internal_parameters(index);
}
inline ::snappyv1::Parameter* Encoder::_internal_add_parameters() {
  return parameters_.Add();
}
inline ::snappyv1::Parameter* Encoder::add_parameters() {
  // @@protoc_insertion_point(field_add:snappyv1.Encoder.parameters)
  return _internal_add_parameters();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::snappyv1::Parameter >&
Encoder::parameters() const {
  // @@protoc_insertion_point(field_list:snappyv1.Encoder.parameters)
  return parameters_;
}

// -------------------------------------------------------------------

// ServerInfo

// .snappyv1.Platform platform = 1;
inline void ServerInfo::clear_platform() {
  platform_ = 0;
}
inline ::snappyv1::Platform ServerInfo::_internal_platform() const {
  return static_cast< ::snappyv1::Platform >(platform_);
}
inline ::snappyv1::Platform ServerInfo::platform() const {
  // @@protoc_insertion_point(field_get:snappyv1.ServerInfo.platform)
  return _internal_platform();
}
inline void ServerInfo::_internal_set_platform(::snappyv1::Platform value) {
  
  platform_ = value;
}
inline void ServerInfo::set_platform(::snappyv1::Platform value) {
  _internal_set_platform(value);
  // @@protoc_insertion_point(field_set:snappyv1.ServerInfo.platform)
}

// repeated .snappyv1.Source available_sources = 3;
inline int ServerInfo::_internal_available_sources_size() const {
  return available_sources_.size();
}
inline int ServerInfo::available_sources_size() const {
  return _internal_available_sources_size();
}
inline void ServerInfo::clear_available_sources() {
  available_sources_.Clear();
}
inline ::snappyv1::Source* ServerInfo::mutable_available_sources(int index) {
  // @@protoc_insertion_point(field_mutable:snappyv1.ServerInfo.available_sources)
  return available_sources_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::snappyv1::Source >*
ServerInfo::mutable_available_sources() {
  // @@protoc_insertion_point(field_mutable_list:snappyv1.ServerInfo.available_sources)
  return &available_sources_;
}
inline const ::snappyv1::Source& ServerInfo::_internal_available_sources(int index) const {
  return available_sources_.Get(index);
}
inline const ::snappyv1::Source& ServerInfo::available_sources(int index) const {
  // @@protoc_insertion_point(field_get:snappyv1.ServerInfo.available_sources)
  return _internal_available_sources(index);
}
inline ::snappyv1::Source* ServerInfo::_internal_add_available_sources() {
  return available_sources_.Add();
}
inline ::snappyv1::Source* ServerInfo::add_available_sources() {
  // @@protoc_insertion_point(field_add:snappyv1.ServerInfo.available_sources)
  return _internal_add_available_sources();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::snappyv1::Source >&
ServerInfo::available_sources() const {
  // @@protoc_insertion_point(field_list:snappyv1.ServerInfo.available_sources)
  return available_sources_;
}

// repeated .snappyv1.Encoder available_encoders = 4;
inline int ServerInfo::_internal_available_encoders_size() const {
  return available_encoders_.size();
}
inline int ServerInfo::available_encoders_size() const {
  return _internal_available_encoders_size();
}
inline void ServerInfo::clear_available_encoders() {
  available_encoders_.Clear();
}
inline ::snappyv1::Encoder* ServerInfo::mutable_available_encoders(int index) {
  // @@protoc_insertion_point(field_mutable:snappyv1.ServerInfo.available_encoders)
  return available_encoders_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::snappyv1::Encoder >*
ServerInfo::mutable_available_encoders() {
  // @@protoc_insertion_point(field_mutable_list:snappyv1.ServerInfo.available_encoders)
  return &available_encoders_;
}
inline const ::snappyv1::Encoder& ServerInfo::_internal_available_encoders(int index) const {
  return available_encoders_.Get(index);
}
inline const ::snappyv1::Encoder& ServerInfo::available_encoders(int index) const {
  // @@protoc_insertion_point(field_get:snappyv1.ServerInfo.available_encoders)
  return _internal_available_encoders(index);
}
inline ::snappyv1::Encoder* ServerInfo::_internal_add_available_encoders() {
  return available_encoders_.Add();
}
inline ::snappyv1::Encoder* ServerInfo::add_available_encoders() {
  // @@protoc_insertion_point(field_add:snappyv1.ServerInfo.available_encoders)
  return _internal_add_available_encoders();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::snappyv1::Encoder >&
ServerInfo::available_encoders() const {
  // @@protoc_insertion_point(field_list:snappyv1.ServerInfo.available_encoders)
  return available_encoders_;
}

// -------------------------------------------------------------------

// StreamsChange_StreamChange

// uint32 id = 1;
inline void StreamsChange_StreamChange::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StreamsChange_StreamChange::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StreamsChange_StreamChange::id() const {
  // @@protoc_insertion_point(field_get:snappyv1.StreamsChange.StreamChange.id)
  return _internal_id();
}
inline void StreamsChange_StreamChange::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void StreamsChange_StreamChange::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:snappyv1.StreamsChange.StreamChange.id)
}

// optional .snappyv1.Source source = 2;
inline bool StreamsChange_StreamChange::_internal_has_source() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || source_ != nullptr);
  return value;
}
inline bool StreamsChange_StreamChange::has_source() const {
  return _internal_has_source();
}
inline void StreamsChange_StreamChange::clear_source() {
  if (source_ != nullptr) source_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::snappyv1::Source& StreamsChange_StreamChange::_internal_source() const {
  const ::snappyv1::Source* p = source_;
  return p != nullptr ? *p : reinterpret_cast<const ::snappyv1::Source&>(
      ::snappyv1::_Source_default_instance_);
}
inline const ::snappyv1::Source& StreamsChange_StreamChange::source() const {
  // @@protoc_insertion_point(field_get:snappyv1.StreamsChange.StreamChange.source)
  return _internal_source();
}
inline void StreamsChange_StreamChange::unsafe_arena_set_allocated_source(
    ::snappyv1::Source* source) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(source_);
  }
  source_ = source;
  if (source) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:snappyv1.StreamsChange.StreamChange.source)
}
inline ::snappyv1::Source* StreamsChange_StreamChange::release_source() {
  _has_bits_[0] &= ~0x00000001u;
  ::snappyv1::Source* temp = source_;
  source_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::snappyv1::Source* StreamsChange_StreamChange::unsafe_arena_release_source() {
  // @@protoc_insertion_point(field_release:snappyv1.StreamsChange.StreamChange.source)
  _has_bits_[0] &= ~0x00000001u;
  ::snappyv1::Source* temp = source_;
  source_ = nullptr;
  return temp;
}
inline ::snappyv1::Source* StreamsChange_StreamChange::_internal_mutable_source() {
  _has_bits_[0] |= 0x00000001u;
  if (source_ == nullptr) {
    auto* p = CreateMaybeMessage<::snappyv1::Source>(GetArenaForAllocation());
    source_ = p;
  }
  return source_;
}
inline ::snappyv1::Source* StreamsChange_StreamChange::mutable_source() {
  // @@protoc_insertion_point(field_mutable:snappyv1.StreamsChange.StreamChange.source)
  return _internal_mutable_source();
}
inline void StreamsChange_StreamChange::set_allocated_source(::snappyv1::Source* source) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete source_;
  }
  if (source) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::snappyv1::Source>::GetOwningArena(source);
    if (message_arena != submessage_arena) {
      source = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, source, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  source_ = source;
  // @@protoc_insertion_point(field_set_allocated:snappyv1.StreamsChange.StreamChange.source)
}

// optional .snappyv1.Encoder encoder = 3;
inline bool StreamsChange_StreamChange::_internal_has_encoder() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || encoder_ != nullptr);
  return value;
}
inline bool StreamsChange_StreamChange::has_encoder() const {
  return _internal_has_encoder();
}
inline void StreamsChange_StreamChange::clear_encoder() {
  if (encoder_ != nullptr) encoder_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::snappyv1::Encoder& StreamsChange_StreamChange::_internal_encoder() const {
  const ::snappyv1::Encoder* p = encoder_;
  return p != nullptr ? *p : reinterpret_cast<const ::snappyv1::Encoder&>(
      ::snappyv1::_Encoder_default_instance_);
}
inline const ::snappyv1::Encoder& StreamsChange_StreamChange::encoder() const {
  // @@protoc_insertion_point(field_get:snappyv1.StreamsChange.StreamChange.encoder)
  return _internal_encoder();
}
inline void StreamsChange_StreamChange::unsafe_arena_set_allocated_encoder(
    ::snappyv1::Encoder* encoder) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(encoder_);
  }
  encoder_ = encoder;
  if (encoder) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:snappyv1.StreamsChange.StreamChange.encoder)
}
inline ::snappyv1::Encoder* StreamsChange_StreamChange::release_encoder() {
  _has_bits_[0] &= ~0x00000002u;
  ::snappyv1::Encoder* temp = encoder_;
  encoder_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::snappyv1::Encoder* StreamsChange_StreamChange::unsafe_arena_release_encoder() {
  // @@protoc_insertion_point(field_release:snappyv1.StreamsChange.StreamChange.encoder)
  _has_bits_[0] &= ~0x00000002u;
  ::snappyv1::Encoder* temp = encoder_;
  encoder_ = nullptr;
  return temp;
}
inline ::snappyv1::Encoder* StreamsChange_StreamChange::_internal_mutable_encoder() {
  _has_bits_[0] |= 0x00000002u;
  if (encoder_ == nullptr) {
    auto* p = CreateMaybeMessage<::snappyv1::Encoder>(GetArenaForAllocation());
    encoder_ = p;
  }
  return encoder_;
}
inline ::snappyv1::Encoder* StreamsChange_StreamChange::mutable_encoder() {
  // @@protoc_insertion_point(field_mutable:snappyv1.StreamsChange.StreamChange.encoder)
  return _internal_mutable_encoder();
}
inline void StreamsChange_StreamChange::set_allocated_encoder(::snappyv1::Encoder* encoder) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete encoder_;
  }
  if (encoder) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::snappyv1::Encoder>::GetOwningArena(encoder);
    if (message_arena != submessage_arena) {
      encoder = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, encoder, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  encoder_ = encoder;
  // @@protoc_insertion_point(field_set_allocated:snappyv1.StreamsChange.StreamChange.encoder)
}

// optional .snappyv1.Command command = 4;
inline bool StreamsChange_StreamChange::_internal_has_command() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool StreamsChange_StreamChange::has_command() const {
  return _internal_has_command();
}
inline void StreamsChange_StreamChange::clear_command() {
  command_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::snappyv1::Command StreamsChange_StreamChange::_internal_command() const {
  return static_cast< ::snappyv1::Command >(command_);
}
inline ::snappyv1::Command StreamsChange_StreamChange::command() const {
  // @@protoc_insertion_point(field_get:snappyv1.StreamsChange.StreamChange.command)
  return _internal_command();
}
inline void StreamsChange_StreamChange::_internal_set_command(::snappyv1::Command value) {
  _has_bits_[0] |= 0x00000004u;
  command_ = value;
}
inline void StreamsChange_StreamChange::set_command(::snappyv1::Command value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:snappyv1.StreamsChange.StreamChange.command)
}

// -------------------------------------------------------------------

// StreamsChange

// repeated .snappyv1.StreamsChange.StreamChange streams = 2;
inline int StreamsChange::_internal_streams_size() const {
  return streams_.size();
}
inline int StreamsChange::streams_size() const {
  return _internal_streams_size();
}
inline void StreamsChange::clear_streams() {
  streams_.Clear();
}
inline ::snappyv1::StreamsChange_StreamChange* StreamsChange::mutable_streams(int index) {
  // @@protoc_insertion_point(field_mutable:snappyv1.StreamsChange.streams)
  return streams_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::snappyv1::StreamsChange_StreamChange >*
StreamsChange::mutable_streams() {
  // @@protoc_insertion_point(field_mutable_list:snappyv1.StreamsChange.streams)
  return &streams_;
}
inline const ::snappyv1::StreamsChange_StreamChange& StreamsChange::_internal_streams(int index) const {
  return streams_.Get(index);
}
inline const ::snappyv1::StreamsChange_StreamChange& StreamsChange::streams(int index) const {
  // @@protoc_insertion_point(field_get:snappyv1.StreamsChange.streams)
  return _internal_streams(index);
}
inline ::snappyv1::StreamsChange_StreamChange* StreamsChange::_internal_add_streams() {
  return streams_.Add();
}
inline ::snappyv1::StreamsChange_StreamChange* StreamsChange::add_streams() {
  // @@protoc_insertion_point(field_add:snappyv1.StreamsChange.streams)
  return _internal_add_streams();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::snappyv1::StreamsChange_StreamChange >&
StreamsChange::streams() const {
  // @@protoc_insertion_point(field_list:snappyv1.StreamsChange.streams)
  return streams_;
}

// -------------------------------------------------------------------

// StreamStatistics

// uint32 last_frame = 1;
inline void StreamStatistics::clear_last_frame() {
  last_frame_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StreamStatistics::_internal_last_frame() const {
  return last_frame_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StreamStatistics::last_frame() const {
  // @@protoc_insertion_point(field_get:snappyv1.StreamStatistics.last_frame)
  return _internal_last_frame();
}
inline void StreamStatistics::_internal_set_last_frame(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  last_frame_ = value;
}
inline void StreamStatistics::set_last_frame(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_last_frame(value);
  // @@protoc_insertion_point(field_set:snappyv1.StreamStatistics.last_frame)
}

// uint32 average_frame_qp = 2;
inline void StreamStatistics::clear_average_frame_qp() {
  average_frame_qp_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StreamStatistics::_internal_average_frame_qp() const {
  return average_frame_qp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StreamStatistics::average_frame_qp() const {
  // @@protoc_insertion_point(field_get:snappyv1.StreamStatistics.average_frame_qp)
  return _internal_average_frame_qp();
}
inline void StreamStatistics::_internal_set_average_frame_qp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  average_frame_qp_ = value;
}
inline void StreamStatistics::set_average_frame_qp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_average_frame_qp(value);
  // @@protoc_insertion_point(field_set:snappyv1.StreamStatistics.average_frame_qp)
}

// uint32 encode_ts_start_ms = 3;
inline void StreamStatistics::clear_encode_ts_start_ms() {
  encode_ts_start_ms_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StreamStatistics::_internal_encode_ts_start_ms() const {
  return encode_ts_start_ms_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StreamStatistics::encode_ts_start_ms() const {
  // @@protoc_insertion_point(field_get:snappyv1.StreamStatistics.encode_ts_start_ms)
  return _internal_encode_ts_start_ms();
}
inline void StreamStatistics::_internal_set_encode_ts_start_ms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  encode_ts_start_ms_ = value;
}
inline void StreamStatistics::set_encode_ts_start_ms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_encode_ts_start_ms(value);
  // @@protoc_insertion_point(field_set:snappyv1.StreamStatistics.encode_ts_start_ms)
}

// uint32 encode_ts_end_ms = 4;
inline void StreamStatistics::clear_encode_ts_end_ms() {
  encode_ts_end_ms_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StreamStatistics::_internal_encode_ts_end_ms() const {
  return encode_ts_end_ms_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StreamStatistics::encode_ts_end_ms() const {
  // @@protoc_insertion_point(field_get:snappyv1.StreamStatistics.encode_ts_end_ms)
  return _internal_encode_ts_end_ms();
}
inline void StreamStatistics::_internal_set_encode_ts_end_ms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  encode_ts_end_ms_ = value;
}
inline void StreamStatistics::set_encode_ts_end_ms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_encode_ts_end_ms(value);
  // @@protoc_insertion_point(field_set:snappyv1.StreamStatistics.encode_ts_end_ms)
}

// uint32 tx_ts_start_ms = 5;
inline void StreamStatistics::clear_tx_ts_start_ms() {
  tx_ts_start_ms_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StreamStatistics::_internal_tx_ts_start_ms() const {
  return tx_ts_start_ms_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StreamStatistics::tx_ts_start_ms() const {
  // @@protoc_insertion_point(field_get:snappyv1.StreamStatistics.tx_ts_start_ms)
  return _internal_tx_ts_start_ms();
}
inline void StreamStatistics::_internal_set_tx_ts_start_ms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  tx_ts_start_ms_ = value;
}
inline void StreamStatistics::set_tx_ts_start_ms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tx_ts_start_ms(value);
  // @@protoc_insertion_point(field_set:snappyv1.StreamStatistics.tx_ts_start_ms)
}

// uint32 tx_ts_end_ms = 6;
inline void StreamStatistics::clear_tx_ts_end_ms() {
  tx_ts_end_ms_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StreamStatistics::_internal_tx_ts_end_ms() const {
  return tx_ts_end_ms_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StreamStatistics::tx_ts_end_ms() const {
  // @@protoc_insertion_point(field_get:snappyv1.StreamStatistics.tx_ts_end_ms)
  return _internal_tx_ts_end_ms();
}
inline void StreamStatistics::_internal_set_tx_ts_end_ms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  tx_ts_end_ms_ = value;
}
inline void StreamStatistics::set_tx_ts_end_ms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tx_ts_end_ms(value);
  // @@protoc_insertion_point(field_set:snappyv1.StreamStatistics.tx_ts_end_ms)
}

// -------------------------------------------------------------------

// StreamData

// uint32 stream_id = 1;
inline void StreamData::clear_stream_id() {
  stream_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StreamData::_internal_stream_id() const {
  return stream_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StreamData::stream_id() const {
  // @@protoc_insertion_point(field_get:snappyv1.StreamData.stream_id)
  return _internal_stream_id();
}
inline void StreamData::_internal_set_stream_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  stream_id_ = value;
}
inline void StreamData::set_stream_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_stream_id(value);
  // @@protoc_insertion_point(field_set:snappyv1.StreamData.stream_id)
}

// bytes payload = 2;
inline void StreamData::clear_payload() {
  payload_.ClearToEmpty();
}
inline const std::string& StreamData::payload() const {
  // @@protoc_insertion_point(field_get:snappyv1.StreamData.payload)
  return _internal_payload();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StreamData::set_payload(ArgT0&& arg0, ArgT... args) {
 
 payload_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:snappyv1.StreamData.payload)
}
inline std::string* StreamData::mutable_payload() {
  // @@protoc_insertion_point(field_mutable:snappyv1.StreamData.payload)
  return _internal_mutable_payload();
}
inline const std::string& StreamData::_internal_payload() const {
  return payload_.Get();
}
inline void StreamData::_internal_set_payload(const std::string& value) {
  
  payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* StreamData::_internal_mutable_payload() {
  
  return payload_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* StreamData::release_payload() {
  // @@protoc_insertion_point(field_release:snappyv1.StreamData.payload)
  return payload_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void StreamData::set_allocated_payload(std::string* payload) {
  if (payload != nullptr) {
    
  } else {
    
  }
  payload_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payload,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:snappyv1.StreamData.payload)
}

// -------------------------------------------------------------------

// Message

// .snappyv1.MessageType type = 1;
inline void Message::clear_type() {
  type_ = 0;
}
inline ::snappyv1::MessageType Message::_internal_type() const {
  return static_cast< ::snappyv1::MessageType >(type_);
}
inline ::snappyv1::MessageType Message::type() const {
  // @@protoc_insertion_point(field_get:snappyv1.Message.type)
  return _internal_type();
}
inline void Message::_internal_set_type(::snappyv1::MessageType value) {
  
  type_ = value;
}
inline void Message::set_type(::snappyv1::MessageType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:snappyv1.Message.type)
}

// .snappyv1.ServerInfo server_info = 2;
inline bool Message::_internal_has_server_info() const {
  return message_case() == kServerInfo;
}
inline bool Message::has_server_info() const {
  return _internal_has_server_info();
}
inline void Message::set_has_server_info() {
  _oneof_case_[0] = kServerInfo;
}
inline void Message::clear_server_info() {
  if (_internal_has_server_info()) {
    if (GetArenaForAllocation() == nullptr) {
      delete message_.server_info_;
    }
    clear_has_message();
  }
}
inline ::snappyv1::ServerInfo* Message::release_server_info() {
  // @@protoc_insertion_point(field_release:snappyv1.Message.server_info)
  if (_internal_has_server_info()) {
    clear_has_message();
      ::snappyv1::ServerInfo* temp = message_.server_info_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_.server_info_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::snappyv1::ServerInfo& Message::_internal_server_info() const {
  return _internal_has_server_info()
      ? *message_.server_info_
      : reinterpret_cast< ::snappyv1::ServerInfo&>(::snappyv1::_ServerInfo_default_instance_);
}
inline const ::snappyv1::ServerInfo& Message::server_info() const {
  // @@protoc_insertion_point(field_get:snappyv1.Message.server_info)
  return _internal_server_info();
}
inline ::snappyv1::ServerInfo* Message::unsafe_arena_release_server_info() {
  // @@protoc_insertion_point(field_unsafe_arena_release:snappyv1.Message.server_info)
  if (_internal_has_server_info()) {
    clear_has_message();
    ::snappyv1::ServerInfo* temp = message_.server_info_;
    message_.server_info_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_server_info(::snappyv1::ServerInfo* server_info) {
  clear_message();
  if (server_info) {
    set_has_server_info();
    message_.server_info_ = server_info;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:snappyv1.Message.server_info)
}
inline ::snappyv1::ServerInfo* Message::_internal_mutable_server_info() {
  if (!_internal_has_server_info()) {
    clear_message();
    set_has_server_info();
    message_.server_info_ = CreateMaybeMessage< ::snappyv1::ServerInfo >(GetArenaForAllocation());
  }
  return message_.server_info_;
}
inline ::snappyv1::ServerInfo* Message::mutable_server_info() {
  // @@protoc_insertion_point(field_mutable:snappyv1.Message.server_info)
  return _internal_mutable_server_info();
}

// .snappyv1.StreamsChange stream_change = 3;
inline bool Message::_internal_has_stream_change() const {
  return message_case() == kStreamChange;
}
inline bool Message::has_stream_change() const {
  return _internal_has_stream_change();
}
inline void Message::set_has_stream_change() {
  _oneof_case_[0] = kStreamChange;
}
inline void Message::clear_stream_change() {
  if (_internal_has_stream_change()) {
    if (GetArenaForAllocation() == nullptr) {
      delete message_.stream_change_;
    }
    clear_has_message();
  }
}
inline ::snappyv1::StreamsChange* Message::release_stream_change() {
  // @@protoc_insertion_point(field_release:snappyv1.Message.stream_change)
  if (_internal_has_stream_change()) {
    clear_has_message();
      ::snappyv1::StreamsChange* temp = message_.stream_change_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_.stream_change_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::snappyv1::StreamsChange& Message::_internal_stream_change() const {
  return _internal_has_stream_change()
      ? *message_.stream_change_
      : reinterpret_cast< ::snappyv1::StreamsChange&>(::snappyv1::_StreamsChange_default_instance_);
}
inline const ::snappyv1::StreamsChange& Message::stream_change() const {
  // @@protoc_insertion_point(field_get:snappyv1.Message.stream_change)
  return _internal_stream_change();
}
inline ::snappyv1::StreamsChange* Message::unsafe_arena_release_stream_change() {
  // @@protoc_insertion_point(field_unsafe_arena_release:snappyv1.Message.stream_change)
  if (_internal_has_stream_change()) {
    clear_has_message();
    ::snappyv1::StreamsChange* temp = message_.stream_change_;
    message_.stream_change_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_stream_change(::snappyv1::StreamsChange* stream_change) {
  clear_message();
  if (stream_change) {
    set_has_stream_change();
    message_.stream_change_ = stream_change;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:snappyv1.Message.stream_change)
}
inline ::snappyv1::StreamsChange* Message::_internal_mutable_stream_change() {
  if (!_internal_has_stream_change()) {
    clear_message();
    set_has_stream_change();
    message_.stream_change_ = CreateMaybeMessage< ::snappyv1::StreamsChange >(GetArenaForAllocation());
  }
  return message_.stream_change_;
}
inline ::snappyv1::StreamsChange* Message::mutable_stream_change() {
  // @@protoc_insertion_point(field_mutable:snappyv1.Message.stream_change)
  return _internal_mutable_stream_change();
}

// .snappyv1.StreamData stream_data = 4;
inline bool Message::_internal_has_stream_data() const {
  return message_case() == kStreamData;
}
inline bool Message::has_stream_data() const {
  return _internal_has_stream_data();
}
inline void Message::set_has_stream_data() {
  _oneof_case_[0] = kStreamData;
}
inline void Message::clear_stream_data() {
  if (_internal_has_stream_data()) {
    if (GetArenaForAllocation() == nullptr) {
      delete message_.stream_data_;
    }
    clear_has_message();
  }
}
inline ::snappyv1::StreamData* Message::release_stream_data() {
  // @@protoc_insertion_point(field_release:snappyv1.Message.stream_data)
  if (_internal_has_stream_data()) {
    clear_has_message();
      ::snappyv1::StreamData* temp = message_.stream_data_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_.stream_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::snappyv1::StreamData& Message::_internal_stream_data() const {
  return _internal_has_stream_data()
      ? *message_.stream_data_
      : reinterpret_cast< ::snappyv1::StreamData&>(::snappyv1::_StreamData_default_instance_);
}
inline const ::snappyv1::StreamData& Message::stream_data() const {
  // @@protoc_insertion_point(field_get:snappyv1.Message.stream_data)
  return _internal_stream_data();
}
inline ::snappyv1::StreamData* Message::unsafe_arena_release_stream_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:snappyv1.Message.stream_data)
  if (_internal_has_stream_data()) {
    clear_has_message();
    ::snappyv1::StreamData* temp = message_.stream_data_;
    message_.stream_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_stream_data(::snappyv1::StreamData* stream_data) {
  clear_message();
  if (stream_data) {
    set_has_stream_data();
    message_.stream_data_ = stream_data;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:snappyv1.Message.stream_data)
}
inline ::snappyv1::StreamData* Message::_internal_mutable_stream_data() {
  if (!_internal_has_stream_data()) {
    clear_message();
    set_has_stream_data();
    message_.stream_data_ = CreateMaybeMessage< ::snappyv1::StreamData >(GetArenaForAllocation());
  }
  return message_.stream_data_;
}
inline ::snappyv1::StreamData* Message::mutable_stream_data() {
  // @@protoc_insertion_point(field_mutable:snappyv1.Message.stream_data)
  return _internal_mutable_stream_data();
}

inline bool Message::has_message() const {
  return message_case() != MESSAGE_NOT_SET;
}
inline void Message::clear_has_message() {
  _oneof_case_[0] = MESSAGE_NOT_SET;
}
inline Message::MessageCase Message::message_case() const {
  return Message::MessageCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// StreamDataPointer

// uint32 absx = 1;
inline void StreamDataPointer::clear_absx() {
  absx_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StreamDataPointer::_internal_absx() const {
  return absx_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StreamDataPointer::absx() const {
  // @@protoc_insertion_point(field_get:snappyv1.StreamDataPointer.absx)
  return _internal_absx();
}
inline void StreamDataPointer::_internal_set_absx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  absx_ = value;
}
inline void StreamDataPointer::set_absx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_absx(value);
  // @@protoc_insertion_point(field_set:snappyv1.StreamDataPointer.absx)
}

// uint32 absy = 2;
inline void StreamDataPointer::clear_absy() {
  absy_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StreamDataPointer::_internal_absy() const {
  return absy_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StreamDataPointer::absy() const {
  // @@protoc_insertion_point(field_get:snappyv1.StreamDataPointer.absy)
  return _internal_absy();
}
inline void StreamDataPointer::_internal_set_absy(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  absy_ = value;
}
inline void StreamDataPointer::set_absy(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_absy(value);
  // @@protoc_insertion_point(field_set:snappyv1.StreamDataPointer.absy)
}

// optional int32 mask = 3;
inline bool StreamDataPointer::_internal_has_mask() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool StreamDataPointer::has_mask() const {
  return _internal_has_mask();
}
inline void StreamDataPointer::clear_mask() {
  mask_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StreamDataPointer::_internal_mask() const {
  return mask_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StreamDataPointer::mask() const {
  // @@protoc_insertion_point(field_get:snappyv1.StreamDataPointer.mask)
  return _internal_mask();
}
inline void StreamDataPointer::_internal_set_mask(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  mask_ = value;
}
inline void StreamDataPointer::set_mask(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mask(value);
  // @@protoc_insertion_point(field_set:snappyv1.StreamDataPointer.mask)
}

// -------------------------------------------------------------------

// StreamDataKeyboard

// uint32 keysym = 1;
inline void StreamDataKeyboard::clear_keysym() {
  keysym_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StreamDataKeyboard::_internal_keysym() const {
  return keysym_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StreamDataKeyboard::keysym() const {
  // @@protoc_insertion_point(field_get:snappyv1.StreamDataKeyboard.keysym)
  return _internal_keysym();
}
inline void StreamDataKeyboard::_internal_set_keysym(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  keysym_ = value;
}
inline void StreamDataKeyboard::set_keysym(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_keysym(value);
  // @@protoc_insertion_point(field_set:snappyv1.StreamDataKeyboard.keysym)
}

// uint32 keycode = 2;
inline void StreamDataKeyboard::clear_keycode() {
  keycode_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StreamDataKeyboard::_internal_keycode() const {
  return keycode_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StreamDataKeyboard::keycode() const {
  // @@protoc_insertion_point(field_get:snappyv1.StreamDataKeyboard.keycode)
  return _internal_keycode();
}
inline void StreamDataKeyboard::_internal_set_keycode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  keycode_ = value;
}
inline void StreamDataKeyboard::set_keycode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_keycode(value);
  // @@protoc_insertion_point(field_set:snappyv1.StreamDataKeyboard.keycode)
}

// bool down = 3;
inline void StreamDataKeyboard::clear_down() {
  down_ = false;
}
inline bool StreamDataKeyboard::_internal_down() const {
  return down_;
}
inline bool StreamDataKeyboard::down() const {
  // @@protoc_insertion_point(field_get:snappyv1.StreamDataKeyboard.down)
  return _internal_down();
}
inline void StreamDataKeyboard::_internal_set_down(bool value) {
  
  down_ = value;
}
inline void StreamDataKeyboard::set_down(bool value) {
  _internal_set_down(value);
  // @@protoc_insertion_point(field_set:snappyv1.StreamDataKeyboard.down)
}

// -------------------------------------------------------------------

// StreamDataCursor

// uint32 width = 1;
inline void StreamDataCursor::clear_width() {
  width_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StreamDataCursor::_internal_width() const {
  return width_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StreamDataCursor::width() const {
  // @@protoc_insertion_point(field_get:snappyv1.StreamDataCursor.width)
  return _internal_width();
}
inline void StreamDataCursor::_internal_set_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  width_ = value;
}
inline void StreamDataCursor::set_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:snappyv1.StreamDataCursor.width)
}

// uint32 height = 2;
inline void StreamDataCursor::clear_height() {
  height_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StreamDataCursor::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StreamDataCursor::height() const {
  // @@protoc_insertion_point(field_get:snappyv1.StreamDataCursor.height)
  return _internal_height();
}
inline void StreamDataCursor::_internal_set_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  height_ = value;
}
inline void StreamDataCursor::set_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:snappyv1.StreamDataCursor.height)
}

// uint32 hotx = 3;
inline void StreamDataCursor::clear_hotx() {
  hotx_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StreamDataCursor::_internal_hotx() const {
  return hotx_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StreamDataCursor::hotx() const {
  // @@protoc_insertion_point(field_get:snappyv1.StreamDataCursor.hotx)
  return _internal_hotx();
}
inline void StreamDataCursor::_internal_set_hotx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  hotx_ = value;
}
inline void StreamDataCursor::set_hotx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_hotx(value);
  // @@protoc_insertion_point(field_set:snappyv1.StreamDataCursor.hotx)
}

// uint32 hoty = 4;
inline void StreamDataCursor::clear_hoty() {
  hoty_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StreamDataCursor::_internal_hoty() const {
  return hoty_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StreamDataCursor::hoty() const {
  // @@protoc_insertion_point(field_get:snappyv1.StreamDataCursor.hoty)
  return _internal_hoty();
}
inline void StreamDataCursor::_internal_set_hoty(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  hoty_ = value;
}
inline void StreamDataCursor::set_hoty(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_hoty(value);
  // @@protoc_insertion_point(field_set:snappyv1.StreamDataCursor.hoty)
}

// bytes image = 5;
inline void StreamDataCursor::clear_image() {
  image_.ClearToEmpty();
}
inline const std::string& StreamDataCursor::image() const {
  // @@protoc_insertion_point(field_get:snappyv1.StreamDataCursor.image)
  return _internal_image();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StreamDataCursor::set_image(ArgT0&& arg0, ArgT... args) {
 
 image_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:snappyv1.StreamDataCursor.image)
}
inline std::string* StreamDataCursor::mutable_image() {
  // @@protoc_insertion_point(field_mutable:snappyv1.StreamDataCursor.image)
  return _internal_mutable_image();
}
inline const std::string& StreamDataCursor::_internal_image() const {
  return image_.Get();
}
inline void StreamDataCursor::_internal_set_image(const std::string& value) {
  
  image_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* StreamDataCursor::_internal_mutable_image() {
  
  return image_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* StreamDataCursor::release_image() {
  // @@protoc_insertion_point(field_release:snappyv1.StreamDataCursor.image)
  return image_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void StreamDataCursor::set_allocated_image(std::string* image) {
  if (image != nullptr) {
    
  } else {
    
  }
  image_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), image,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:snappyv1.StreamDataCursor.image)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace snappyv1

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::snappyv1::Platform> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::snappyv1::Platform>() {
  return ::snappyv1::Platform_descriptor();
}
template <> struct is_proto_enum< ::snappyv1::SourceType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::snappyv1::SourceType>() {
  return ::snappyv1::SourceType_descriptor();
}
template <> struct is_proto_enum< ::snappyv1::SourceSubType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::snappyv1::SourceSubType>() {
  return ::snappyv1::SourceSubType_descriptor();
}
template <> struct is_proto_enum< ::snappyv1::EncoderType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::snappyv1::EncoderType>() {
  return ::snappyv1::EncoderType_descriptor();
}
template <> struct is_proto_enum< ::snappyv1::Command> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::snappyv1::Command>() {
  return ::snappyv1::Command_descriptor();
}
template <> struct is_proto_enum< ::snappyv1::ParameterType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::snappyv1::ParameterType>() {
  return ::snappyv1::ParameterType_descriptor();
}
template <> struct is_proto_enum< ::snappyv1::MessageType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::snappyv1::MessageType>() {
  return ::snappyv1::MessageType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_snappyv1_2eproto
