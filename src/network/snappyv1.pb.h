// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: snappyv1.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_snappyv1_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_snappyv1_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_snappyv1_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_snappyv1_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[12]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_snappyv1_2eproto;
namespace snappyv1 {
class Message;
class MessageDefaultTypeInternal;
extern MessageDefaultTypeInternal _Message_default_instance_;
class Property;
class PropertyDefaultTypeInternal;
extern PropertyDefaultTypeInternal _Property_default_instance_;
class Property_ValueBool;
class Property_ValueBoolDefaultTypeInternal;
extern Property_ValueBoolDefaultTypeInternal _Property_ValueBool_default_instance_;
class Property_ValueDouble;
class Property_ValueDoubleDefaultTypeInternal;
extern Property_ValueDoubleDefaultTypeInternal _Property_ValueDouble_default_instance_;
class Property_ValueString;
class Property_ValueStringDefaultTypeInternal;
extern Property_ValueStringDefaultTypeInternal _Property_ValueString_default_instance_;
class Property_ValueUint32;
class Property_ValueUint32DefaultTypeInternal;
extern Property_ValueUint32DefaultTypeInternal _Property_ValueUint32_default_instance_;
class StreamChange;
class StreamChangeDefaultTypeInternal;
extern StreamChangeDefaultTypeInternal _StreamChange_default_instance_;
class StreamData;
class StreamDataDefaultTypeInternal;
extern StreamDataDefaultTypeInternal _StreamData_default_instance_;
class StreamDataCursor;
class StreamDataCursorDefaultTypeInternal;
extern StreamDataCursorDefaultTypeInternal _StreamDataCursor_default_instance_;
class StreamDataKeyboard;
class StreamDataKeyboardDefaultTypeInternal;
extern StreamDataKeyboardDefaultTypeInternal _StreamDataKeyboard_default_instance_;
class StreamDataPointer;
class StreamDataPointerDefaultTypeInternal;
extern StreamDataPointerDefaultTypeInternal _StreamDataPointer_default_instance_;
class StreamInfo;
class StreamInfoDefaultTypeInternal;
extern StreamInfoDefaultTypeInternal _StreamInfo_default_instance_;
}  // namespace snappyv1
PROTOBUF_NAMESPACE_OPEN
template<> ::snappyv1::Message* Arena::CreateMaybeMessage<::snappyv1::Message>(Arena*);
template<> ::snappyv1::Property* Arena::CreateMaybeMessage<::snappyv1::Property>(Arena*);
template<> ::snappyv1::Property_ValueBool* Arena::CreateMaybeMessage<::snappyv1::Property_ValueBool>(Arena*);
template<> ::snappyv1::Property_ValueDouble* Arena::CreateMaybeMessage<::snappyv1::Property_ValueDouble>(Arena*);
template<> ::snappyv1::Property_ValueString* Arena::CreateMaybeMessage<::snappyv1::Property_ValueString>(Arena*);
template<> ::snappyv1::Property_ValueUint32* Arena::CreateMaybeMessage<::snappyv1::Property_ValueUint32>(Arena*);
template<> ::snappyv1::StreamChange* Arena::CreateMaybeMessage<::snappyv1::StreamChange>(Arena*);
template<> ::snappyv1::StreamData* Arena::CreateMaybeMessage<::snappyv1::StreamData>(Arena*);
template<> ::snappyv1::StreamDataCursor* Arena::CreateMaybeMessage<::snappyv1::StreamDataCursor>(Arena*);
template<> ::snappyv1::StreamDataKeyboard* Arena::CreateMaybeMessage<::snappyv1::StreamDataKeyboard>(Arena*);
template<> ::snappyv1::StreamDataPointer* Arena::CreateMaybeMessage<::snappyv1::StreamDataPointer>(Arena*);
template<> ::snappyv1::StreamInfo* Arena::CreateMaybeMessage<::snappyv1::StreamInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace snappyv1 {

enum Platform : int {
  PLATFORM_WINDOWS = 0,
  PLATFORM_LINUX = 1,
  PLATFORM_MACOS = 2,
  PLATFORM_RASPBERRY = 3,
  PLATFORM_ANDROID = 4,
  Platform_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Platform_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Platform_IsValid(int value);
constexpr Platform Platform_MIN = PLATFORM_WINDOWS;
constexpr Platform Platform_MAX = PLATFORM_ANDROID;
constexpr int Platform_ARRAYSIZE = Platform_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Platform_descriptor();
template<typename T>
inline const std::string& Platform_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Platform>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Platform_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Platform_descriptor(), enum_t_value);
}
inline bool Platform_Parse(
    const std::string& name, Platform* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Platform>(
    Platform_descriptor(), name, value);
}
enum StreamMedium : int {
  STREAM_MEDIUM_VIDEO = 0,
  STREAM_MEDIUM_AUDIO = 1,
  STREAM_MEDIUM_PERIPHERIAL = 2,
  StreamMedium_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  StreamMedium_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool StreamMedium_IsValid(int value);
constexpr StreamMedium StreamMedium_MIN = STREAM_MEDIUM_VIDEO;
constexpr StreamMedium StreamMedium_MAX = STREAM_MEDIUM_PERIPHERIAL;
constexpr int StreamMedium_ARRAYSIZE = StreamMedium_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StreamMedium_descriptor();
template<typename T>
inline const std::string& StreamMedium_Name(T enum_t_value) {
  static_assert(::std::is_same<T, StreamMedium>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function StreamMedium_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    StreamMedium_descriptor(), enum_t_value);
}
inline bool StreamMedium_Parse(
    const std::string& name, StreamMedium* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<StreamMedium>(
    StreamMedium_descriptor(), name, value);
}
enum StreamEndpoint : int {
  STREAM_ENDPOINT_DRM = 0,
  STREAM_ENDPOINT_X11 = 1,
  STREAM_ENDPOINT_WAYLAND = 2,
  STREAM_ENDPOINT_CAMERA = 3,
  STREAM_ENDPOINT_KEYBOARD = 4,
  STREAM_ENDPOINT_POINTER = 5,
  STREAM_ENDPOINT_CURSOR = 6,
  StreamEndpoint_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  StreamEndpoint_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool StreamEndpoint_IsValid(int value);
constexpr StreamEndpoint StreamEndpoint_MIN = STREAM_ENDPOINT_DRM;
constexpr StreamEndpoint StreamEndpoint_MAX = STREAM_ENDPOINT_CURSOR;
constexpr int StreamEndpoint_ARRAYSIZE = StreamEndpoint_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StreamEndpoint_descriptor();
template<typename T>
inline const std::string& StreamEndpoint_Name(T enum_t_value) {
  static_assert(::std::is_same<T, StreamEndpoint>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function StreamEndpoint_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    StreamEndpoint_descriptor(), enum_t_value);
}
inline bool StreamEndpoint_Parse(
    const std::string& name, StreamEndpoint* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<StreamEndpoint>(
    StreamEndpoint_descriptor(), name, value);
}
enum StreamDirection : int {
  STREAM_DIRECTION_INPUT = 0,
  STREAM_DIRECTION_OUTPUT = 1,
  StreamDirection_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  StreamDirection_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool StreamDirection_IsValid(int value);
constexpr StreamDirection StreamDirection_MIN = STREAM_DIRECTION_INPUT;
constexpr StreamDirection StreamDirection_MAX = STREAM_DIRECTION_OUTPUT;
constexpr int StreamDirection_ARRAYSIZE = StreamDirection_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StreamDirection_descriptor();
template<typename T>
inline const std::string& StreamDirection_Name(T enum_t_value) {
  static_assert(::std::is_same<T, StreamDirection>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function StreamDirection_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    StreamDirection_descriptor(), enum_t_value);
}
inline bool StreamDirection_Parse(
    const std::string& name, StreamDirection* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<StreamDirection>(
    StreamDirection_descriptor(), name, value);
}
enum StreamEncoding : int {
  STREAM_ENCODING_H264_SOFTWARE = 0,
  STREAM_ENCODING_H264_HARDWARE = 1,
  STREAM_ENCODING_MP3_SOFTWARE = 2,
  STREAM_ENCODING_MP3_HARDWARE = 3,
  StreamEncoding_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  StreamEncoding_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool StreamEncoding_IsValid(int value);
constexpr StreamEncoding StreamEncoding_MIN = STREAM_ENCODING_H264_SOFTWARE;
constexpr StreamEncoding StreamEncoding_MAX = STREAM_ENCODING_MP3_HARDWARE;
constexpr int StreamEncoding_ARRAYSIZE = StreamEncoding_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StreamEncoding_descriptor();
template<typename T>
inline const std::string& StreamEncoding_Name(T enum_t_value) {
  static_assert(::std::is_same<T, StreamEncoding>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function StreamEncoding_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    StreamEncoding_descriptor(), enum_t_value);
}
inline bool StreamEncoding_Parse(
    const std::string& name, StreamEncoding* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<StreamEncoding>(
    StreamEncoding_descriptor(), name, value);
}
enum Command : int {
  COMMAND_INIT = 0,
  COMMAND_INIT_OK = 1,
  COMMAND_START = 2,
  COMMAND_STOP = 3,
  COMMAND_SET_PARAMETER = 4,
  COMMAND_DESTROY = 5,
  Command_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Command_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Command_IsValid(int value);
constexpr Command Command_MIN = COMMAND_INIT;
constexpr Command Command_MAX = COMMAND_DESTROY;
constexpr int Command_ARRAYSIZE = Command_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Command_descriptor();
template<typename T>
inline const std::string& Command_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Command>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Command_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Command_descriptor(), enum_t_value);
}
inline bool Command_Parse(
    const std::string& name, Command* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Command>(
    Command_descriptor(), name, value);
}
enum PropertyType : int {
  PROPERTY_TYPE_STRING = 0,
  PROPERTY_TYPE_BOOL = 1,
  PROPERTY_TYPE_UINT32 = 2,
  PROPERTY_TYPE_DOUBLE = 3,
  PropertyType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  PropertyType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool PropertyType_IsValid(int value);
constexpr PropertyType PropertyType_MIN = PROPERTY_TYPE_STRING;
constexpr PropertyType PropertyType_MAX = PROPERTY_TYPE_DOUBLE;
constexpr int PropertyType_ARRAYSIZE = PropertyType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PropertyType_descriptor();
template<typename T>
inline const std::string& PropertyType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PropertyType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PropertyType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PropertyType_descriptor(), enum_t_value);
}
inline bool PropertyType_Parse(
    const std::string& name, PropertyType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PropertyType>(
    PropertyType_descriptor(), name, value);
}
enum MessageType : int {
  MESSAGE_TYPE_STREAM_CHANGE = 0,
  MESSAGE_TYPE_STREAM_DATA = 1,
  MESSAGE_TYPE_STREAM_INFO = 2,
  MessageType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  MessageType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool MessageType_IsValid(int value);
constexpr MessageType MessageType_MIN = MESSAGE_TYPE_STREAM_CHANGE;
constexpr MessageType MessageType_MAX = MESSAGE_TYPE_STREAM_INFO;
constexpr int MessageType_ARRAYSIZE = MessageType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MessageType_descriptor();
template<typename T>
inline const std::string& MessageType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MessageType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MessageType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MessageType_descriptor(), enum_t_value);
}
inline bool MessageType_Parse(
    const std::string& name, MessageType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MessageType>(
    MessageType_descriptor(), name, value);
}
// ===================================================================

class Property_ValueString PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:snappyv1.Property.ValueString) */ {
 public:
  inline Property_ValueString() : Property_ValueString(nullptr) {};
  virtual ~Property_ValueString();

  Property_ValueString(const Property_ValueString& from);
  Property_ValueString(Property_ValueString&& from) noexcept
    : Property_ValueString() {
    *this = ::std::move(from);
  }

  inline Property_ValueString& operator=(const Property_ValueString& from) {
    CopyFrom(from);
    return *this;
  }
  inline Property_ValueString& operator=(Property_ValueString&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Property_ValueString& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Property_ValueString* internal_default_instance() {
    return reinterpret_cast<const Property_ValueString*>(
               &_Property_ValueString_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Property_ValueString& a, Property_ValueString& b) {
    a.Swap(&b);
  }
  inline void Swap(Property_ValueString* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Property_ValueString* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Property_ValueString* New() const final {
    return CreateMaybeMessage<Property_ValueString>(nullptr);
  }

  Property_ValueString* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Property_ValueString>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Property_ValueString& from);
  void MergeFrom(const Property_ValueString& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Property_ValueString* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "snappyv1.Property.ValueString";
  }
  protected:
  explicit Property_ValueString(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_snappyv1_2eproto);
    return ::descriptor_table_snappyv1_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // string value = 1;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_value();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_value(
      std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:snappyv1.Property.ValueString)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_snappyv1_2eproto;
};
// -------------------------------------------------------------------

class Property_ValueBool PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:snappyv1.Property.ValueBool) */ {
 public:
  inline Property_ValueBool() : Property_ValueBool(nullptr) {};
  virtual ~Property_ValueBool();

  Property_ValueBool(const Property_ValueBool& from);
  Property_ValueBool(Property_ValueBool&& from) noexcept
    : Property_ValueBool() {
    *this = ::std::move(from);
  }

  inline Property_ValueBool& operator=(const Property_ValueBool& from) {
    CopyFrom(from);
    return *this;
  }
  inline Property_ValueBool& operator=(Property_ValueBool&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Property_ValueBool& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Property_ValueBool* internal_default_instance() {
    return reinterpret_cast<const Property_ValueBool*>(
               &_Property_ValueBool_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Property_ValueBool& a, Property_ValueBool& b) {
    a.Swap(&b);
  }
  inline void Swap(Property_ValueBool* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Property_ValueBool* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Property_ValueBool* New() const final {
    return CreateMaybeMessage<Property_ValueBool>(nullptr);
  }

  Property_ValueBool* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Property_ValueBool>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Property_ValueBool& from);
  void MergeFrom(const Property_ValueBool& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Property_ValueBool* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "snappyv1.Property.ValueBool";
  }
  protected:
  explicit Property_ValueBool(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_snappyv1_2eproto);
    return ::descriptor_table_snappyv1_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // bool value = 1;
  void clear_value();
  bool value() const;
  void set_value(bool value);
  private:
  bool _internal_value() const;
  void _internal_set_value(bool value);
  public:

  // @@protoc_insertion_point(class_scope:snappyv1.Property.ValueBool)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_snappyv1_2eproto;
};
// -------------------------------------------------------------------

class Property_ValueUint32 PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:snappyv1.Property.ValueUint32) */ {
 public:
  inline Property_ValueUint32() : Property_ValueUint32(nullptr) {};
  virtual ~Property_ValueUint32();

  Property_ValueUint32(const Property_ValueUint32& from);
  Property_ValueUint32(Property_ValueUint32&& from) noexcept
    : Property_ValueUint32() {
    *this = ::std::move(from);
  }

  inline Property_ValueUint32& operator=(const Property_ValueUint32& from) {
    CopyFrom(from);
    return *this;
  }
  inline Property_ValueUint32& operator=(Property_ValueUint32&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Property_ValueUint32& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Property_ValueUint32* internal_default_instance() {
    return reinterpret_cast<const Property_ValueUint32*>(
               &_Property_ValueUint32_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Property_ValueUint32& a, Property_ValueUint32& b) {
    a.Swap(&b);
  }
  inline void Swap(Property_ValueUint32* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Property_ValueUint32* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Property_ValueUint32* New() const final {
    return CreateMaybeMessage<Property_ValueUint32>(nullptr);
  }

  Property_ValueUint32* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Property_ValueUint32>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Property_ValueUint32& from);
  void MergeFrom(const Property_ValueUint32& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Property_ValueUint32* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "snappyv1.Property.ValueUint32";
  }
  protected:
  explicit Property_ValueUint32(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_snappyv1_2eproto);
    return ::descriptor_table_snappyv1_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
    kMinFieldNumber = 2,
    kMaxFieldNumber = 3,
  };
  // uint32 value = 1;
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::uint32 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 min = 2;
  bool has_min() const;
  private:
  bool _internal_has_min() const;
  public:
  void clear_min();
  ::PROTOBUF_NAMESPACE_ID::uint32 min() const;
  void set_min(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_min() const;
  void _internal_set_min(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 max = 3;
  bool has_max() const;
  private:
  bool _internal_has_max() const;
  public:
  void clear_max();
  ::PROTOBUF_NAMESPACE_ID::uint32 max() const;
  void set_max(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max() const;
  void _internal_set_max(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:snappyv1.Property.ValueUint32)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 value_;
  ::PROTOBUF_NAMESPACE_ID::uint32 min_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_;
  friend struct ::TableStruct_snappyv1_2eproto;
};
// -------------------------------------------------------------------

class Property_ValueDouble PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:snappyv1.Property.ValueDouble) */ {
 public:
  inline Property_ValueDouble() : Property_ValueDouble(nullptr) {};
  virtual ~Property_ValueDouble();

  Property_ValueDouble(const Property_ValueDouble& from);
  Property_ValueDouble(Property_ValueDouble&& from) noexcept
    : Property_ValueDouble() {
    *this = ::std::move(from);
  }

  inline Property_ValueDouble& operator=(const Property_ValueDouble& from) {
    CopyFrom(from);
    return *this;
  }
  inline Property_ValueDouble& operator=(Property_ValueDouble&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Property_ValueDouble& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Property_ValueDouble* internal_default_instance() {
    return reinterpret_cast<const Property_ValueDouble*>(
               &_Property_ValueDouble_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Property_ValueDouble& a, Property_ValueDouble& b) {
    a.Swap(&b);
  }
  inline void Swap(Property_ValueDouble* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Property_ValueDouble* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Property_ValueDouble* New() const final {
    return CreateMaybeMessage<Property_ValueDouble>(nullptr);
  }

  Property_ValueDouble* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Property_ValueDouble>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Property_ValueDouble& from);
  void MergeFrom(const Property_ValueDouble& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Property_ValueDouble* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "snappyv1.Property.ValueDouble";
  }
  protected:
  explicit Property_ValueDouble(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_snappyv1_2eproto);
    return ::descriptor_table_snappyv1_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
    kMinFieldNumber = 2,
    kMaxFieldNumber = 3,
  };
  // double value = 1;
  void clear_value();
  double value() const;
  void set_value(double value);
  private:
  double _internal_value() const;
  void _internal_set_value(double value);
  public:

  // double min = 2;
  bool has_min() const;
  private:
  bool _internal_has_min() const;
  public:
  void clear_min();
  double min() const;
  void set_min(double value);
  private:
  double _internal_min() const;
  void _internal_set_min(double value);
  public:

  // double max = 3;
  bool has_max() const;
  private:
  bool _internal_has_max() const;
  public:
  void clear_max();
  double max() const;
  void set_max(double value);
  private:
  double _internal_max() const;
  void _internal_set_max(double value);
  public:

  // @@protoc_insertion_point(class_scope:snappyv1.Property.ValueDouble)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double value_;
  double min_;
  double max_;
  friend struct ::TableStruct_snappyv1_2eproto;
};
// -------------------------------------------------------------------

class Property PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:snappyv1.Property) */ {
 public:
  inline Property() : Property(nullptr) {};
  virtual ~Property();

  Property(const Property& from);
  Property(Property&& from) noexcept
    : Property() {
    *this = ::std::move(from);
  }

  inline Property& operator=(const Property& from) {
    CopyFrom(from);
    return *this;
  }
  inline Property& operator=(Property&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Property& default_instance();

  enum ValueCase {
    kValueString = 3,
    kValueBool = 4,
    kValueUint32 = 5,
    kValueDouble = 6,
    VALUE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Property* internal_default_instance() {
    return reinterpret_cast<const Property*>(
               &_Property_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Property& a, Property& b) {
    a.Swap(&b);
  }
  inline void Swap(Property* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Property* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Property* New() const final {
    return CreateMaybeMessage<Property>(nullptr);
  }

  Property* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Property>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Property& from);
  void MergeFrom(const Property& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Property* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "snappyv1.Property";
  }
  protected:
  explicit Property(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_snappyv1_2eproto);
    return ::descriptor_table_snappyv1_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Property_ValueString ValueString;
  typedef Property_ValueBool ValueBool;
  typedef Property_ValueUint32 ValueUint32;
  typedef Property_ValueDouble ValueDouble;

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 2,
    kTypeFieldNumber = 1,
    kValueStringFieldNumber = 3,
    kValueBoolFieldNumber = 4,
    kValueUint32FieldNumber = 5,
    kValueDoubleFieldNumber = 6,
  };
  // string key = 2;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_key();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_key(
      std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // .snappyv1.PropertyType type = 1;
  void clear_type();
  ::snappyv1::PropertyType type() const;
  void set_type(::snappyv1::PropertyType value);
  private:
  ::snappyv1::PropertyType _internal_type() const;
  void _internal_set_type(::snappyv1::PropertyType value);
  public:

  // .snappyv1.Property.ValueString value_string = 3;
  bool has_value_string() const;
  private:
  bool _internal_has_value_string() const;
  public:
  void clear_value_string();
  const ::snappyv1::Property_ValueString& value_string() const;
  ::snappyv1::Property_ValueString* release_value_string();
  ::snappyv1::Property_ValueString* mutable_value_string();
  void set_allocated_value_string(::snappyv1::Property_ValueString* value_string);
  private:
  const ::snappyv1::Property_ValueString& _internal_value_string() const;
  ::snappyv1::Property_ValueString* _internal_mutable_value_string();
  public:
  void unsafe_arena_set_allocated_value_string(
      ::snappyv1::Property_ValueString* value_string);
  ::snappyv1::Property_ValueString* unsafe_arena_release_value_string();

  // .snappyv1.Property.ValueBool value_bool = 4;
  bool has_value_bool() const;
  private:
  bool _internal_has_value_bool() const;
  public:
  void clear_value_bool();
  const ::snappyv1::Property_ValueBool& value_bool() const;
  ::snappyv1::Property_ValueBool* release_value_bool();
  ::snappyv1::Property_ValueBool* mutable_value_bool();
  void set_allocated_value_bool(::snappyv1::Property_ValueBool* value_bool);
  private:
  const ::snappyv1::Property_ValueBool& _internal_value_bool() const;
  ::snappyv1::Property_ValueBool* _internal_mutable_value_bool();
  public:
  void unsafe_arena_set_allocated_value_bool(
      ::snappyv1::Property_ValueBool* value_bool);
  ::snappyv1::Property_ValueBool* unsafe_arena_release_value_bool();

  // .snappyv1.Property.ValueUint32 value_uint32 = 5;
  bool has_value_uint32() const;
  private:
  bool _internal_has_value_uint32() const;
  public:
  void clear_value_uint32();
  const ::snappyv1::Property_ValueUint32& value_uint32() const;
  ::snappyv1::Property_ValueUint32* release_value_uint32();
  ::snappyv1::Property_ValueUint32* mutable_value_uint32();
  void set_allocated_value_uint32(::snappyv1::Property_ValueUint32* value_uint32);
  private:
  const ::snappyv1::Property_ValueUint32& _internal_value_uint32() const;
  ::snappyv1::Property_ValueUint32* _internal_mutable_value_uint32();
  public:
  void unsafe_arena_set_allocated_value_uint32(
      ::snappyv1::Property_ValueUint32* value_uint32);
  ::snappyv1::Property_ValueUint32* unsafe_arena_release_value_uint32();

  // .snappyv1.Property.ValueDouble value_double = 6;
  bool has_value_double() const;
  private:
  bool _internal_has_value_double() const;
  public:
  void clear_value_double();
  const ::snappyv1::Property_ValueDouble& value_double() const;
  ::snappyv1::Property_ValueDouble* release_value_double();
  ::snappyv1::Property_ValueDouble* mutable_value_double();
  void set_allocated_value_double(::snappyv1::Property_ValueDouble* value_double);
  private:
  const ::snappyv1::Property_ValueDouble& _internal_value_double() const;
  ::snappyv1::Property_ValueDouble* _internal_mutable_value_double();
  public:
  void unsafe_arena_set_allocated_value_double(
      ::snappyv1::Property_ValueDouble* value_double);
  ::snappyv1::Property_ValueDouble* unsafe_arena_release_value_double();

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:snappyv1.Property)
 private:
  class _Internal;
  void set_has_value_string();
  void set_has_value_bool();
  void set_has_value_uint32();
  void set_has_value_double();

  inline bool has_value() const;
  inline void clear_has_value();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  int type_;
  union ValueUnion {
    ValueUnion() {}
    ::snappyv1::Property_ValueString* value_string_;
    ::snappyv1::Property_ValueBool* value_bool_;
    ::snappyv1::Property_ValueUint32* value_uint32_;
    ::snappyv1::Property_ValueDouble* value_double_;
  } value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_snappyv1_2eproto;
};
// -------------------------------------------------------------------

class StreamInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:snappyv1.StreamInfo) */ {
 public:
  inline StreamInfo() : StreamInfo(nullptr) {};
  virtual ~StreamInfo();

  StreamInfo(const StreamInfo& from);
  StreamInfo(StreamInfo&& from) noexcept
    : StreamInfo() {
    *this = ::std::move(from);
  }

  inline StreamInfo& operator=(const StreamInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamInfo& operator=(StreamInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StreamInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StreamInfo* internal_default_instance() {
    return reinterpret_cast<const StreamInfo*>(
               &_StreamInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(StreamInfo& a, StreamInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StreamInfo* New() const final {
    return CreateMaybeMessage<StreamInfo>(nullptr);
  }

  StreamInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StreamInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StreamInfo& from);
  void MergeFrom(const StreamInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "snappyv1.StreamInfo";
  }
  protected:
  explicit StreamInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_snappyv1_2eproto);
    return ::descriptor_table_snappyv1_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStreamEndpointsFieldNumber = 2,
    kStreamEncodingsFieldNumber = 3,
    kPlatformFieldNumber = 1,
  };
  // repeated .snappyv1.StreamEndpoint stream_endpoints = 2;
  int stream_endpoints_size() const;
  private:
  int _internal_stream_endpoints_size() const;
  public:
  void clear_stream_endpoints();
  private:
  ::snappyv1::StreamEndpoint _internal_stream_endpoints(int index) const;
  void _internal_add_stream_endpoints(::snappyv1::StreamEndpoint value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_stream_endpoints();
  public:
  ::snappyv1::StreamEndpoint stream_endpoints(int index) const;
  void set_stream_endpoints(int index, ::snappyv1::StreamEndpoint value);
  void add_stream_endpoints(::snappyv1::StreamEndpoint value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& stream_endpoints() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_stream_endpoints();

  // repeated .snappyv1.StreamEncoding stream_encodings = 3;
  int stream_encodings_size() const;
  private:
  int _internal_stream_encodings_size() const;
  public:
  void clear_stream_encodings();
  private:
  ::snappyv1::StreamEncoding _internal_stream_encodings(int index) const;
  void _internal_add_stream_encodings(::snappyv1::StreamEncoding value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_stream_encodings();
  public:
  ::snappyv1::StreamEncoding stream_encodings(int index) const;
  void set_stream_encodings(int index, ::snappyv1::StreamEncoding value);
  void add_stream_encodings(::snappyv1::StreamEncoding value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& stream_encodings() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_stream_encodings();

  // .snappyv1.Platform platform = 1;
  void clear_platform();
  ::snappyv1::Platform platform() const;
  void set_platform(::snappyv1::Platform value);
  private:
  ::snappyv1::Platform _internal_platform() const;
  void _internal_set_platform(::snappyv1::Platform value);
  public:

  // @@protoc_insertion_point(class_scope:snappyv1.StreamInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> stream_endpoints_;
  mutable std::atomic<int> _stream_endpoints_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> stream_encodings_;
  mutable std::atomic<int> _stream_encodings_cached_byte_size_;
  int platform_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_snappyv1_2eproto;
};
// -------------------------------------------------------------------

class StreamChange PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:snappyv1.StreamChange) */ {
 public:
  inline StreamChange() : StreamChange(nullptr) {};
  virtual ~StreamChange();

  StreamChange(const StreamChange& from);
  StreamChange(StreamChange&& from) noexcept
    : StreamChange() {
    *this = ::std::move(from);
  }

  inline StreamChange& operator=(const StreamChange& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamChange& operator=(StreamChange&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StreamChange& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StreamChange* internal_default_instance() {
    return reinterpret_cast<const StreamChange*>(
               &_StreamChange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(StreamChange& a, StreamChange& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamChange* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamChange* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StreamChange* New() const final {
    return CreateMaybeMessage<StreamChange>(nullptr);
  }

  StreamChange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StreamChange>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StreamChange& from);
  void MergeFrom(const StreamChange& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamChange* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "snappyv1.StreamChange";
  }
  protected:
  explicit StreamChange(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_snappyv1_2eproto);
    return ::descriptor_table_snappyv1_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPropertyFieldNumber = 7,
    kIdFieldNumber = 1,
    kCommandFieldNumber = 2,
    kStreamMediumFieldNumber = 3,
    kStreamDirectionFieldNumber = 4,
    kStreamEndpointFieldNumber = 5,
    kStreamEncodingFieldNumber = 6,
  };
  // repeated .snappyv1.Property property = 7;
  int property_size() const;
  private:
  int _internal_property_size() const;
  public:
  void clear_property();
  ::snappyv1::Property* mutable_property(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::snappyv1::Property >*
      mutable_property();
  private:
  const ::snappyv1::Property& _internal_property(int index) const;
  ::snappyv1::Property* _internal_add_property();
  public:
  const ::snappyv1::Property& property(int index) const;
  ::snappyv1::Property* add_property();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::snappyv1::Property >&
      property() const;

  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .snappyv1.Command command = 2;
  void clear_command();
  ::snappyv1::Command command() const;
  void set_command(::snappyv1::Command value);
  private:
  ::snappyv1::Command _internal_command() const;
  void _internal_set_command(::snappyv1::Command value);
  public:

  // .snappyv1.StreamMedium stream_medium = 3;
  void clear_stream_medium();
  ::snappyv1::StreamMedium stream_medium() const;
  void set_stream_medium(::snappyv1::StreamMedium value);
  private:
  ::snappyv1::StreamMedium _internal_stream_medium() const;
  void _internal_set_stream_medium(::snappyv1::StreamMedium value);
  public:

  // .snappyv1.StreamDirection stream_direction = 4;
  void clear_stream_direction();
  ::snappyv1::StreamDirection stream_direction() const;
  void set_stream_direction(::snappyv1::StreamDirection value);
  private:
  ::snappyv1::StreamDirection _internal_stream_direction() const;
  void _internal_set_stream_direction(::snappyv1::StreamDirection value);
  public:

  // .snappyv1.StreamEndpoint stream_endpoint = 5;
  void clear_stream_endpoint();
  ::snappyv1::StreamEndpoint stream_endpoint() const;
  void set_stream_endpoint(::snappyv1::StreamEndpoint value);
  private:
  ::snappyv1::StreamEndpoint _internal_stream_endpoint() const;
  void _internal_set_stream_endpoint(::snappyv1::StreamEndpoint value);
  public:

  // .snappyv1.StreamEncoding stream_encoding = 6;
  void clear_stream_encoding();
  ::snappyv1::StreamEncoding stream_encoding() const;
  void set_stream_encoding(::snappyv1::StreamEncoding value);
  private:
  ::snappyv1::StreamEncoding _internal_stream_encoding() const;
  void _internal_set_stream_encoding(::snappyv1::StreamEncoding value);
  public:

  // @@protoc_insertion_point(class_scope:snappyv1.StreamChange)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::snappyv1::Property > property_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  int command_;
  int stream_medium_;
  int stream_direction_;
  int stream_endpoint_;
  int stream_encoding_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_snappyv1_2eproto;
};
// -------------------------------------------------------------------

class StreamData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:snappyv1.StreamData) */ {
 public:
  inline StreamData() : StreamData(nullptr) {};
  virtual ~StreamData();

  StreamData(const StreamData& from);
  StreamData(StreamData&& from) noexcept
    : StreamData() {
    *this = ::std::move(from);
  }

  inline StreamData& operator=(const StreamData& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamData& operator=(StreamData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StreamData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StreamData* internal_default_instance() {
    return reinterpret_cast<const StreamData*>(
               &_StreamData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(StreamData& a, StreamData& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StreamData* New() const final {
    return CreateMaybeMessage<StreamData>(nullptr);
  }

  StreamData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StreamData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StreamData& from);
  void MergeFrom(const StreamData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "snappyv1.StreamData";
  }
  protected:
  explicit StreamData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_snappyv1_2eproto);
    return ::descriptor_table_snappyv1_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPayloadFieldNumber = 2,
    kStreamIdFieldNumber = 1,
  };
  // bytes payload = 2;
  void clear_payload();
  const std::string& payload() const;
  void set_payload(const std::string& value);
  void set_payload(std::string&& value);
  void set_payload(const char* value);
  void set_payload(const void* value, size_t size);
  std::string* mutable_payload();
  std::string* release_payload();
  void set_allocated_payload(std::string* payload);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_payload();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_payload(
      std::string* payload);
  private:
  const std::string& _internal_payload() const;
  void _internal_set_payload(const std::string& value);
  std::string* _internal_mutable_payload();
  public:

  // uint32 stream_id = 1;
  void clear_stream_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 stream_id() const;
  void set_stream_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_stream_id() const;
  void _internal_set_stream_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:snappyv1.StreamData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_;
  ::PROTOBUF_NAMESPACE_ID::uint32 stream_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_snappyv1_2eproto;
};
// -------------------------------------------------------------------

class Message PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:snappyv1.Message) */ {
 public:
  inline Message() : Message(nullptr) {};
  virtual ~Message();

  Message(const Message& from);
  Message(Message&& from) noexcept
    : Message() {
    *this = ::std::move(from);
  }

  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message& operator=(Message&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Message& default_instance();

  enum MessageCase {
    kStreamChange = 2,
    kStreamData = 3,
    kStreamInfo = 4,
    MESSAGE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Message* internal_default_instance() {
    return reinterpret_cast<const Message*>(
               &_Message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Message& a, Message& b) {
    a.Swap(&b);
  }
  inline void Swap(Message* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Message* New() const final {
    return CreateMaybeMessage<Message>(nullptr);
  }

  Message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Message>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Message& from);
  void MergeFrom(const Message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "snappyv1.Message";
  }
  protected:
  explicit Message(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_snappyv1_2eproto);
    return ::descriptor_table_snappyv1_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kStreamChangeFieldNumber = 2,
    kStreamDataFieldNumber = 3,
    kStreamInfoFieldNumber = 4,
  };
  // .snappyv1.MessageType type = 1;
  void clear_type();
  ::snappyv1::MessageType type() const;
  void set_type(::snappyv1::MessageType value);
  private:
  ::snappyv1::MessageType _internal_type() const;
  void _internal_set_type(::snappyv1::MessageType value);
  public:

  // .snappyv1.StreamChange stream_change = 2;
  bool has_stream_change() const;
  private:
  bool _internal_has_stream_change() const;
  public:
  void clear_stream_change();
  const ::snappyv1::StreamChange& stream_change() const;
  ::snappyv1::StreamChange* release_stream_change();
  ::snappyv1::StreamChange* mutable_stream_change();
  void set_allocated_stream_change(::snappyv1::StreamChange* stream_change);
  private:
  const ::snappyv1::StreamChange& _internal_stream_change() const;
  ::snappyv1::StreamChange* _internal_mutable_stream_change();
  public:
  void unsafe_arena_set_allocated_stream_change(
      ::snappyv1::StreamChange* stream_change);
  ::snappyv1::StreamChange* unsafe_arena_release_stream_change();

  // .snappyv1.StreamData stream_data = 3;
  bool has_stream_data() const;
  private:
  bool _internal_has_stream_data() const;
  public:
  void clear_stream_data();
  const ::snappyv1::StreamData& stream_data() const;
  ::snappyv1::StreamData* release_stream_data();
  ::snappyv1::StreamData* mutable_stream_data();
  void set_allocated_stream_data(::snappyv1::StreamData* stream_data);
  private:
  const ::snappyv1::StreamData& _internal_stream_data() const;
  ::snappyv1::StreamData* _internal_mutable_stream_data();
  public:
  void unsafe_arena_set_allocated_stream_data(
      ::snappyv1::StreamData* stream_data);
  ::snappyv1::StreamData* unsafe_arena_release_stream_data();

  // .snappyv1.StreamInfo stream_info = 4;
  bool has_stream_info() const;
  private:
  bool _internal_has_stream_info() const;
  public:
  void clear_stream_info();
  const ::snappyv1::StreamInfo& stream_info() const;
  ::snappyv1::StreamInfo* release_stream_info();
  ::snappyv1::StreamInfo* mutable_stream_info();
  void set_allocated_stream_info(::snappyv1::StreamInfo* stream_info);
  private:
  const ::snappyv1::StreamInfo& _internal_stream_info() const;
  ::snappyv1::StreamInfo* _internal_mutable_stream_info();
  public:
  void unsafe_arena_set_allocated_stream_info(
      ::snappyv1::StreamInfo* stream_info);
  ::snappyv1::StreamInfo* unsafe_arena_release_stream_info();

  void clear_message();
  MessageCase message_case() const;
  // @@protoc_insertion_point(class_scope:snappyv1.Message)
 private:
  class _Internal;
  void set_has_stream_change();
  void set_has_stream_data();
  void set_has_stream_info();

  inline bool has_message() const;
  inline void clear_has_message();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int type_;
  union MessageUnion {
    MessageUnion() {}
    ::snappyv1::StreamChange* stream_change_;
    ::snappyv1::StreamData* stream_data_;
    ::snappyv1::StreamInfo* stream_info_;
  } message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_snappyv1_2eproto;
};
// -------------------------------------------------------------------

class StreamDataPointer PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:snappyv1.StreamDataPointer) */ {
 public:
  inline StreamDataPointer() : StreamDataPointer(nullptr) {};
  virtual ~StreamDataPointer();

  StreamDataPointer(const StreamDataPointer& from);
  StreamDataPointer(StreamDataPointer&& from) noexcept
    : StreamDataPointer() {
    *this = ::std::move(from);
  }

  inline StreamDataPointer& operator=(const StreamDataPointer& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamDataPointer& operator=(StreamDataPointer&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StreamDataPointer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StreamDataPointer* internal_default_instance() {
    return reinterpret_cast<const StreamDataPointer*>(
               &_StreamDataPointer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(StreamDataPointer& a, StreamDataPointer& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamDataPointer* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamDataPointer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StreamDataPointer* New() const final {
    return CreateMaybeMessage<StreamDataPointer>(nullptr);
  }

  StreamDataPointer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StreamDataPointer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StreamDataPointer& from);
  void MergeFrom(const StreamDataPointer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamDataPointer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "snappyv1.StreamDataPointer";
  }
  protected:
  explicit StreamDataPointer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_snappyv1_2eproto);
    return ::descriptor_table_snappyv1_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAbsxFieldNumber = 1,
    kAbsyFieldNumber = 2,
    kMaskFieldNumber = 3,
  };
  // uint32 absx = 1;
  void clear_absx();
  ::PROTOBUF_NAMESPACE_ID::uint32 absx() const;
  void set_absx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_absx() const;
  void _internal_set_absx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 absy = 2;
  void clear_absy();
  ::PROTOBUF_NAMESPACE_ID::uint32 absy() const;
  void set_absy(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_absy() const;
  void _internal_set_absy(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int32 mask = 3;
  bool has_mask() const;
  private:
  bool _internal_has_mask() const;
  public:
  void clear_mask();
  ::PROTOBUF_NAMESPACE_ID::int32 mask() const;
  void set_mask(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mask() const;
  void _internal_set_mask(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:snappyv1.StreamDataPointer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 absx_;
  ::PROTOBUF_NAMESPACE_ID::uint32 absy_;
  ::PROTOBUF_NAMESPACE_ID::int32 mask_;
  friend struct ::TableStruct_snappyv1_2eproto;
};
// -------------------------------------------------------------------

class StreamDataKeyboard PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:snappyv1.StreamDataKeyboard) */ {
 public:
  inline StreamDataKeyboard() : StreamDataKeyboard(nullptr) {};
  virtual ~StreamDataKeyboard();

  StreamDataKeyboard(const StreamDataKeyboard& from);
  StreamDataKeyboard(StreamDataKeyboard&& from) noexcept
    : StreamDataKeyboard() {
    *this = ::std::move(from);
  }

  inline StreamDataKeyboard& operator=(const StreamDataKeyboard& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamDataKeyboard& operator=(StreamDataKeyboard&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StreamDataKeyboard& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StreamDataKeyboard* internal_default_instance() {
    return reinterpret_cast<const StreamDataKeyboard*>(
               &_StreamDataKeyboard_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(StreamDataKeyboard& a, StreamDataKeyboard& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamDataKeyboard* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamDataKeyboard* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StreamDataKeyboard* New() const final {
    return CreateMaybeMessage<StreamDataKeyboard>(nullptr);
  }

  StreamDataKeyboard* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StreamDataKeyboard>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StreamDataKeyboard& from);
  void MergeFrom(const StreamDataKeyboard& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamDataKeyboard* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "snappyv1.StreamDataKeyboard";
  }
  protected:
  explicit StreamDataKeyboard(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_snappyv1_2eproto);
    return ::descriptor_table_snappyv1_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeysymFieldNumber = 1,
    kKeycodeFieldNumber = 2,
    kDownFieldNumber = 3,
  };
  // uint32 keysym = 1;
  void clear_keysym();
  ::PROTOBUF_NAMESPACE_ID::uint32 keysym() const;
  void set_keysym(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_keysym() const;
  void _internal_set_keysym(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 keycode = 2;
  void clear_keycode();
  ::PROTOBUF_NAMESPACE_ID::uint32 keycode() const;
  void set_keycode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_keycode() const;
  void _internal_set_keycode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool down = 3;
  void clear_down();
  bool down() const;
  void set_down(bool value);
  private:
  bool _internal_down() const;
  void _internal_set_down(bool value);
  public:

  // @@protoc_insertion_point(class_scope:snappyv1.StreamDataKeyboard)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 keysym_;
  ::PROTOBUF_NAMESPACE_ID::uint32 keycode_;
  bool down_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_snappyv1_2eproto;
};
// -------------------------------------------------------------------

class StreamDataCursor PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:snappyv1.StreamDataCursor) */ {
 public:
  inline StreamDataCursor() : StreamDataCursor(nullptr) {};
  virtual ~StreamDataCursor();

  StreamDataCursor(const StreamDataCursor& from);
  StreamDataCursor(StreamDataCursor&& from) noexcept
    : StreamDataCursor() {
    *this = ::std::move(from);
  }

  inline StreamDataCursor& operator=(const StreamDataCursor& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamDataCursor& operator=(StreamDataCursor&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StreamDataCursor& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StreamDataCursor* internal_default_instance() {
    return reinterpret_cast<const StreamDataCursor*>(
               &_StreamDataCursor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(StreamDataCursor& a, StreamDataCursor& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamDataCursor* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamDataCursor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StreamDataCursor* New() const final {
    return CreateMaybeMessage<StreamDataCursor>(nullptr);
  }

  StreamDataCursor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StreamDataCursor>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StreamDataCursor& from);
  void MergeFrom(const StreamDataCursor& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamDataCursor* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "snappyv1.StreamDataCursor";
  }
  protected:
  explicit StreamDataCursor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_snappyv1_2eproto);
    return ::descriptor_table_snappyv1_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImageFieldNumber = 5,
    kWidthFieldNumber = 1,
    kHeightFieldNumber = 2,
    kHotxFieldNumber = 3,
    kHotyFieldNumber = 4,
  };
  // bytes image = 5;
  void clear_image();
  const std::string& image() const;
  void set_image(const std::string& value);
  void set_image(std::string&& value);
  void set_image(const char* value);
  void set_image(const void* value, size_t size);
  std::string* mutable_image();
  std::string* release_image();
  void set_allocated_image(std::string* image);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_image();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_image(
      std::string* image);
  private:
  const std::string& _internal_image() const;
  void _internal_set_image(const std::string& value);
  std::string* _internal_mutable_image();
  public:

  // uint32 width = 1;
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::uint32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_width() const;
  void _internal_set_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 height = 2;
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::uint32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 hotx = 3;
  void clear_hotx();
  ::PROTOBUF_NAMESPACE_ID::uint32 hotx() const;
  void set_hotx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_hotx() const;
  void _internal_set_hotx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 hoty = 4;
  void clear_hoty();
  ::PROTOBUF_NAMESPACE_ID::uint32 hoty() const;
  void set_hoty(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_hoty() const;
  void _internal_set_hoty(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:snappyv1.StreamDataCursor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_;
  ::PROTOBUF_NAMESPACE_ID::uint32 width_;
  ::PROTOBUF_NAMESPACE_ID::uint32 height_;
  ::PROTOBUF_NAMESPACE_ID::uint32 hotx_;
  ::PROTOBUF_NAMESPACE_ID::uint32 hoty_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_snappyv1_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Property_ValueString

// string value = 1;
inline void Property_ValueString::clear_value() {
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Property_ValueString::value() const {
  // @@protoc_insertion_point(field_get:snappyv1.Property.ValueString.value)
  return _internal_value();
}
inline void Property_ValueString::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:snappyv1.Property.ValueString.value)
}
inline std::string* Property_ValueString::mutable_value() {
  // @@protoc_insertion_point(field_mutable:snappyv1.Property.ValueString.value)
  return _internal_mutable_value();
}
inline const std::string& Property_ValueString::_internal_value() const {
  return value_.Get();
}
inline void Property_ValueString::_internal_set_value(const std::string& value) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Property_ValueString::set_value(std::string&& value) {
  
  value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:snappyv1.Property.ValueString.value)
}
inline void Property_ValueString::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:snappyv1.Property.ValueString.value)
}
inline void Property_ValueString::set_value(const char* value,
    size_t size) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:snappyv1.Property.ValueString.value)
}
inline std::string* Property_ValueString::_internal_mutable_value() {
  
  return value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Property_ValueString::release_value() {
  // @@protoc_insertion_point(field_release:snappyv1.Property.ValueString.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Property_ValueString::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:snappyv1.Property.ValueString.value)
}
inline std::string* Property_ValueString::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:snappyv1.Property.ValueString.value)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return value_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Property_ValueString::unsafe_arena_set_allocated_value(
    std::string* value) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (value != nullptr) {
    
  } else {
    
  }
  value_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      value, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:snappyv1.Property.ValueString.value)
}

// -------------------------------------------------------------------

// Property_ValueBool

// bool value = 1;
inline void Property_ValueBool::clear_value() {
  value_ = false;
}
inline bool Property_ValueBool::_internal_value() const {
  return value_;
}
inline bool Property_ValueBool::value() const {
  // @@protoc_insertion_point(field_get:snappyv1.Property.ValueBool.value)
  return _internal_value();
}
inline void Property_ValueBool::_internal_set_value(bool value) {
  
  value_ = value;
}
inline void Property_ValueBool::set_value(bool value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:snappyv1.Property.ValueBool.value)
}

// -------------------------------------------------------------------

// Property_ValueUint32

// uint32 value = 1;
inline void Property_ValueUint32::clear_value() {
  value_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Property_ValueUint32::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Property_ValueUint32::value() const {
  // @@protoc_insertion_point(field_get:snappyv1.Property.ValueUint32.value)
  return _internal_value();
}
inline void Property_ValueUint32::_internal_set_value(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  value_ = value;
}
inline void Property_ValueUint32::set_value(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:snappyv1.Property.ValueUint32.value)
}

// uint32 min = 2;
inline bool Property_ValueUint32::_internal_has_min() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Property_ValueUint32::has_min() const {
  return _internal_has_min();
}
inline void Property_ValueUint32::clear_min() {
  min_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Property_ValueUint32::_internal_min() const {
  return min_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Property_ValueUint32::min() const {
  // @@protoc_insertion_point(field_get:snappyv1.Property.ValueUint32.min)
  return _internal_min();
}
inline void Property_ValueUint32::_internal_set_min(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  min_ = value;
}
inline void Property_ValueUint32::set_min(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_min(value);
  // @@protoc_insertion_point(field_set:snappyv1.Property.ValueUint32.min)
}

// uint32 max = 3;
inline bool Property_ValueUint32::_internal_has_max() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Property_ValueUint32::has_max() const {
  return _internal_has_max();
}
inline void Property_ValueUint32::clear_max() {
  max_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Property_ValueUint32::_internal_max() const {
  return max_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Property_ValueUint32::max() const {
  // @@protoc_insertion_point(field_get:snappyv1.Property.ValueUint32.max)
  return _internal_max();
}
inline void Property_ValueUint32::_internal_set_max(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  max_ = value;
}
inline void Property_ValueUint32::set_max(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max(value);
  // @@protoc_insertion_point(field_set:snappyv1.Property.ValueUint32.max)
}

// -------------------------------------------------------------------

// Property_ValueDouble

// double value = 1;
inline void Property_ValueDouble::clear_value() {
  value_ = 0;
}
inline double Property_ValueDouble::_internal_value() const {
  return value_;
}
inline double Property_ValueDouble::value() const {
  // @@protoc_insertion_point(field_get:snappyv1.Property.ValueDouble.value)
  return _internal_value();
}
inline void Property_ValueDouble::_internal_set_value(double value) {
  
  value_ = value;
}
inline void Property_ValueDouble::set_value(double value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:snappyv1.Property.ValueDouble.value)
}

// double min = 2;
inline bool Property_ValueDouble::_internal_has_min() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Property_ValueDouble::has_min() const {
  return _internal_has_min();
}
inline void Property_ValueDouble::clear_min() {
  min_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double Property_ValueDouble::_internal_min() const {
  return min_;
}
inline double Property_ValueDouble::min() const {
  // @@protoc_insertion_point(field_get:snappyv1.Property.ValueDouble.min)
  return _internal_min();
}
inline void Property_ValueDouble::_internal_set_min(double value) {
  _has_bits_[0] |= 0x00000001u;
  min_ = value;
}
inline void Property_ValueDouble::set_min(double value) {
  _internal_set_min(value);
  // @@protoc_insertion_point(field_set:snappyv1.Property.ValueDouble.min)
}

// double max = 3;
inline bool Property_ValueDouble::_internal_has_max() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Property_ValueDouble::has_max() const {
  return _internal_has_max();
}
inline void Property_ValueDouble::clear_max() {
  max_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double Property_ValueDouble::_internal_max() const {
  return max_;
}
inline double Property_ValueDouble::max() const {
  // @@protoc_insertion_point(field_get:snappyv1.Property.ValueDouble.max)
  return _internal_max();
}
inline void Property_ValueDouble::_internal_set_max(double value) {
  _has_bits_[0] |= 0x00000002u;
  max_ = value;
}
inline void Property_ValueDouble::set_max(double value) {
  _internal_set_max(value);
  // @@protoc_insertion_point(field_set:snappyv1.Property.ValueDouble.max)
}

// -------------------------------------------------------------------

// Property

// .snappyv1.PropertyType type = 1;
inline void Property::clear_type() {
  type_ = 0;
}
inline ::snappyv1::PropertyType Property::_internal_type() const {
  return static_cast< ::snappyv1::PropertyType >(type_);
}
inline ::snappyv1::PropertyType Property::type() const {
  // @@protoc_insertion_point(field_get:snappyv1.Property.type)
  return _internal_type();
}
inline void Property::_internal_set_type(::snappyv1::PropertyType value) {
  
  type_ = value;
}
inline void Property::set_type(::snappyv1::PropertyType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:snappyv1.Property.type)
}

// string key = 2;
inline void Property::clear_key() {
  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Property::key() const {
  // @@protoc_insertion_point(field_get:snappyv1.Property.key)
  return _internal_key();
}
inline void Property::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:snappyv1.Property.key)
}
inline std::string* Property::mutable_key() {
  // @@protoc_insertion_point(field_mutable:snappyv1.Property.key)
  return _internal_mutable_key();
}
inline const std::string& Property::_internal_key() const {
  return key_.Get();
}
inline void Property::_internal_set_key(const std::string& value) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Property::set_key(std::string&& value) {
  
  key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:snappyv1.Property.key)
}
inline void Property::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:snappyv1.Property.key)
}
inline void Property::set_key(const char* value,
    size_t size) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:snappyv1.Property.key)
}
inline std::string* Property::_internal_mutable_key() {
  
  return key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Property::release_key() {
  // @@protoc_insertion_point(field_release:snappyv1.Property.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Property::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:snappyv1.Property.key)
}
inline std::string* Property::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:snappyv1.Property.key)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return key_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Property::unsafe_arena_set_allocated_key(
    std::string* key) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (key != nullptr) {
    
  } else {
    
  }
  key_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      key, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:snappyv1.Property.key)
}

// .snappyv1.Property.ValueString value_string = 3;
inline bool Property::_internal_has_value_string() const {
  return value_case() == kValueString;
}
inline bool Property::has_value_string() const {
  return _internal_has_value_string();
}
inline void Property::set_has_value_string() {
  _oneof_case_[0] = kValueString;
}
inline void Property::clear_value_string() {
  if (_internal_has_value_string()) {
    if (GetArena() == nullptr) {
      delete value_.value_string_;
    }
    clear_has_value();
  }
}
inline ::snappyv1::Property_ValueString* Property::release_value_string() {
  // @@protoc_insertion_point(field_release:snappyv1.Property.value_string)
  if (_internal_has_value_string()) {
    clear_has_value();
      ::snappyv1::Property_ValueString* temp = value_.value_string_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    value_.value_string_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::snappyv1::Property_ValueString& Property::_internal_value_string() const {
  return _internal_has_value_string()
      ? *value_.value_string_
      : *reinterpret_cast< ::snappyv1::Property_ValueString*>(&::snappyv1::_Property_ValueString_default_instance_);
}
inline const ::snappyv1::Property_ValueString& Property::value_string() const {
  // @@protoc_insertion_point(field_get:snappyv1.Property.value_string)
  return _internal_value_string();
}
inline ::snappyv1::Property_ValueString* Property::unsafe_arena_release_value_string() {
  // @@protoc_insertion_point(field_unsafe_arena_release:snappyv1.Property.value_string)
  if (_internal_has_value_string()) {
    clear_has_value();
    ::snappyv1::Property_ValueString* temp = value_.value_string_;
    value_.value_string_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Property::unsafe_arena_set_allocated_value_string(::snappyv1::Property_ValueString* value_string) {
  clear_value();
  if (value_string) {
    set_has_value_string();
    value_.value_string_ = value_string;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:snappyv1.Property.value_string)
}
inline ::snappyv1::Property_ValueString* Property::_internal_mutable_value_string() {
  if (!_internal_has_value_string()) {
    clear_value();
    set_has_value_string();
    value_.value_string_ = CreateMaybeMessage< ::snappyv1::Property_ValueString >(GetArena());
  }
  return value_.value_string_;
}
inline ::snappyv1::Property_ValueString* Property::mutable_value_string() {
  // @@protoc_insertion_point(field_mutable:snappyv1.Property.value_string)
  return _internal_mutable_value_string();
}

// .snappyv1.Property.ValueBool value_bool = 4;
inline bool Property::_internal_has_value_bool() const {
  return value_case() == kValueBool;
}
inline bool Property::has_value_bool() const {
  return _internal_has_value_bool();
}
inline void Property::set_has_value_bool() {
  _oneof_case_[0] = kValueBool;
}
inline void Property::clear_value_bool() {
  if (_internal_has_value_bool()) {
    if (GetArena() == nullptr) {
      delete value_.value_bool_;
    }
    clear_has_value();
  }
}
inline ::snappyv1::Property_ValueBool* Property::release_value_bool() {
  // @@protoc_insertion_point(field_release:snappyv1.Property.value_bool)
  if (_internal_has_value_bool()) {
    clear_has_value();
      ::snappyv1::Property_ValueBool* temp = value_.value_bool_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    value_.value_bool_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::snappyv1::Property_ValueBool& Property::_internal_value_bool() const {
  return _internal_has_value_bool()
      ? *value_.value_bool_
      : *reinterpret_cast< ::snappyv1::Property_ValueBool*>(&::snappyv1::_Property_ValueBool_default_instance_);
}
inline const ::snappyv1::Property_ValueBool& Property::value_bool() const {
  // @@protoc_insertion_point(field_get:snappyv1.Property.value_bool)
  return _internal_value_bool();
}
inline ::snappyv1::Property_ValueBool* Property::unsafe_arena_release_value_bool() {
  // @@protoc_insertion_point(field_unsafe_arena_release:snappyv1.Property.value_bool)
  if (_internal_has_value_bool()) {
    clear_has_value();
    ::snappyv1::Property_ValueBool* temp = value_.value_bool_;
    value_.value_bool_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Property::unsafe_arena_set_allocated_value_bool(::snappyv1::Property_ValueBool* value_bool) {
  clear_value();
  if (value_bool) {
    set_has_value_bool();
    value_.value_bool_ = value_bool;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:snappyv1.Property.value_bool)
}
inline ::snappyv1::Property_ValueBool* Property::_internal_mutable_value_bool() {
  if (!_internal_has_value_bool()) {
    clear_value();
    set_has_value_bool();
    value_.value_bool_ = CreateMaybeMessage< ::snappyv1::Property_ValueBool >(GetArena());
  }
  return value_.value_bool_;
}
inline ::snappyv1::Property_ValueBool* Property::mutable_value_bool() {
  // @@protoc_insertion_point(field_mutable:snappyv1.Property.value_bool)
  return _internal_mutable_value_bool();
}

// .snappyv1.Property.ValueUint32 value_uint32 = 5;
inline bool Property::_internal_has_value_uint32() const {
  return value_case() == kValueUint32;
}
inline bool Property::has_value_uint32() const {
  return _internal_has_value_uint32();
}
inline void Property::set_has_value_uint32() {
  _oneof_case_[0] = kValueUint32;
}
inline void Property::clear_value_uint32() {
  if (_internal_has_value_uint32()) {
    if (GetArena() == nullptr) {
      delete value_.value_uint32_;
    }
    clear_has_value();
  }
}
inline ::snappyv1::Property_ValueUint32* Property::release_value_uint32() {
  // @@protoc_insertion_point(field_release:snappyv1.Property.value_uint32)
  if (_internal_has_value_uint32()) {
    clear_has_value();
      ::snappyv1::Property_ValueUint32* temp = value_.value_uint32_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    value_.value_uint32_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::snappyv1::Property_ValueUint32& Property::_internal_value_uint32() const {
  return _internal_has_value_uint32()
      ? *value_.value_uint32_
      : *reinterpret_cast< ::snappyv1::Property_ValueUint32*>(&::snappyv1::_Property_ValueUint32_default_instance_);
}
inline const ::snappyv1::Property_ValueUint32& Property::value_uint32() const {
  // @@protoc_insertion_point(field_get:snappyv1.Property.value_uint32)
  return _internal_value_uint32();
}
inline ::snappyv1::Property_ValueUint32* Property::unsafe_arena_release_value_uint32() {
  // @@protoc_insertion_point(field_unsafe_arena_release:snappyv1.Property.value_uint32)
  if (_internal_has_value_uint32()) {
    clear_has_value();
    ::snappyv1::Property_ValueUint32* temp = value_.value_uint32_;
    value_.value_uint32_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Property::unsafe_arena_set_allocated_value_uint32(::snappyv1::Property_ValueUint32* value_uint32) {
  clear_value();
  if (value_uint32) {
    set_has_value_uint32();
    value_.value_uint32_ = value_uint32;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:snappyv1.Property.value_uint32)
}
inline ::snappyv1::Property_ValueUint32* Property::_internal_mutable_value_uint32() {
  if (!_internal_has_value_uint32()) {
    clear_value();
    set_has_value_uint32();
    value_.value_uint32_ = CreateMaybeMessage< ::snappyv1::Property_ValueUint32 >(GetArena());
  }
  return value_.value_uint32_;
}
inline ::snappyv1::Property_ValueUint32* Property::mutable_value_uint32() {
  // @@protoc_insertion_point(field_mutable:snappyv1.Property.value_uint32)
  return _internal_mutable_value_uint32();
}

// .snappyv1.Property.ValueDouble value_double = 6;
inline bool Property::_internal_has_value_double() const {
  return value_case() == kValueDouble;
}
inline bool Property::has_value_double() const {
  return _internal_has_value_double();
}
inline void Property::set_has_value_double() {
  _oneof_case_[0] = kValueDouble;
}
inline void Property::clear_value_double() {
  if (_internal_has_value_double()) {
    if (GetArena() == nullptr) {
      delete value_.value_double_;
    }
    clear_has_value();
  }
}
inline ::snappyv1::Property_ValueDouble* Property::release_value_double() {
  // @@protoc_insertion_point(field_release:snappyv1.Property.value_double)
  if (_internal_has_value_double()) {
    clear_has_value();
      ::snappyv1::Property_ValueDouble* temp = value_.value_double_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    value_.value_double_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::snappyv1::Property_ValueDouble& Property::_internal_value_double() const {
  return _internal_has_value_double()
      ? *value_.value_double_
      : *reinterpret_cast< ::snappyv1::Property_ValueDouble*>(&::snappyv1::_Property_ValueDouble_default_instance_);
}
inline const ::snappyv1::Property_ValueDouble& Property::value_double() const {
  // @@protoc_insertion_point(field_get:snappyv1.Property.value_double)
  return _internal_value_double();
}
inline ::snappyv1::Property_ValueDouble* Property::unsafe_arena_release_value_double() {
  // @@protoc_insertion_point(field_unsafe_arena_release:snappyv1.Property.value_double)
  if (_internal_has_value_double()) {
    clear_has_value();
    ::snappyv1::Property_ValueDouble* temp = value_.value_double_;
    value_.value_double_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Property::unsafe_arena_set_allocated_value_double(::snappyv1::Property_ValueDouble* value_double) {
  clear_value();
  if (value_double) {
    set_has_value_double();
    value_.value_double_ = value_double;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:snappyv1.Property.value_double)
}
inline ::snappyv1::Property_ValueDouble* Property::_internal_mutable_value_double() {
  if (!_internal_has_value_double()) {
    clear_value();
    set_has_value_double();
    value_.value_double_ = CreateMaybeMessage< ::snappyv1::Property_ValueDouble >(GetArena());
  }
  return value_.value_double_;
}
inline ::snappyv1::Property_ValueDouble* Property::mutable_value_double() {
  // @@protoc_insertion_point(field_mutable:snappyv1.Property.value_double)
  return _internal_mutable_value_double();
}

inline bool Property::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void Property::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline Property::ValueCase Property::value_case() const {
  return Property::ValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// StreamInfo

// .snappyv1.Platform platform = 1;
inline void StreamInfo::clear_platform() {
  platform_ = 0;
}
inline ::snappyv1::Platform StreamInfo::_internal_platform() const {
  return static_cast< ::snappyv1::Platform >(platform_);
}
inline ::snappyv1::Platform StreamInfo::platform() const {
  // @@protoc_insertion_point(field_get:snappyv1.StreamInfo.platform)
  return _internal_platform();
}
inline void StreamInfo::_internal_set_platform(::snappyv1::Platform value) {
  
  platform_ = value;
}
inline void StreamInfo::set_platform(::snappyv1::Platform value) {
  _internal_set_platform(value);
  // @@protoc_insertion_point(field_set:snappyv1.StreamInfo.platform)
}

// repeated .snappyv1.StreamEndpoint stream_endpoints = 2;
inline int StreamInfo::_internal_stream_endpoints_size() const {
  return stream_endpoints_.size();
}
inline int StreamInfo::stream_endpoints_size() const {
  return _internal_stream_endpoints_size();
}
inline void StreamInfo::clear_stream_endpoints() {
  stream_endpoints_.Clear();
}
inline ::snappyv1::StreamEndpoint StreamInfo::_internal_stream_endpoints(int index) const {
  return static_cast< ::snappyv1::StreamEndpoint >(stream_endpoints_.Get(index));
}
inline ::snappyv1::StreamEndpoint StreamInfo::stream_endpoints(int index) const {
  // @@protoc_insertion_point(field_get:snappyv1.StreamInfo.stream_endpoints)
  return _internal_stream_endpoints(index);
}
inline void StreamInfo::set_stream_endpoints(int index, ::snappyv1::StreamEndpoint value) {
  stream_endpoints_.Set(index, value);
  // @@protoc_insertion_point(field_set:snappyv1.StreamInfo.stream_endpoints)
}
inline void StreamInfo::_internal_add_stream_endpoints(::snappyv1::StreamEndpoint value) {
  stream_endpoints_.Add(value);
}
inline void StreamInfo::add_stream_endpoints(::snappyv1::StreamEndpoint value) {
  // @@protoc_insertion_point(field_add:snappyv1.StreamInfo.stream_endpoints)
  _internal_add_stream_endpoints(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
StreamInfo::stream_endpoints() const {
  // @@protoc_insertion_point(field_list:snappyv1.StreamInfo.stream_endpoints)
  return stream_endpoints_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
StreamInfo::_internal_mutable_stream_endpoints() {
  return &stream_endpoints_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
StreamInfo::mutable_stream_endpoints() {
  // @@protoc_insertion_point(field_mutable_list:snappyv1.StreamInfo.stream_endpoints)
  return _internal_mutable_stream_endpoints();
}

// repeated .snappyv1.StreamEncoding stream_encodings = 3;
inline int StreamInfo::_internal_stream_encodings_size() const {
  return stream_encodings_.size();
}
inline int StreamInfo::stream_encodings_size() const {
  return _internal_stream_encodings_size();
}
inline void StreamInfo::clear_stream_encodings() {
  stream_encodings_.Clear();
}
inline ::snappyv1::StreamEncoding StreamInfo::_internal_stream_encodings(int index) const {
  return static_cast< ::snappyv1::StreamEncoding >(stream_encodings_.Get(index));
}
inline ::snappyv1::StreamEncoding StreamInfo::stream_encodings(int index) const {
  // @@protoc_insertion_point(field_get:snappyv1.StreamInfo.stream_encodings)
  return _internal_stream_encodings(index);
}
inline void StreamInfo::set_stream_encodings(int index, ::snappyv1::StreamEncoding value) {
  stream_encodings_.Set(index, value);
  // @@protoc_insertion_point(field_set:snappyv1.StreamInfo.stream_encodings)
}
inline void StreamInfo::_internal_add_stream_encodings(::snappyv1::StreamEncoding value) {
  stream_encodings_.Add(value);
}
inline void StreamInfo::add_stream_encodings(::snappyv1::StreamEncoding value) {
  // @@protoc_insertion_point(field_add:snappyv1.StreamInfo.stream_encodings)
  _internal_add_stream_encodings(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
StreamInfo::stream_encodings() const {
  // @@protoc_insertion_point(field_list:snappyv1.StreamInfo.stream_encodings)
  return stream_encodings_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
StreamInfo::_internal_mutable_stream_encodings() {
  return &stream_encodings_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
StreamInfo::mutable_stream_encodings() {
  // @@protoc_insertion_point(field_mutable_list:snappyv1.StreamInfo.stream_encodings)
  return _internal_mutable_stream_encodings();
}

// -------------------------------------------------------------------

// StreamChange

// uint32 id = 1;
inline void StreamChange::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StreamChange::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StreamChange::id() const {
  // @@protoc_insertion_point(field_get:snappyv1.StreamChange.id)
  return _internal_id();
}
inline void StreamChange::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void StreamChange::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:snappyv1.StreamChange.id)
}

// .snappyv1.Command command = 2;
inline void StreamChange::clear_command() {
  command_ = 0;
}
inline ::snappyv1::Command StreamChange::_internal_command() const {
  return static_cast< ::snappyv1::Command >(command_);
}
inline ::snappyv1::Command StreamChange::command() const {
  // @@protoc_insertion_point(field_get:snappyv1.StreamChange.command)
  return _internal_command();
}
inline void StreamChange::_internal_set_command(::snappyv1::Command value) {
  
  command_ = value;
}
inline void StreamChange::set_command(::snappyv1::Command value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:snappyv1.StreamChange.command)
}

// .snappyv1.StreamMedium stream_medium = 3;
inline void StreamChange::clear_stream_medium() {
  stream_medium_ = 0;
}
inline ::snappyv1::StreamMedium StreamChange::_internal_stream_medium() const {
  return static_cast< ::snappyv1::StreamMedium >(stream_medium_);
}
inline ::snappyv1::StreamMedium StreamChange::stream_medium() const {
  // @@protoc_insertion_point(field_get:snappyv1.StreamChange.stream_medium)
  return _internal_stream_medium();
}
inline void StreamChange::_internal_set_stream_medium(::snappyv1::StreamMedium value) {
  
  stream_medium_ = value;
}
inline void StreamChange::set_stream_medium(::snappyv1::StreamMedium value) {
  _internal_set_stream_medium(value);
  // @@protoc_insertion_point(field_set:snappyv1.StreamChange.stream_medium)
}

// .snappyv1.StreamDirection stream_direction = 4;
inline void StreamChange::clear_stream_direction() {
  stream_direction_ = 0;
}
inline ::snappyv1::StreamDirection StreamChange::_internal_stream_direction() const {
  return static_cast< ::snappyv1::StreamDirection >(stream_direction_);
}
inline ::snappyv1::StreamDirection StreamChange::stream_direction() const {
  // @@protoc_insertion_point(field_get:snappyv1.StreamChange.stream_direction)
  return _internal_stream_direction();
}
inline void StreamChange::_internal_set_stream_direction(::snappyv1::StreamDirection value) {
  
  stream_direction_ = value;
}
inline void StreamChange::set_stream_direction(::snappyv1::StreamDirection value) {
  _internal_set_stream_direction(value);
  // @@protoc_insertion_point(field_set:snappyv1.StreamChange.stream_direction)
}

// .snappyv1.StreamEndpoint stream_endpoint = 5;
inline void StreamChange::clear_stream_endpoint() {
  stream_endpoint_ = 0;
}
inline ::snappyv1::StreamEndpoint StreamChange::_internal_stream_endpoint() const {
  return static_cast< ::snappyv1::StreamEndpoint >(stream_endpoint_);
}
inline ::snappyv1::StreamEndpoint StreamChange::stream_endpoint() const {
  // @@protoc_insertion_point(field_get:snappyv1.StreamChange.stream_endpoint)
  return _internal_stream_endpoint();
}
inline void StreamChange::_internal_set_stream_endpoint(::snappyv1::StreamEndpoint value) {
  
  stream_endpoint_ = value;
}
inline void StreamChange::set_stream_endpoint(::snappyv1::StreamEndpoint value) {
  _internal_set_stream_endpoint(value);
  // @@protoc_insertion_point(field_set:snappyv1.StreamChange.stream_endpoint)
}

// .snappyv1.StreamEncoding stream_encoding = 6;
inline void StreamChange::clear_stream_encoding() {
  stream_encoding_ = 0;
}
inline ::snappyv1::StreamEncoding StreamChange::_internal_stream_encoding() const {
  return static_cast< ::snappyv1::StreamEncoding >(stream_encoding_);
}
inline ::snappyv1::StreamEncoding StreamChange::stream_encoding() const {
  // @@protoc_insertion_point(field_get:snappyv1.StreamChange.stream_encoding)
  return _internal_stream_encoding();
}
inline void StreamChange::_internal_set_stream_encoding(::snappyv1::StreamEncoding value) {
  
  stream_encoding_ = value;
}
inline void StreamChange::set_stream_encoding(::snappyv1::StreamEncoding value) {
  _internal_set_stream_encoding(value);
  // @@protoc_insertion_point(field_set:snappyv1.StreamChange.stream_encoding)
}

// repeated .snappyv1.Property property = 7;
inline int StreamChange::_internal_property_size() const {
  return property_.size();
}
inline int StreamChange::property_size() const {
  return _internal_property_size();
}
inline void StreamChange::clear_property() {
  property_.Clear();
}
inline ::snappyv1::Property* StreamChange::mutable_property(int index) {
  // @@protoc_insertion_point(field_mutable:snappyv1.StreamChange.property)
  return property_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::snappyv1::Property >*
StreamChange::mutable_property() {
  // @@protoc_insertion_point(field_mutable_list:snappyv1.StreamChange.property)
  return &property_;
}
inline const ::snappyv1::Property& StreamChange::_internal_property(int index) const {
  return property_.Get(index);
}
inline const ::snappyv1::Property& StreamChange::property(int index) const {
  // @@protoc_insertion_point(field_get:snappyv1.StreamChange.property)
  return _internal_property(index);
}
inline ::snappyv1::Property* StreamChange::_internal_add_property() {
  return property_.Add();
}
inline ::snappyv1::Property* StreamChange::add_property() {
  // @@protoc_insertion_point(field_add:snappyv1.StreamChange.property)
  return _internal_add_property();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::snappyv1::Property >&
StreamChange::property() const {
  // @@protoc_insertion_point(field_list:snappyv1.StreamChange.property)
  return property_;
}

// -------------------------------------------------------------------

// StreamData

// uint32 stream_id = 1;
inline void StreamData::clear_stream_id() {
  stream_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StreamData::_internal_stream_id() const {
  return stream_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StreamData::stream_id() const {
  // @@protoc_insertion_point(field_get:snappyv1.StreamData.stream_id)
  return _internal_stream_id();
}
inline void StreamData::_internal_set_stream_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  stream_id_ = value;
}
inline void StreamData::set_stream_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_stream_id(value);
  // @@protoc_insertion_point(field_set:snappyv1.StreamData.stream_id)
}

// bytes payload = 2;
inline void StreamData::clear_payload() {
  payload_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& StreamData::payload() const {
  // @@protoc_insertion_point(field_get:snappyv1.StreamData.payload)
  return _internal_payload();
}
inline void StreamData::set_payload(const std::string& value) {
  _internal_set_payload(value);
  // @@protoc_insertion_point(field_set:snappyv1.StreamData.payload)
}
inline std::string* StreamData::mutable_payload() {
  // @@protoc_insertion_point(field_mutable:snappyv1.StreamData.payload)
  return _internal_mutable_payload();
}
inline const std::string& StreamData::_internal_payload() const {
  return payload_.Get();
}
inline void StreamData::_internal_set_payload(const std::string& value) {
  
  payload_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StreamData::set_payload(std::string&& value) {
  
  payload_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:snappyv1.StreamData.payload)
}
inline void StreamData::set_payload(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  payload_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:snappyv1.StreamData.payload)
}
inline void StreamData::set_payload(const void* value,
    size_t size) {
  
  payload_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:snappyv1.StreamData.payload)
}
inline std::string* StreamData::_internal_mutable_payload() {
  
  return payload_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StreamData::release_payload() {
  // @@protoc_insertion_point(field_release:snappyv1.StreamData.payload)
  return payload_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StreamData::set_allocated_payload(std::string* payload) {
  if (payload != nullptr) {
    
  } else {
    
  }
  payload_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payload,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:snappyv1.StreamData.payload)
}
inline std::string* StreamData::unsafe_arena_release_payload() {
  // @@protoc_insertion_point(field_unsafe_arena_release:snappyv1.StreamData.payload)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return payload_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void StreamData::unsafe_arena_set_allocated_payload(
    std::string* payload) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (payload != nullptr) {
    
  } else {
    
  }
  payload_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      payload, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:snappyv1.StreamData.payload)
}

// -------------------------------------------------------------------

// Message

// .snappyv1.MessageType type = 1;
inline void Message::clear_type() {
  type_ = 0;
}
inline ::snappyv1::MessageType Message::_internal_type() const {
  return static_cast< ::snappyv1::MessageType >(type_);
}
inline ::snappyv1::MessageType Message::type() const {
  // @@protoc_insertion_point(field_get:snappyv1.Message.type)
  return _internal_type();
}
inline void Message::_internal_set_type(::snappyv1::MessageType value) {
  
  type_ = value;
}
inline void Message::set_type(::snappyv1::MessageType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:snappyv1.Message.type)
}

// .snappyv1.StreamChange stream_change = 2;
inline bool Message::_internal_has_stream_change() const {
  return message_case() == kStreamChange;
}
inline bool Message::has_stream_change() const {
  return _internal_has_stream_change();
}
inline void Message::set_has_stream_change() {
  _oneof_case_[0] = kStreamChange;
}
inline void Message::clear_stream_change() {
  if (_internal_has_stream_change()) {
    if (GetArena() == nullptr) {
      delete message_.stream_change_;
    }
    clear_has_message();
  }
}
inline ::snappyv1::StreamChange* Message::release_stream_change() {
  // @@protoc_insertion_point(field_release:snappyv1.Message.stream_change)
  if (_internal_has_stream_change()) {
    clear_has_message();
      ::snappyv1::StreamChange* temp = message_.stream_change_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_.stream_change_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::snappyv1::StreamChange& Message::_internal_stream_change() const {
  return _internal_has_stream_change()
      ? *message_.stream_change_
      : *reinterpret_cast< ::snappyv1::StreamChange*>(&::snappyv1::_StreamChange_default_instance_);
}
inline const ::snappyv1::StreamChange& Message::stream_change() const {
  // @@protoc_insertion_point(field_get:snappyv1.Message.stream_change)
  return _internal_stream_change();
}
inline ::snappyv1::StreamChange* Message::unsafe_arena_release_stream_change() {
  // @@protoc_insertion_point(field_unsafe_arena_release:snappyv1.Message.stream_change)
  if (_internal_has_stream_change()) {
    clear_has_message();
    ::snappyv1::StreamChange* temp = message_.stream_change_;
    message_.stream_change_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_stream_change(::snappyv1::StreamChange* stream_change) {
  clear_message();
  if (stream_change) {
    set_has_stream_change();
    message_.stream_change_ = stream_change;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:snappyv1.Message.stream_change)
}
inline ::snappyv1::StreamChange* Message::_internal_mutable_stream_change() {
  if (!_internal_has_stream_change()) {
    clear_message();
    set_has_stream_change();
    message_.stream_change_ = CreateMaybeMessage< ::snappyv1::StreamChange >(GetArena());
  }
  return message_.stream_change_;
}
inline ::snappyv1::StreamChange* Message::mutable_stream_change() {
  // @@protoc_insertion_point(field_mutable:snappyv1.Message.stream_change)
  return _internal_mutable_stream_change();
}

// .snappyv1.StreamData stream_data = 3;
inline bool Message::_internal_has_stream_data() const {
  return message_case() == kStreamData;
}
inline bool Message::has_stream_data() const {
  return _internal_has_stream_data();
}
inline void Message::set_has_stream_data() {
  _oneof_case_[0] = kStreamData;
}
inline void Message::clear_stream_data() {
  if (_internal_has_stream_data()) {
    if (GetArena() == nullptr) {
      delete message_.stream_data_;
    }
    clear_has_message();
  }
}
inline ::snappyv1::StreamData* Message::release_stream_data() {
  // @@protoc_insertion_point(field_release:snappyv1.Message.stream_data)
  if (_internal_has_stream_data()) {
    clear_has_message();
      ::snappyv1::StreamData* temp = message_.stream_data_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_.stream_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::snappyv1::StreamData& Message::_internal_stream_data() const {
  return _internal_has_stream_data()
      ? *message_.stream_data_
      : *reinterpret_cast< ::snappyv1::StreamData*>(&::snappyv1::_StreamData_default_instance_);
}
inline const ::snappyv1::StreamData& Message::stream_data() const {
  // @@protoc_insertion_point(field_get:snappyv1.Message.stream_data)
  return _internal_stream_data();
}
inline ::snappyv1::StreamData* Message::unsafe_arena_release_stream_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:snappyv1.Message.stream_data)
  if (_internal_has_stream_data()) {
    clear_has_message();
    ::snappyv1::StreamData* temp = message_.stream_data_;
    message_.stream_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_stream_data(::snappyv1::StreamData* stream_data) {
  clear_message();
  if (stream_data) {
    set_has_stream_data();
    message_.stream_data_ = stream_data;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:snappyv1.Message.stream_data)
}
inline ::snappyv1::StreamData* Message::_internal_mutable_stream_data() {
  if (!_internal_has_stream_data()) {
    clear_message();
    set_has_stream_data();
    message_.stream_data_ = CreateMaybeMessage< ::snappyv1::StreamData >(GetArena());
  }
  return message_.stream_data_;
}
inline ::snappyv1::StreamData* Message::mutable_stream_data() {
  // @@protoc_insertion_point(field_mutable:snappyv1.Message.stream_data)
  return _internal_mutable_stream_data();
}

// .snappyv1.StreamInfo stream_info = 4;
inline bool Message::_internal_has_stream_info() const {
  return message_case() == kStreamInfo;
}
inline bool Message::has_stream_info() const {
  return _internal_has_stream_info();
}
inline void Message::set_has_stream_info() {
  _oneof_case_[0] = kStreamInfo;
}
inline void Message::clear_stream_info() {
  if (_internal_has_stream_info()) {
    if (GetArena() == nullptr) {
      delete message_.stream_info_;
    }
    clear_has_message();
  }
}
inline ::snappyv1::StreamInfo* Message::release_stream_info() {
  // @@protoc_insertion_point(field_release:snappyv1.Message.stream_info)
  if (_internal_has_stream_info()) {
    clear_has_message();
      ::snappyv1::StreamInfo* temp = message_.stream_info_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_.stream_info_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::snappyv1::StreamInfo& Message::_internal_stream_info() const {
  return _internal_has_stream_info()
      ? *message_.stream_info_
      : *reinterpret_cast< ::snappyv1::StreamInfo*>(&::snappyv1::_StreamInfo_default_instance_);
}
inline const ::snappyv1::StreamInfo& Message::stream_info() const {
  // @@protoc_insertion_point(field_get:snappyv1.Message.stream_info)
  return _internal_stream_info();
}
inline ::snappyv1::StreamInfo* Message::unsafe_arena_release_stream_info() {
  // @@protoc_insertion_point(field_unsafe_arena_release:snappyv1.Message.stream_info)
  if (_internal_has_stream_info()) {
    clear_has_message();
    ::snappyv1::StreamInfo* temp = message_.stream_info_;
    message_.stream_info_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_stream_info(::snappyv1::StreamInfo* stream_info) {
  clear_message();
  if (stream_info) {
    set_has_stream_info();
    message_.stream_info_ = stream_info;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:snappyv1.Message.stream_info)
}
inline ::snappyv1::StreamInfo* Message::_internal_mutable_stream_info() {
  if (!_internal_has_stream_info()) {
    clear_message();
    set_has_stream_info();
    message_.stream_info_ = CreateMaybeMessage< ::snappyv1::StreamInfo >(GetArena());
  }
  return message_.stream_info_;
}
inline ::snappyv1::StreamInfo* Message::mutable_stream_info() {
  // @@protoc_insertion_point(field_mutable:snappyv1.Message.stream_info)
  return _internal_mutable_stream_info();
}

inline bool Message::has_message() const {
  return message_case() != MESSAGE_NOT_SET;
}
inline void Message::clear_has_message() {
  _oneof_case_[0] = MESSAGE_NOT_SET;
}
inline Message::MessageCase Message::message_case() const {
  return Message::MessageCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// StreamDataPointer

// uint32 absx = 1;
inline void StreamDataPointer::clear_absx() {
  absx_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StreamDataPointer::_internal_absx() const {
  return absx_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StreamDataPointer::absx() const {
  // @@protoc_insertion_point(field_get:snappyv1.StreamDataPointer.absx)
  return _internal_absx();
}
inline void StreamDataPointer::_internal_set_absx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  absx_ = value;
}
inline void StreamDataPointer::set_absx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_absx(value);
  // @@protoc_insertion_point(field_set:snappyv1.StreamDataPointer.absx)
}

// uint32 absy = 2;
inline void StreamDataPointer::clear_absy() {
  absy_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StreamDataPointer::_internal_absy() const {
  return absy_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StreamDataPointer::absy() const {
  // @@protoc_insertion_point(field_get:snappyv1.StreamDataPointer.absy)
  return _internal_absy();
}
inline void StreamDataPointer::_internal_set_absy(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  absy_ = value;
}
inline void StreamDataPointer::set_absy(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_absy(value);
  // @@protoc_insertion_point(field_set:snappyv1.StreamDataPointer.absy)
}

// int32 mask = 3;
inline bool StreamDataPointer::_internal_has_mask() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool StreamDataPointer::has_mask() const {
  return _internal_has_mask();
}
inline void StreamDataPointer::clear_mask() {
  mask_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StreamDataPointer::_internal_mask() const {
  return mask_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StreamDataPointer::mask() const {
  // @@protoc_insertion_point(field_get:snappyv1.StreamDataPointer.mask)
  return _internal_mask();
}
inline void StreamDataPointer::_internal_set_mask(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  mask_ = value;
}
inline void StreamDataPointer::set_mask(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mask(value);
  // @@protoc_insertion_point(field_set:snappyv1.StreamDataPointer.mask)
}

// -------------------------------------------------------------------

// StreamDataKeyboard

// uint32 keysym = 1;
inline void StreamDataKeyboard::clear_keysym() {
  keysym_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StreamDataKeyboard::_internal_keysym() const {
  return keysym_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StreamDataKeyboard::keysym() const {
  // @@protoc_insertion_point(field_get:snappyv1.StreamDataKeyboard.keysym)
  return _internal_keysym();
}
inline void StreamDataKeyboard::_internal_set_keysym(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  keysym_ = value;
}
inline void StreamDataKeyboard::set_keysym(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_keysym(value);
  // @@protoc_insertion_point(field_set:snappyv1.StreamDataKeyboard.keysym)
}

// uint32 keycode = 2;
inline void StreamDataKeyboard::clear_keycode() {
  keycode_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StreamDataKeyboard::_internal_keycode() const {
  return keycode_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StreamDataKeyboard::keycode() const {
  // @@protoc_insertion_point(field_get:snappyv1.StreamDataKeyboard.keycode)
  return _internal_keycode();
}
inline void StreamDataKeyboard::_internal_set_keycode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  keycode_ = value;
}
inline void StreamDataKeyboard::set_keycode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_keycode(value);
  // @@protoc_insertion_point(field_set:snappyv1.StreamDataKeyboard.keycode)
}

// bool down = 3;
inline void StreamDataKeyboard::clear_down() {
  down_ = false;
}
inline bool StreamDataKeyboard::_internal_down() const {
  return down_;
}
inline bool StreamDataKeyboard::down() const {
  // @@protoc_insertion_point(field_get:snappyv1.StreamDataKeyboard.down)
  return _internal_down();
}
inline void StreamDataKeyboard::_internal_set_down(bool value) {
  
  down_ = value;
}
inline void StreamDataKeyboard::set_down(bool value) {
  _internal_set_down(value);
  // @@protoc_insertion_point(field_set:snappyv1.StreamDataKeyboard.down)
}

// -------------------------------------------------------------------

// StreamDataCursor

// uint32 width = 1;
inline void StreamDataCursor::clear_width() {
  width_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StreamDataCursor::_internal_width() const {
  return width_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StreamDataCursor::width() const {
  // @@protoc_insertion_point(field_get:snappyv1.StreamDataCursor.width)
  return _internal_width();
}
inline void StreamDataCursor::_internal_set_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  width_ = value;
}
inline void StreamDataCursor::set_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:snappyv1.StreamDataCursor.width)
}

// uint32 height = 2;
inline void StreamDataCursor::clear_height() {
  height_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StreamDataCursor::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StreamDataCursor::height() const {
  // @@protoc_insertion_point(field_get:snappyv1.StreamDataCursor.height)
  return _internal_height();
}
inline void StreamDataCursor::_internal_set_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  height_ = value;
}
inline void StreamDataCursor::set_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:snappyv1.StreamDataCursor.height)
}

// uint32 hotx = 3;
inline void StreamDataCursor::clear_hotx() {
  hotx_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StreamDataCursor::_internal_hotx() const {
  return hotx_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StreamDataCursor::hotx() const {
  // @@protoc_insertion_point(field_get:snappyv1.StreamDataCursor.hotx)
  return _internal_hotx();
}
inline void StreamDataCursor::_internal_set_hotx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  hotx_ = value;
}
inline void StreamDataCursor::set_hotx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_hotx(value);
  // @@protoc_insertion_point(field_set:snappyv1.StreamDataCursor.hotx)
}

// uint32 hoty = 4;
inline void StreamDataCursor::clear_hoty() {
  hoty_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StreamDataCursor::_internal_hoty() const {
  return hoty_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StreamDataCursor::hoty() const {
  // @@protoc_insertion_point(field_get:snappyv1.StreamDataCursor.hoty)
  return _internal_hoty();
}
inline void StreamDataCursor::_internal_set_hoty(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  hoty_ = value;
}
inline void StreamDataCursor::set_hoty(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_hoty(value);
  // @@protoc_insertion_point(field_set:snappyv1.StreamDataCursor.hoty)
}

// bytes image = 5;
inline void StreamDataCursor::clear_image() {
  image_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& StreamDataCursor::image() const {
  // @@protoc_insertion_point(field_get:snappyv1.StreamDataCursor.image)
  return _internal_image();
}
inline void StreamDataCursor::set_image(const std::string& value) {
  _internal_set_image(value);
  // @@protoc_insertion_point(field_set:snappyv1.StreamDataCursor.image)
}
inline std::string* StreamDataCursor::mutable_image() {
  // @@protoc_insertion_point(field_mutable:snappyv1.StreamDataCursor.image)
  return _internal_mutable_image();
}
inline const std::string& StreamDataCursor::_internal_image() const {
  return image_.Get();
}
inline void StreamDataCursor::_internal_set_image(const std::string& value) {
  
  image_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StreamDataCursor::set_image(std::string&& value) {
  
  image_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:snappyv1.StreamDataCursor.image)
}
inline void StreamDataCursor::set_image(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  image_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:snappyv1.StreamDataCursor.image)
}
inline void StreamDataCursor::set_image(const void* value,
    size_t size) {
  
  image_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:snappyv1.StreamDataCursor.image)
}
inline std::string* StreamDataCursor::_internal_mutable_image() {
  
  return image_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StreamDataCursor::release_image() {
  // @@protoc_insertion_point(field_release:snappyv1.StreamDataCursor.image)
  return image_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StreamDataCursor::set_allocated_image(std::string* image) {
  if (image != nullptr) {
    
  } else {
    
  }
  image_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), image,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:snappyv1.StreamDataCursor.image)
}
inline std::string* StreamDataCursor::unsafe_arena_release_image() {
  // @@protoc_insertion_point(field_unsafe_arena_release:snappyv1.StreamDataCursor.image)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return image_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void StreamDataCursor::unsafe_arena_set_allocated_image(
    std::string* image) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (image != nullptr) {
    
  } else {
    
  }
  image_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      image, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:snappyv1.StreamDataCursor.image)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace snappyv1

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::snappyv1::Platform> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::snappyv1::Platform>() {
  return ::snappyv1::Platform_descriptor();
}
template <> struct is_proto_enum< ::snappyv1::StreamMedium> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::snappyv1::StreamMedium>() {
  return ::snappyv1::StreamMedium_descriptor();
}
template <> struct is_proto_enum< ::snappyv1::StreamEndpoint> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::snappyv1::StreamEndpoint>() {
  return ::snappyv1::StreamEndpoint_descriptor();
}
template <> struct is_proto_enum< ::snappyv1::StreamDirection> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::snappyv1::StreamDirection>() {
  return ::snappyv1::StreamDirection_descriptor();
}
template <> struct is_proto_enum< ::snappyv1::StreamEncoding> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::snappyv1::StreamEncoding>() {
  return ::snappyv1::StreamEncoding_descriptor();
}
template <> struct is_proto_enum< ::snappyv1::Command> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::snappyv1::Command>() {
  return ::snappyv1::Command_descriptor();
}
template <> struct is_proto_enum< ::snappyv1::PropertyType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::snappyv1::PropertyType>() {
  return ::snappyv1::PropertyType_descriptor();
}
template <> struct is_proto_enum< ::snappyv1::MessageType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::snappyv1::MessageType>() {
  return ::snappyv1::MessageType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_snappyv1_2eproto
